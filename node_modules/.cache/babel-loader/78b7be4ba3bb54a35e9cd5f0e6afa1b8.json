{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport Action from '../base';\nimport { getElements, getMaskedElements, getSiblingMaskElements, getSilbings, isInRecords, isMask } from '../util';\n/**\n * Sibling filter\n * @ignore\n */\n\nvar SiblingFilter =\n/** @class */\nfunction (_super) {\n  __extends(SiblingFilter, _super);\n\n  function SiblingFilter() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.byRecord = false;\n    return _this;\n  }\n  /**\n   * 过滤隐藏图形\n   */\n\n\n  SiblingFilter.prototype.filter = function () {\n    // 仅考虑 mask 导致的过滤\n    if (isMask(this.context)) {\n      if (this.byRecord) {\n        this.filterByRecord();\n      } else {\n        this.filterByBBox();\n      }\n    }\n  }; // 根据框选的记录来做过滤\n\n\n  SiblingFilter.prototype.filterByRecord = function () {\n    var view = this.context.view;\n    var maskElements = getMaskedElements(this.context, 10);\n\n    if (!maskElements) {\n      return;\n    }\n\n    var xFiled = view.getXScale().field;\n    var yField = view.getYScales()[0].field;\n    var records = maskElements.map(function (el) {\n      return el.getModel().data;\n    });\n    var siblings = getSilbings(view);\n    each(siblings, function (sibling) {\n      var elements = getElements(sibling);\n      each(elements, function (el) {\n        var record = el.getModel().data; // records.includes(record) 不生效，应该是数据的引用被改了\n\n        if (isInRecords(records, record, xFiled, yField)) {\n          el.show();\n        } else {\n          el.hide();\n        }\n      });\n    });\n  }; // 根据被框选的包围盒做过滤\n\n\n  SiblingFilter.prototype.filterByBBox = function () {\n    var _this = this;\n\n    var view = this.context.view;\n    var siblings = getSilbings(view);\n    each(siblings, function (sibling) {\n      var maskElements = getSiblingMaskElements(_this.context, sibling, 10);\n      var elements = getElements(sibling);\n\n      if (maskElements) {\n        // mask 过小时返回为 null，不能是空数组，否则同未框选到混淆\n        each(elements, function (el) {\n          if (maskElements.includes(el)) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    });\n  };\n  /**\n   * 清理所有隐藏的图形\n   */\n\n\n  SiblingFilter.prototype.reset = function () {\n    var siblings = getSilbings(this.context.view);\n    each(siblings, function (sibling) {\n      var elements = getElements(sibling);\n      each(elements, function (el) {\n        el.show();\n      });\n    });\n  };\n\n  return SiblingFilter;\n}(Action);\n\nexport default SiblingFilter;","map":{"version":3,"sources":["../../../../src/interaction/action/element/sibling-filter.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport Action from '../base';\nimport { getElements, getMaskedElements, getSiblingMaskElements, getSilbings, isInRecords, isMask } from '../util';\n\n/**\n * Sibling filter\n * @ignore\n */\nclass SiblingFilter extends Action {\n  protected byRecord = false;\n  /**\n   * 过滤隐藏图形\n   */\n  public filter() {\n    // 仅考虑 mask 导致的过滤\n    if (isMask(this.context)) {\n      if (this.byRecord) {\n        this.filterByRecord();\n      } else {\n        this.filterByBBox();\n      }\n    }\n  }\n  // 根据框选的记录来做过滤\n  private filterByRecord() {\n    const view = this.context.view;\n    const maskElements = getMaskedElements(this.context, 10);\n    if (!maskElements) {\n      return;\n    }\n    const xFiled = view.getXScale().field;\n    const yField = view.getYScales()[0].field;\n    const records = maskElements.map((el) => {\n      return el.getModel().data;\n    });\n    const siblings = getSilbings(view);\n    each(siblings, (sibling) => {\n      const elements = getElements(sibling);\n      each(elements, (el) => {\n        const record = el.getModel().data;\n        // records.includes(record) 不生效，应该是数据的引用被改了\n        if (isInRecords(records, record, xFiled, yField)) {\n          el.show();\n        } else {\n          el.hide();\n        }\n      });\n    });\n  }\n\n  // 根据被框选的包围盒做过滤\n  private filterByBBox() {\n    const view = this.context.view;\n    const siblings = getSilbings(view);\n    each(siblings, (sibling) => {\n      const maskElements = getSiblingMaskElements(this.context, sibling, 10);\n      const elements = getElements(sibling);\n      if (maskElements) {\n        // mask 过小时返回为 null，不能是空数组，否则同未框选到混淆\n        each(elements, (el) => {\n          if (maskElements.includes(el)) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * 清理所有隐藏的图形\n   */\n  public reset() {\n    const siblings = getSilbings(this.context.view);\n    each(siblings, (sibling) => {\n      const elements = getElements(sibling);\n      each(elements, (el) => {\n        el.show();\n      });\n    });\n  }\n}\n\nexport default SiblingFilter;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}