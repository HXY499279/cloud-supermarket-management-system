{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { isString, memoize, values, toString } from '@antv/util';\nimport { getCanvasContext } from './context';\n/**\n * 计算文本在画布中的宽度\n */\n\nexport var measureTextWidth = memoize(function (text, font) {\n  if (font === void 0) {\n    font = {};\n  }\n\n  var fontSize = font.fontSize,\n      fontFamily = font.fontFamily,\n      fontWeight = font.fontWeight,\n      fontStyle = font.fontStyle,\n      fontVariant = font.fontVariant;\n  var ctx = getCanvasContext();\n  ctx.font = [fontStyle, fontVariant, fontWeight, fontSize + \"px\", fontFamily].join(' ');\n  return ctx.measureText(isString(text) ? text : '').width;\n}, function (text, font) {\n  if (font === void 0) {\n    font = {};\n  }\n\n  return __spreadArrays([text], values(font)).join('');\n});\n/**\n * 获取文本的 ... 文本。\n * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：\n * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串\n * 2. 然后对最后这个字符串二分计算\n * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等\n * @param maxWidth\n * @param font\n */\n\nexport var getEllipsisText = function (text, maxWidth, font) {\n  var STEP = 16; // 每次 16，调参工程师\n\n  var DOT_WIDTH = measureTextWidth('...', font);\n  var leftText;\n\n  if (!isString(text)) {\n    leftText = toString(text);\n  } else {\n    leftText = text;\n  }\n\n  var leftWidth = maxWidth;\n  var r = []; // 最终的分段字符串\n\n  var currentText;\n  var currentWidth;\n\n  if (measureTextWidth(text, font) <= maxWidth) {\n    return text;\n  } // 首先通过 step 计算，找出最大的未超出长度的\n\n\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, STEP); // 计算宽度\n\n    currentWidth = measureTextWidth(currentText, font); // 超出剩余宽度，则停止\n\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      if (currentWidth > leftWidth) {\n        break;\n      }\n    }\n\n    r.push(currentText); // 没有超出，则计算剩余宽度\n\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(STEP); // 字符串整体没有超出\n\n    if (!leftText) {\n      return r.join('');\n    }\n  } // 最下的最后一个 STEP，使用 1 递增（用二分效果更高）\n\n\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, 1); // 计算宽度\n\n    currentWidth = measureTextWidth(currentText, font); // 超出剩余宽度，则停止\n\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      break;\n    }\n\n    r.push(currentText); // 没有超出，则计算剩余宽度\n\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(1);\n\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n\n  return r.join('') + \"...\";\n};","map":{"version":3,"sources":["../../src/util/text.ts"],"names":[],"mappings":"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","sourcesContent":["import { isString, memoize, values, toString } from '@antv/util';\nimport * as CSS from 'csstype';\nimport { getCanvasContext } from './context';\n\ntype FontFace = CSS.Properties;\n\ntype Font = Pick<FontFace, 'fontFamily' | 'fontWeight' | 'fontStyle' | 'fontVariant'> & {\n  fontSize?: number;\n};\n\n/**\n * 计算文本在画布中的宽度\n */\nexport const measureTextWidth = memoize(\n  (text: any, font: Font = {}): number => {\n    const { fontSize, fontFamily, fontWeight, fontStyle, fontVariant } = font;\n    const ctx = getCanvasContext();\n    ctx!.font = [fontStyle, fontVariant, fontWeight, `${fontSize}px`, fontFamily].join(' ');\n    return ctx!.measureText(isString(text) ? text : '').width;\n  },\n  (text: any, font: Font = {}) => [text, ...values(font)].join('')\n);\n\n/**\n * 获取文本的 ... 文本。\n * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：\n * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串\n * 2. 然后对最后这个字符串二分计算\n * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等\n * @param maxWidth\n * @param font\n */\nexport const getEllipsisText = (text: any, maxWidth: number, font?: Font) => {\n  const STEP = 16; // 每次 16，调参工程师\n  const DOT_WIDTH = measureTextWidth('...', font);\n\n  let leftText;\n\n  if (!isString(text)) {\n    leftText = toString(text);\n  } else {\n    leftText = text;\n  }\n\n  let leftWidth = maxWidth;\n\n  const r = []; // 最终的分段字符串\n  let currentText;\n  let currentWidth;\n\n  if (measureTextWidth(text, font) <= maxWidth) {\n    return text;\n  }\n\n  // 首先通过 step 计算，找出最大的未超出长度的\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, STEP);\n\n    // 计算宽度\n    currentWidth = measureTextWidth(currentText, font);\n\n    // 超出剩余宽度，则停止\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      if (currentWidth > leftWidth) {\n        break;\n      }\n    }\n\n    r.push(currentText);\n\n    // 没有超出，则计算剩余宽度\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(STEP);\n\n    // 字符串整体没有超出\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n\n  // 最下的最后一个 STEP，使用 1 递增（用二分效果更高）\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, 1);\n\n    // 计算宽度\n    currentWidth = measureTextWidth(currentText, font);\n\n    // 超出剩余宽度，则停止\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      break;\n    }\n\n    r.push(currentText);\n    // 没有超出，则计算剩余宽度\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(1);\n\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n\n  return `${r.join('')}...`;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}