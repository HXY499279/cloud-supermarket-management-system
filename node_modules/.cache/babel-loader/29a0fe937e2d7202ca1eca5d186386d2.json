{"ast":null,"code":"import { each, isArray } from '@antv/util';\nvar SPACES = '\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029';\nvar PATH_COMMAND = new RegExp(\"([a-z])[\" + SPACES + \",]*((-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?[\" + SPACES + \"]*,?[\" + SPACES + \"]*)+)\", 'ig');\nvar PATH_VALUES = new RegExp(\"(-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?)[\" + SPACES + \"]*,?[\" + SPACES + \"]*\", 'ig'); // Parse given path string into an array of arrays of path segments\n\nvar parsePathString = function (pathString) {\n  if (!pathString) {\n    return null;\n  }\n\n  if (isArray(pathString)) {\n    return pathString;\n  }\n\n  var paramCounts = {\n    a: 7,\n    c: 6,\n    o: 2,\n    h: 1,\n    l: 2,\n    m: 2,\n    r: 4,\n    q: 4,\n    s: 4,\n    t: 2,\n    v: 1,\n    u: 3,\n    z: 0\n  };\n  var data = [];\n  String(pathString).replace(PATH_COMMAND, function (a, b, c) {\n    var params = [];\n    var name = b.toLowerCase();\n    c.replace(PATH_VALUES, function (a, b) {\n      b && params.push(+b);\n    });\n\n    if (name === 'm' && params.length > 2) {\n      data.push([b].concat(params.splice(0, 2)));\n      name = 'l';\n      b = b === 'm' ? 'l' : 'L';\n    }\n\n    if (name === 'o' && params.length === 1) {\n      data.push([b, params[0]]);\n    }\n\n    if (name === 'r') {\n      data.push([b].concat(params));\n    } else {\n      while (params.length >= paramCounts[name]) {\n        data.push([b].concat(params.splice(0, paramCounts[name])));\n\n        if (!paramCounts[name]) {\n          break;\n        }\n      }\n    }\n\n    return pathString;\n  });\n  return data;\n}; // http://schepers.cc/getting-to-the-point\n\n\nvar catmullRomToBezier = function (crp, z) {\n  var d = []; // @ts-ignore\n\n  for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n    var p = [{\n      x: +crp[i - 2],\n      y: +crp[i - 1]\n    }, {\n      x: +crp[i],\n      y: +crp[i + 1]\n    }, {\n      x: +crp[i + 2],\n      y: +crp[i + 3]\n    }, {\n      x: +crp[i + 4],\n      y: +crp[i + 5]\n    }];\n\n    if (z) {\n      if (!i) {\n        p[0] = {\n          x: +crp[iLen - 2],\n          y: +crp[iLen - 1]\n        };\n      } else if (iLen - 4 === i) {\n        p[3] = {\n          x: +crp[0],\n          y: +crp[1]\n        };\n      } else if (iLen - 2 === i) {\n        p[2] = {\n          x: +crp[0],\n          y: +crp[1]\n        };\n        p[3] = {\n          x: +crp[2],\n          y: +crp[3]\n        };\n      }\n    } else {\n      if (iLen - 4 === i) {\n        p[3] = p[2];\n      } else if (!i) {\n        p[0] = {\n          x: +crp[i],\n          y: +crp[i + 1]\n        };\n      }\n    }\n\n    d.push(['C', (-p[0].x + 6 * p[1].x + p[2].x) / 6, (-p[0].y + 6 * p[1].y + p[2].y) / 6, (p[1].x + 6 * p[2].x - p[3].x) / 6, (p[1].y + 6 * p[2].y - p[3].y) / 6, p[2].x, p[2].y]);\n  }\n\n  return d;\n};\n\nvar ellipsePath = function (x, y, rx, ry, a) {\n  var res = [];\n\n  if (a === null && ry === null) {\n    ry = rx;\n  }\n\n  x = +x;\n  y = +y;\n  rx = +rx;\n  ry = +ry;\n\n  if (a !== null) {\n    var rad = Math.PI / 180;\n    var x1 = x + rx * Math.cos(-ry * rad);\n    var x2 = x + rx * Math.cos(-a * rad);\n    var y1 = y + rx * Math.sin(-ry * rad);\n    var y2 = y + rx * Math.sin(-a * rad);\n    res = [['M', x1, y1], ['A', rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n  } else {\n    res = [['M', x, y], ['m', 0, -ry], ['a', rx, ry, 0, 1, 1, 0, 2 * ry], ['a', rx, ry, 0, 1, 1, 0, -2 * ry], ['z']];\n  }\n\n  return res;\n};\n\nvar pathToAbsolute = function (pathArray) {\n  pathArray = parsePathString(pathArray);\n\n  if (!pathArray || !pathArray.length) {\n    return [['M', 0, 0]];\n  }\n\n  var res = [];\n  var x = 0;\n  var y = 0;\n  var mx = 0;\n  var my = 0;\n  var start = 0;\n  var pa0;\n  var dots;\n\n  if (pathArray[0][0] === 'M') {\n    x = +pathArray[0][1];\n    y = +pathArray[0][2];\n    mx = x;\n    my = y;\n    start++;\n    res[0] = ['M', x, y];\n  }\n\n  var crz = pathArray.length === 3 && pathArray[0][0] === 'M' && pathArray[1][0].toUpperCase() === 'R' && pathArray[2][0].toUpperCase() === 'Z';\n\n  for (var r = void 0, pa = void 0, i = start, ii = pathArray.length; i < ii; i++) {\n    res.push(r = []);\n    pa = pathArray[i];\n    pa0 = pa[0];\n\n    if (pa0 !== pa0.toUpperCase()) {\n      r[0] = pa0.toUpperCase();\n\n      switch (r[0]) {\n        case 'A':\n          r[1] = pa[1];\n          r[2] = pa[2];\n          r[3] = pa[3];\n          r[4] = pa[4];\n          r[5] = pa[5];\n          r[6] = +pa[6] + x;\n          r[7] = +pa[7] + y;\n          break;\n\n        case 'V':\n          r[1] = +pa[1] + y;\n          break;\n\n        case 'H':\n          r[1] = +pa[1] + x;\n          break;\n\n        case 'R':\n          dots = [x, y].concat(pa.slice(1));\n\n          for (var j = 2, jj = dots.length; j < jj; j++) {\n            dots[j] = +dots[j] + x;\n            dots[++j] = +dots[j] + y;\n          }\n\n          res.pop();\n          res = res.concat(catmullRomToBezier(dots, crz));\n          break;\n\n        case 'O':\n          res.pop();\n          dots = ellipsePath(x, y, pa[1], pa[2]);\n          dots.push(dots[0]);\n          res = res.concat(dots);\n          break;\n\n        case 'U':\n          res.pop();\n          res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n          r = ['U'].concat(res[res.length - 1].slice(-2));\n          break;\n\n        case 'M':\n          mx = +pa[1] + x;\n          my = +pa[2] + y;\n          break;\n        // for lint\n\n        default:\n          for (var j = 1, jj = pa.length; j < jj; j++) {\n            r[j] = +pa[j] + (j % 2 ? x : y);\n          }\n\n      }\n    } else if (pa0 === 'R') {\n      dots = [x, y].concat(pa.slice(1));\n      res.pop();\n      res = res.concat(catmullRomToBezier(dots, crz));\n      r = ['R'].concat(pa.slice(-2));\n    } else if (pa0 === 'O') {\n      res.pop();\n      dots = ellipsePath(x, y, pa[1], pa[2]);\n      dots.push(dots[0]);\n      res = res.concat(dots);\n    } else if (pa0 === 'U') {\n      res.pop();\n      res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n      r = ['U'].concat(res[res.length - 1].slice(-2));\n    } else {\n      for (var k = 0, kk = pa.length; k < kk; k++) {\n        r[k] = pa[k];\n      }\n    }\n\n    pa0 = pa0.toUpperCase();\n\n    if (pa0 !== 'O') {\n      switch (r[0]) {\n        case 'Z':\n          x = +mx;\n          y = +my;\n          break;\n\n        case 'H':\n          x = r[1];\n          break;\n\n        case 'V':\n          y = r[1];\n          break;\n\n        case 'M':\n          mx = r[r.length - 2];\n          my = r[r.length - 1];\n          break;\n        // for lint\n\n        default:\n          x = r[r.length - 2];\n          y = r[r.length - 1];\n      }\n    }\n  }\n\n  return res;\n};\n\nvar l2c = function (x1, y1, x2, y2) {\n  return [x1, y1, x2, y2, x2, y2];\n};\n\nvar q2c = function (x1, y1, ax, ay, x2, y2) {\n  var _13 = 1 / 3;\n\n  var _23 = 2 / 3;\n\n  return [_13 * x1 + _23 * ax, _13 * y1 + _23 * ay, _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2];\n};\n\nvar a2c = function (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n  // for more information of where this math came from visit:\n  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n  if (rx === ry) {\n    rx += 1;\n  }\n\n  var _120 = Math.PI * 120 / 180;\n\n  var rad = Math.PI / 180 * (+angle || 0);\n  var res = [];\n  var xy;\n  var f1;\n  var f2;\n  var cx;\n  var cy;\n\n  var rotate = function (x, y, rad) {\n    var X = x * Math.cos(rad) - y * Math.sin(rad);\n    var Y = x * Math.sin(rad) + y * Math.cos(rad);\n    return {\n      x: X,\n      y: Y\n    };\n  };\n\n  if (!recursive) {\n    xy = rotate(x1, y1, -rad);\n    x1 = xy.x;\n    y1 = xy.y;\n    xy = rotate(x2, y2, -rad);\n    x2 = xy.x;\n    y2 = xy.y;\n\n    if (x1 === x2 && y1 === y2) {\n      // 若弧的起始点和终点重叠则错开一点\n      x2 += 1;\n      y2 += 1;\n    } // const cos = Math.cos(Math.PI / 180 * angle);\n    // const sin = Math.sin(Math.PI / 180 * angle);\n\n\n    var x = (x1 - x2) / 2;\n    var y = (y1 - y2) / 2;\n    var h = x * x / (rx * rx) + y * y / (ry * ry);\n\n    if (h > 1) {\n      h = Math.sqrt(h);\n      rx = h * rx;\n      ry = h * ry;\n    }\n\n    var rx2 = rx * rx;\n    var ry2 = ry * ry;\n    var k = (large_arc_flag === sweep_flag ? -1 : 1) * Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)));\n    cx = k * rx * y / ry + (x1 + x2) / 2;\n    cy = k * -ry * x / rx + (y1 + y2) / 2; // @ts-ignore\n\n    f1 = Math.asin(((y1 - cy) / ry).toFixed(9)); // @ts-ignore\n\n    f2 = Math.asin(((y2 - cy) / ry).toFixed(9));\n    f1 = x1 < cx ? Math.PI - f1 : f1;\n    f2 = x2 < cx ? Math.PI - f2 : f2;\n    f1 < 0 && (f1 = Math.PI * 2 + f1);\n    f2 < 0 && (f2 = Math.PI * 2 + f2);\n\n    if (sweep_flag && f1 > f2) {\n      f1 = f1 - Math.PI * 2;\n    }\n\n    if (!sweep_flag && f2 > f1) {\n      f2 = f2 - Math.PI * 2;\n    }\n  } else {\n    f1 = recursive[0];\n    f2 = recursive[1];\n    cx = recursive[2];\n    cy = recursive[3];\n  }\n\n  var df = f2 - f1;\n\n  if (Math.abs(df) > _120) {\n    var f2old = f2;\n    var x2old = x2;\n    var y2old = y2;\n    f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n    x2 = cx + rx * Math.cos(f2);\n    y2 = cy + ry * Math.sin(f2);\n    res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n  }\n\n  df = f2 - f1;\n  var c1 = Math.cos(f1);\n  var s1 = Math.sin(f1);\n  var c2 = Math.cos(f2);\n  var s2 = Math.sin(f2);\n  var t = Math.tan(df / 4);\n  var hx = 4 / 3 * rx * t;\n  var hy = 4 / 3 * ry * t;\n  var m1 = [x1, y1];\n  var m2 = [x1 + hx * s1, y1 - hy * c1];\n  var m3 = [x2 + hx * s2, y2 - hy * c2];\n  var m4 = [x2, y2];\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n\n  if (recursive) {\n    return [m2, m3, m4].concat(res);\n  }\n\n  res = [m2, m3, m4].concat(res).join().split(',');\n  var newres = [];\n\n  for (var i = 0, ii = res.length; i < ii; i++) {\n    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n  }\n\n  return newres;\n};\n\nvar pathToCurve = function (path, path2) {\n  var p = pathToAbsolute(path);\n  var p2 = path2 && pathToAbsolute(path2);\n  var attrs = {\n    x: 0,\n    y: 0,\n    bx: 0,\n    by: 0,\n    X: 0,\n    Y: 0,\n    qx: null,\n    qy: null\n  };\n  var attrs2 = {\n    x: 0,\n    y: 0,\n    bx: 0,\n    by: 0,\n    X: 0,\n    Y: 0,\n    qx: null,\n    qy: null\n  };\n  var pcoms1 = []; // path commands of original path p\n\n  var pcoms2 = []; // path commands of original path p2\n\n  var pfirst = ''; // temporary holder for original path command\n\n  var pcom = ''; // holder for previous path command of original path\n\n  var ii;\n\n  var processPath = function (path, d, pcom) {\n    var nx;\n    var ny;\n\n    if (!path) {\n      return ['C', d.x, d.y, d.x, d.y, d.x, d.y];\n    }\n\n    !(path[0] in {\n      T: 1,\n      Q: 1\n    }) && (d.qx = d.qy = null);\n\n    switch (path[0]) {\n      case 'M':\n        d.X = path[1];\n        d.Y = path[2];\n        break;\n\n      case 'A':\n        path = ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n        break;\n\n      case 'S':\n        if (pcom === 'C' || pcom === 'S') {\n          // In \"S\" case we have to take into account, if the previous command is C/S.\n          nx = d.x * 2 - d.bx; // And reflect the previous\n\n          ny = d.y * 2 - d.by; // command's control point relative to the current point.\n        } else {\n          // or some else or nothing\n          nx = d.x;\n          ny = d.y;\n        }\n\n        path = ['C', nx, ny].concat(path.slice(1));\n        break;\n\n      case 'T':\n        if (pcom === 'Q' || pcom === 'T') {\n          // In \"T\" case we have to take into account, if the previous command is Q/T.\n          d.qx = d.x * 2 - d.qx; // And make a reflection similar\n\n          d.qy = d.y * 2 - d.qy; // to case \"S\".\n        } else {\n          // or something else or nothing\n          d.qx = d.x;\n          d.qy = d.y;\n        }\n\n        path = ['C'].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n        break;\n\n      case 'Q':\n        d.qx = path[1];\n        d.qy = path[2];\n        path = ['C'].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n        break;\n\n      case 'L':\n        path = ['C'].concat(l2c(d.x, d.y, path[1], path[2]));\n        break;\n\n      case 'H':\n        path = ['C'].concat(l2c(d.x, d.y, path[1], d.y));\n        break;\n\n      case 'V':\n        path = ['C'].concat(l2c(d.x, d.y, d.x, path[1]));\n        break;\n\n      case 'Z':\n        path = ['C'].concat(l2c(d.x, d.y, d.X, d.Y));\n        break;\n\n      default:\n        break;\n    }\n\n    return path;\n  };\n\n  var fixArc = function (pp, i) {\n    if (pp[i].length > 7) {\n      pp[i].shift();\n      var pi = pp[i];\n\n      while (pi.length) {\n        pcoms1[i] = 'A'; // if created multiple C:s, their original seg is saved\n\n        p2 && (pcoms2[i] = 'A'); // the same as above\n\n        pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));\n      }\n\n      pp.splice(i, 1);\n      ii = Math.max(p.length, p2 && p2.length || 0);\n    }\n  };\n\n  var fixM = function (path1, path2, a1, a2, i) {\n    if (path1 && path2 && path1[i][0] === 'M' && path2[i][0] !== 'M') {\n      path2.splice(i, 0, ['M', a2.x, a2.y]);\n      a1.bx = 0;\n      a1.by = 0;\n      a1.x = path1[i][1];\n      a1.y = path1[i][2];\n      ii = Math.max(p.length, p2 && p2.length || 0);\n    }\n  };\n\n  ii = Math.max(p.length, p2 && p2.length || 0);\n\n  for (var i = 0; i < ii; i++) {\n    p[i] && (pfirst = p[i][0]); // save current path command\n\n    if (pfirst !== 'C') {\n      // C is not saved yet, because it may be result of conversion\n      pcoms1[i] = pfirst; // Save current path command\n\n      i && (pcom = pcoms1[i - 1]); // Get previous path command pcom\n    }\n\n    p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n    if (pcoms1[i] !== 'A' && pfirst === 'C') pcoms1[i] = 'C'; // A is the only command\n    // which may produce multiple C:s\n    // so we have to make sure that C is also C in original path\n\n    fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n    if (p2) {\n      // the same procedures is done to p2\n      p2[i] && (pfirst = p2[i][0]);\n\n      if (pfirst !== 'C') {\n        pcoms2[i] = pfirst;\n        i && (pcom = pcoms2[i - 1]);\n      }\n\n      p2[i] = processPath(p2[i], attrs2, pcom);\n\n      if (pcoms2[i] !== 'A' && pfirst === 'C') {\n        pcoms2[i] = 'C';\n      }\n\n      fixArc(p2, i);\n    }\n\n    fixM(p, p2, attrs, attrs2, i);\n    fixM(p2, p, attrs2, attrs, i);\n    var seg = p[i];\n    var seg2 = p2 && p2[i];\n    var seglen = seg.length;\n    var seg2len = p2 && seg2.length;\n    attrs.x = seg[seglen - 2];\n    attrs.y = seg[seglen - 1];\n    attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;\n    attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;\n    attrs2.bx = p2 && (parseFloat(seg2[seg2len - 4]) || attrs2.x);\n    attrs2.by = p2 && (parseFloat(seg2[seg2len - 3]) || attrs2.y);\n    attrs2.x = p2 && seg2[seg2len - 2];\n    attrs2.y = p2 && seg2[seg2len - 1];\n  }\n\n  return p2 ? [p, p2] : p;\n};\n\nvar p2s = /,?([a-z]),?/gi;\n\nvar parsePathArray = function (path) {\n  return path.join(',').replace(p2s, '$1');\n};\n\nvar base3 = function (t, p1, p2, p3, p4) {\n  var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4;\n  var t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n  return t * t2 - 3 * p1 + 3 * p2;\n};\n\nvar bezlen = function (x1, y1, x2, y2, x3, y3, x4, y4, z) {\n  if (z === null) {\n    z = 1;\n  }\n\n  z = z > 1 ? 1 : z < 0 ? 0 : z;\n  var z2 = z / 2;\n  var n = 12;\n  var Tvalues = [-0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873, -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816];\n  var Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472];\n  var sum = 0;\n\n  for (var i = 0; i < n; i++) {\n    var ct = z2 * Tvalues[i] + z2;\n    var xbase = base3(ct, x1, x2, x3, x4);\n    var ybase = base3(ct, y1, y2, y3, y4);\n    var comb = xbase * xbase + ybase * ybase;\n    sum += Cvalues[i] * Math.sqrt(comb);\n  }\n\n  return z2 * sum;\n};\n\nvar curveDim = function (x0, y0, x1, y1, x2, y2, x3, y3) {\n  var tvalues = [];\n  var bounds = [[], []];\n  var a;\n  var b;\n  var c;\n  var t;\n\n  for (var i = 0; i < 2; ++i) {\n    if (i === 0) {\n      b = 6 * x0 - 12 * x1 + 6 * x2;\n      a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n      c = 3 * x1 - 3 * x0;\n    } else {\n      b = 6 * y0 - 12 * y1 + 6 * y2;\n      a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n      c = 3 * y1 - 3 * y0;\n    }\n\n    if (Math.abs(a) < 1e-12) {\n      if (Math.abs(b) < 1e-12) {\n        continue;\n      }\n\n      t = -c / b;\n\n      if (t > 0 && t < 1) {\n        tvalues.push(t);\n      }\n\n      continue;\n    }\n\n    var b2ac = b * b - 4 * c * a;\n    var sqrtb2ac = Math.sqrt(b2ac);\n\n    if (b2ac < 0) {\n      continue;\n    }\n\n    var t1 = (-b + sqrtb2ac) / (2 * a);\n\n    if (t1 > 0 && t1 < 1) {\n      tvalues.push(t1);\n    }\n\n    var t2 = (-b - sqrtb2ac) / (2 * a);\n\n    if (t2 > 0 && t2 < 1) {\n      tvalues.push(t2);\n    }\n  }\n\n  var j = tvalues.length;\n  var jlen = j;\n  var mt;\n\n  while (j--) {\n    t = tvalues[j];\n    mt = 1 - t;\n    bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n    bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n  }\n\n  bounds[0][jlen] = x0;\n  bounds[1][jlen] = y0;\n  bounds[0][jlen + 1] = x3;\n  bounds[1][jlen + 1] = y3;\n  bounds[0].length = bounds[1].length = jlen + 2;\n  return {\n    min: {\n      x: Math.min.apply(0, bounds[0]),\n      y: Math.min.apply(0, bounds[1])\n    },\n    max: {\n      x: Math.max.apply(0, bounds[0]),\n      y: Math.max.apply(0, bounds[1])\n    }\n  };\n};\n\nvar intersect = function (x1, y1, x2, y2, x3, y3, x4, y4) {\n  if (Math.max(x1, x2) < Math.min(x3, x4) || Math.min(x1, x2) > Math.max(x3, x4) || Math.max(y1, y2) < Math.min(y3, y4) || Math.min(y1, y2) > Math.max(y3, y4)) {\n    return;\n  }\n\n  var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4);\n  var ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4);\n  var denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n  if (!denominator) {\n    return;\n  }\n\n  var px = nx / denominator;\n  var py = ny / denominator;\n  var px2 = +px.toFixed(2);\n  var py2 = +py.toFixed(2);\n\n  if (px2 < +Math.min(x1, x2).toFixed(2) || px2 > +Math.max(x1, x2).toFixed(2) || px2 < +Math.min(x3, x4).toFixed(2) || px2 > +Math.max(x3, x4).toFixed(2) || py2 < +Math.min(y1, y2).toFixed(2) || py2 > +Math.max(y1, y2).toFixed(2) || py2 < +Math.min(y3, y4).toFixed(2) || py2 > +Math.max(y3, y4).toFixed(2)) {\n    return;\n  }\n\n  return {\n    x: px,\n    y: py\n  };\n};\n\nvar isPointInsideBBox = function (bbox, x, y) {\n  return x >= bbox.x && x <= bbox.x + bbox.width && y >= bbox.y && y <= bbox.y + bbox.height;\n};\n\nvar rectPath = function (x, y, w, h, r) {\n  if (r) {\n    return [['M', +x + +r, y], ['l', w - r * 2, 0], ['a', r, r, 0, 0, 1, r, r], ['l', 0, h - r * 2], ['a', r, r, 0, 0, 1, -r, r], ['l', r * 2 - w, 0], ['a', r, r, 0, 0, 1, -r, -r], ['l', 0, r * 2 - h], ['a', r, r, 0, 0, 1, r, -r], ['z']];\n  }\n\n  var res = [['M', x, y], ['l', w, 0], ['l', 0, h], ['l', -w, 0], ['z']]; // @ts-ignore\n\n  res.parsePathArray = parsePathArray;\n  return res;\n};\n\nvar box = function (x, y, width, height) {\n  if (x === null) {\n    x = y = width = height = 0;\n  }\n\n  if (y === null) {\n    y = x.y;\n    width = x.width;\n    height = x.height;\n    x = x.x;\n  }\n\n  return {\n    x: x,\n    y: y,\n    width: width,\n    w: width,\n    height: height,\n    h: height,\n    x2: x + width,\n    y2: y + height,\n    cx: x + width / 2,\n    cy: y + height / 2,\n    r1: Math.min(width, height) / 2,\n    r2: Math.max(width, height) / 2,\n    r0: Math.sqrt(width * width + height * height) / 2,\n    path: rectPath(x, y, width, height),\n    vb: [x, y, width, height].join(' ')\n  };\n};\n\nvar isBBoxIntersect = function (bbox1, bbox2) {\n  bbox1 = box(bbox1);\n  bbox2 = box(bbox2);\n  return isPointInsideBBox(bbox2, bbox1.x, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2) || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x) && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n};\n\nvar bezierBBox = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n  if (!isArray(p1x)) {\n    p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n  }\n\n  var bbox = curveDim.apply(null, p1x);\n  return box(bbox.min.x, bbox.min.y, bbox.max.x - bbox.min.x, bbox.max.y - bbox.min.y);\n};\n\nvar findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n  var t1 = 1 - t;\n  var t13 = Math.pow(t1, 3);\n  var t12 = Math.pow(t1, 2);\n  var t2 = t * t;\n  var t3 = t2 * t;\n  var x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x;\n  var y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;\n  var mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x);\n  var my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y);\n  var nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x);\n  var ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y);\n  var ax = t1 * p1x + t * c1x;\n  var ay = t1 * p1y + t * c1y;\n  var cx = t1 * c2x + t * p2x;\n  var cy = t1 * c2y + t * p2y;\n  var alpha = 90 - Math.atan2(mx - nx, my - ny) * 180 / Math.PI; // (mx > nx || my < ny) && (alpha += 180);\n\n  return {\n    x: x,\n    y: y,\n    m: {\n      x: mx,\n      y: my\n    },\n    n: {\n      x: nx,\n      y: ny\n    },\n    start: {\n      x: ax,\n      y: ay\n    },\n    end: {\n      x: cx,\n      y: cy\n    },\n    alpha: alpha\n  };\n};\n\nvar interHelper = function (bez1, bez2, justCount) {\n  var bbox1 = bezierBBox(bez1);\n  var bbox2 = bezierBBox(bez2);\n\n  if (!isBBoxIntersect(bbox1, bbox2)) {\n    return justCount ? 0 : [];\n  }\n\n  var l1 = bezlen.apply(0, bez1);\n  var l2 = bezlen.apply(0, bez2);\n  var n1 = ~~(l1 / 8);\n  var n2 = ~~(l2 / 8);\n  var dots1 = [];\n  var dots2 = [];\n  var xy = {};\n  var res = justCount ? 0 : [];\n\n  for (var i = 0; i < n1 + 1; i++) {\n    var d = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n    dots1.push({\n      x: d.x,\n      y: d.y,\n      t: i / n1\n    });\n  }\n\n  for (var i = 0; i < n2 + 1; i++) {\n    var d = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n    dots2.push({\n      x: d.x,\n      y: d.y,\n      t: i / n2\n    });\n  }\n\n  for (var i = 0; i < n1; i++) {\n    for (var j = 0; j < n2; j++) {\n      var di = dots1[i];\n      var di1 = dots1[i + 1];\n      var dj = dots2[j];\n      var dj1 = dots2[j + 1];\n      var ci = Math.abs(di1.x - di.x) < 0.001 ? 'y' : 'x';\n      var cj = Math.abs(dj1.x - dj.x) < 0.001 ? 'y' : 'x';\n      var is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n\n      if (is) {\n        if (xy[is.x.toFixed(4)] === is.y.toFixed(4)) {\n          continue;\n        }\n\n        xy[is.x.toFixed(4)] = is.y.toFixed(4);\n        var t1 = di.t + Math.abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t);\n        var t2 = dj.t + Math.abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\n        if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n          if (justCount) {\n            // @ts-ignore\n            res += 1;\n          } else {\n            // @ts-ignore\n            res.push({\n              x: is.x,\n              y: is.y,\n              t1: t1,\n              t2: t2\n            });\n          }\n        }\n      }\n    }\n  }\n\n  return res;\n};\n\nvar interPathHelper = function (path1, path2, justCount) {\n  path1 = pathToCurve(path1);\n  path2 = pathToCurve(path2);\n  var x1;\n  var y1;\n  var x2;\n  var y2;\n  var x1m;\n  var y1m;\n  var x2m;\n  var y2m;\n  var bez1;\n  var bez2;\n  var res = justCount ? 0 : [];\n\n  for (var i = 0, ii = path1.length; i < ii; i++) {\n    var pi = path1[i];\n\n    if (pi[0] === 'M') {\n      x1 = x1m = pi[1];\n      y1 = y1m = pi[2];\n    } else {\n      if (pi[0] === 'C') {\n        bez1 = [x1, y1].concat(pi.slice(1));\n        x1 = bez1[6];\n        y1 = bez1[7];\n      } else {\n        bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n        x1 = x1m;\n        y1 = y1m;\n      }\n\n      for (var j = 0, jj = path2.length; j < jj; j++) {\n        var pj = path2[j];\n\n        if (pj[0] === 'M') {\n          x2 = x2m = pj[1];\n          y2 = y2m = pj[2];\n        } else {\n          if (pj[0] === 'C') {\n            bez2 = [x2, y2].concat(pj.slice(1));\n            x2 = bez2[6];\n            y2 = bez2[7];\n          } else {\n            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n            x2 = x2m;\n            y2 = y2m;\n          }\n\n          var intr = interHelper(bez1, bez2, justCount);\n\n          if (justCount) {\n            // @ts-ignore\n            res += intr;\n          } else {\n            // @ts-ignore\n            for (var k = 0, kk = intr.length; k < kk; k++) {\n              intr[k].segment1 = i;\n              intr[k].segment2 = j;\n              intr[k].bez1 = bez1;\n              intr[k].bez2 = bez2;\n            } // @ts-ignore\n\n\n            res = res.concat(intr);\n          }\n        }\n      }\n    }\n  }\n\n  return res;\n};\n\nvar intersection = function (path1, path2) {\n  return interPathHelper(path1, path2);\n};\n\nfunction decasteljau(points, t) {\n  var left = [];\n  var right = [];\n\n  function recurse(points, t) {\n    if (points.length === 1) {\n      left.push(points[0]);\n      right.push(points[0]);\n    } else {\n      var middlePoints = [];\n\n      for (var i = 0; i < points.length - 1; i++) {\n        if (i === 0) {\n          left.push(points[0]);\n        }\n\n        if (i === points.length - 2) {\n          right.push(points[i + 1]);\n        }\n\n        middlePoints[i] = [(1 - t) * points[i][0] + t * points[i + 1][0], (1 - t) * points[i][1] + t * points[i + 1][1]];\n      }\n\n      recurse(middlePoints, t);\n    }\n  }\n\n  if (points.length) {\n    recurse(points, t);\n  }\n\n  return {\n    left: left,\n    right: right.reverse()\n  };\n}\n\nfunction splitCurve(start, end, count) {\n  var points = [[start[1], start[2]]];\n  count = count || 2;\n  var segments = [];\n\n  if (end[0] === 'A') {\n    points.push(end[6]);\n    points.push(end[7]);\n  } else if (end[0] === 'C') {\n    points.push([end[1], end[2]]);\n    points.push([end[3], end[4]]);\n    points.push([end[5], end[6]]);\n  } else if (end[0] === 'S' || end[0] === 'Q') {\n    points.push([end[1], end[2]]);\n    points.push([end[3], end[4]]);\n  } else {\n    points.push([end[1], end[2]]);\n  }\n\n  var leftSegments = points;\n  var t = 1 / count;\n\n  for (var i = 0; i < count - 1; i++) {\n    var rt = t / (1 - t * i);\n    var split = decasteljau(leftSegments, rt);\n    segments.push(split.left);\n    leftSegments = split.right;\n  }\n\n  segments.push(leftSegments);\n  var result = segments.map(function (segment) {\n    var cmd = [];\n\n    if (segment.length === 4) {\n      cmd.push('C');\n      cmd = cmd.concat(segment[2]);\n    }\n\n    if (segment.length >= 3) {\n      if (segment.length === 3) {\n        cmd.push('Q');\n      }\n\n      cmd = cmd.concat(segment[1]);\n    }\n\n    if (segment.length === 2) {\n      cmd.push('L');\n    }\n\n    cmd = cmd.concat(segment[segment.length - 1]);\n    return cmd;\n  });\n  return result;\n}\n\nvar splitSegment = function (start, end, count) {\n  if (count === 1) {\n    return [[].concat(start)];\n  }\n\n  var segments = [];\n\n  if (end[0] === 'L' || end[0] === 'C' || end[0] === 'Q') {\n    segments = segments.concat(splitCurve(start, end, count));\n  } else {\n    var temp = [].concat(start);\n\n    if (temp[0] === 'M') {\n      temp[0] = 'L';\n    }\n\n    for (var i = 0; i <= count - 1; i++) {\n      segments.push(temp);\n    }\n  }\n\n  return segments;\n};\n\nvar fillPath = function (source, target) {\n  if (source.length === 1) {\n    return source;\n  }\n\n  var sourceLen = source.length - 1;\n  var targetLen = target.length - 1;\n  var ratio = sourceLen / targetLen;\n  var segmentsToFill = [];\n\n  if (source.length === 1 && source[0][0] === 'M') {\n    for (var i = 0; i < targetLen - sourceLen; i++) {\n      source.push(source[0]);\n    }\n\n    return source;\n  }\n\n  for (var i = 0; i < targetLen; i++) {\n    var index = Math.floor(ratio * i);\n    segmentsToFill[index] = (segmentsToFill[index] || 0) + 1;\n  }\n\n  var filled = segmentsToFill.reduce(function (filled, count, i) {\n    if (i === sourceLen) {\n      return filled.concat(source[sourceLen]);\n    }\n\n    return filled.concat(splitSegment(source[i], source[i + 1], count));\n  }, []);\n  filled.unshift(source[0]);\n\n  if (target[targetLen] === 'Z' || target[targetLen] === 'z') {\n    filled.push('Z');\n  }\n\n  return filled;\n};\n\nvar isEqual = function (obj1, obj2) {\n  if (obj1.length !== obj2.length) {\n    return false;\n  }\n\n  var result = true;\n  each(obj1, function (item, i) {\n    if (item !== obj2[i]) {\n      result = false;\n      return false;\n    }\n  });\n  return result;\n};\n\nfunction getMinDiff(del, add, modify) {\n  var type = null;\n  var min = modify;\n\n  if (add < min) {\n    min = add;\n    type = 'add';\n  }\n\n  if (del < min) {\n    min = del;\n    type = 'del';\n  }\n\n  return {\n    type: type,\n    min: min\n  };\n}\n/*\n * https://en.wikipedia.org/wiki/Levenshtein_distance\n * 计算两条path的编辑距离\n */\n\n\nvar levenshteinDistance = function (source, target) {\n  var sourceLen = source.length;\n  var targetLen = target.length;\n  var sourceSegment;\n  var targetSegment;\n  var temp = 0;\n\n  if (sourceLen === 0 || targetLen === 0) {\n    return null;\n  }\n\n  var dist = [];\n\n  for (var i = 0; i <= sourceLen; i++) {\n    dist[i] = [];\n    dist[i][0] = {\n      min: i\n    };\n  }\n\n  for (var j = 0; j <= targetLen; j++) {\n    dist[0][j] = {\n      min: j\n    };\n  }\n\n  for (var i = 1; i <= sourceLen; i++) {\n    sourceSegment = source[i - 1];\n\n    for (var j = 1; j <= targetLen; j++) {\n      targetSegment = target[j - 1];\n\n      if (isEqual(sourceSegment, targetSegment)) {\n        temp = 0;\n      } else {\n        temp = 1;\n      }\n\n      var del = dist[i - 1][j].min + 1;\n      var add = dist[i][j - 1].min + 1;\n      var modify = dist[i - 1][j - 1].min + temp;\n      dist[i][j] = getMinDiff(del, add, modify);\n    }\n  }\n\n  return dist;\n};\n\nvar fillPathByDiff = function (source, target) {\n  var diffMatrix = levenshteinDistance(source, target);\n  var sourceLen = source.length;\n  var targetLen = target.length;\n  var changes = [];\n  var index = 1;\n  var minPos = 1; // 如果source和target不是完全不相等\n\n  if (diffMatrix[sourceLen][targetLen].min !== sourceLen) {\n    // 获取从source到target所需改动\n    for (var i = 1; i <= sourceLen; i++) {\n      var min = diffMatrix[i][i].min;\n      minPos = i;\n\n      for (var j = index; j <= targetLen; j++) {\n        if (diffMatrix[i][j].min < min) {\n          min = diffMatrix[i][j].min;\n          minPos = j;\n        }\n      }\n\n      index = minPos;\n\n      if (diffMatrix[i][index].type) {\n        changes.push({\n          index: i - 1,\n          type: diffMatrix[i][index].type\n        });\n      }\n    } // 对source进行增删path\n\n\n    for (var i = changes.length - 1; i >= 0; i--) {\n      index = changes[i].index;\n\n      if (changes[i].type === 'add') {\n        source.splice(index, 0, [].concat(source[index]));\n      } else {\n        source.splice(index, 1);\n      }\n    }\n  } // source尾部补齐\n\n\n  sourceLen = source.length;\n  var diff = targetLen - sourceLen;\n\n  if (sourceLen < targetLen) {\n    for (var i = 0; i < diff; i++) {\n      if (source[sourceLen - 1][0] === 'z' || source[sourceLen - 1][0] === 'Z') {\n        source.splice(sourceLen - 2, 0, source[sourceLen - 2]);\n      } else {\n        source.push(source[sourceLen - 1]);\n      }\n\n      sourceLen += 1;\n    }\n  }\n\n  return source;\n}; // 将两个点均分成count个点\n\n\nfunction _splitPoints(points, former, count) {\n  var result = [].concat(points);\n  var index;\n  var t = 1 / (count + 1);\n\n  var formerEnd = _getSegmentPoints(former)[0];\n\n  for (var i = 1; i <= count; i++) {\n    t *= i;\n    index = Math.floor(points.length * t);\n\n    if (index === 0) {\n      result.unshift([formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n    } else {\n      result.splice(index, 0, [formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n    }\n  }\n\n  return result;\n}\n/*\n * 抽取pathSegment中的关键点\n * M,L,A,Q,H,V一个端点\n * Q, S抽取一个端点，一个控制点\n * C抽取一个端点，两个控制点\n */\n\n\nfunction _getSegmentPoints(segment) {\n  var points = [];\n\n  switch (segment[0]) {\n    case 'M':\n      points.push([segment[1], segment[2]]);\n      break;\n\n    case 'L':\n      points.push([segment[1], segment[2]]);\n      break;\n\n    case 'A':\n      points.push([segment[6], segment[7]]);\n      break;\n\n    case 'Q':\n      points.push([segment[3], segment[4]]);\n      points.push([segment[1], segment[2]]);\n      break;\n\n    case 'T':\n      points.push([segment[1], segment[2]]);\n      break;\n\n    case 'C':\n      points.push([segment[5], segment[6]]);\n      points.push([segment[1], segment[2]]);\n      points.push([segment[3], segment[4]]);\n      break;\n\n    case 'S':\n      points.push([segment[3], segment[4]]);\n      points.push([segment[1], segment[2]]);\n      break;\n\n    case 'H':\n      points.push([segment[1], segment[1]]);\n      break;\n\n    case 'V':\n      points.push([segment[1], segment[1]]);\n      break;\n\n    default:\n  }\n\n  return points;\n}\n\nvar formatPath = function (fromPath, toPath) {\n  if (fromPath.length <= 1) {\n    return fromPath;\n  }\n\n  var points;\n\n  for (var i = 0; i < toPath.length; i++) {\n    if (fromPath[i][0] !== toPath[i][0]) {\n      // 获取fromPath的pathSegment的端点，根据toPath的指令对其改造\n      points = _getSegmentPoints(fromPath[i]);\n\n      switch (toPath[i][0]) {\n        case 'M':\n          fromPath[i] = ['M'].concat(points[0]);\n          break;\n\n        case 'L':\n          fromPath[i] = ['L'].concat(points[0]);\n          break;\n\n        case 'A':\n          fromPath[i] = [].concat(toPath[i]);\n          fromPath[i][6] = points[0][0];\n          fromPath[i][7] = points[0][1];\n          break;\n\n        case 'Q':\n          if (points.length < 2) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 1);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n\n          fromPath[i] = ['Q'].concat(points.reduce(function (arr, i) {\n            return arr.concat(i);\n          }, []));\n          break;\n\n        case 'T':\n          fromPath[i] = ['T'].concat(points[0]);\n          break;\n\n        case 'C':\n          if (points.length < 3) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 2);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n\n          fromPath[i] = ['C'].concat(points.reduce(function (arr, i) {\n            return arr.concat(i);\n          }, []));\n          break;\n\n        case 'S':\n          if (points.length < 2) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 1);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n\n          fromPath[i] = ['S'].concat(points.reduce(function (arr, i) {\n            return arr.concat(i);\n          }, []));\n          break;\n\n        default:\n          fromPath[i] = toPath[i];\n      }\n    }\n  }\n\n  return fromPath;\n};\n\nexport { catmullRomToBezier, fillPath, fillPathByDiff, formatPath, intersection, parsePathArray, parsePathString, pathToAbsolute, pathToCurve, rectPath };","map":{"version":3,"sources":["../../src/util/path.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { each, isArray } from '@antv/util';\nvar SPACES = '\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029';\nvar PATH_COMMAND = new RegExp(\"([a-z])[\" + SPACES + \",]*((-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?[\" + SPACES + \"]*,?[\" + SPACES + \"]*)+)\", 'ig');\nvar PATH_VALUES = new RegExp(\"(-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?)[\" + SPACES + \"]*,?[\" + SPACES + \"]*\", 'ig');\n// Parse given path string into an array of arrays of path segments\nvar parsePathString = function (pathString) {\n    if (!pathString) {\n        return null;\n    }\n    if (isArray(pathString)) {\n        return pathString;\n    }\n    var paramCounts = {\n        a: 7,\n        c: 6,\n        o: 2,\n        h: 1,\n        l: 2,\n        m: 2,\n        r: 4,\n        q: 4,\n        s: 4,\n        t: 2,\n        v: 1,\n        u: 3,\n        z: 0,\n    };\n    var data = [];\n    String(pathString).replace(PATH_COMMAND, function (a, b, c) {\n        var params = [];\n        var name = b.toLowerCase();\n        c.replace(PATH_VALUES, function (a, b) {\n            b && params.push(+b);\n        });\n        if (name === 'm' && params.length > 2) {\n            data.push([b].concat(params.splice(0, 2)));\n            name = 'l';\n            b = b === 'm' ? 'l' : 'L';\n        }\n        if (name === 'o' && params.length === 1) {\n            data.push([b, params[0]]);\n        }\n        if (name === 'r') {\n            data.push([b].concat(params));\n        }\n        else {\n            while (params.length >= paramCounts[name]) {\n                data.push([b].concat(params.splice(0, paramCounts[name])));\n                if (!paramCounts[name]) {\n                    break;\n                }\n            }\n        }\n        return pathString;\n    });\n    return data;\n};\n// http://schepers.cc/getting-to-the-point\nvar catmullRomToBezier = function (crp, z) {\n    var d = [];\n    // @ts-ignore\n    for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n        var p = [\n            {\n                x: +crp[i - 2],\n                y: +crp[i - 1],\n            },\n            {\n                x: +crp[i],\n                y: +crp[i + 1],\n            },\n            {\n                x: +crp[i + 2],\n                y: +crp[i + 3],\n            },\n            {\n                x: +crp[i + 4],\n                y: +crp[i + 5],\n            },\n        ];\n        if (z) {\n            if (!i) {\n                p[0] = {\n                    x: +crp[iLen - 2],\n                    y: +crp[iLen - 1],\n                };\n            }\n            else if (iLen - 4 === i) {\n                p[3] = {\n                    x: +crp[0],\n                    y: +crp[1],\n                };\n            }\n            else if (iLen - 2 === i) {\n                p[2] = {\n                    x: +crp[0],\n                    y: +crp[1],\n                };\n                p[3] = {\n                    x: +crp[2],\n                    y: +crp[3],\n                };\n            }\n        }\n        else {\n            if (iLen - 4 === i) {\n                p[3] = p[2];\n            }\n            else if (!i) {\n                p[0] = {\n                    x: +crp[i],\n                    y: +crp[i + 1],\n                };\n            }\n        }\n        d.push([\n            'C',\n            (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n            (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n            (p[1].x + 6 * p[2].x - p[3].x) / 6,\n            (p[1].y + 6 * p[2].y - p[3].y) / 6,\n            p[2].x,\n            p[2].y,\n        ]);\n    }\n    return d;\n};\nvar ellipsePath = function (x, y, rx, ry, a) {\n    var res = [];\n    if (a === null && ry === null) {\n        ry = rx;\n    }\n    x = +x;\n    y = +y;\n    rx = +rx;\n    ry = +ry;\n    if (a !== null) {\n        var rad = Math.PI / 180;\n        var x1 = x + rx * Math.cos(-ry * rad);\n        var x2 = x + rx * Math.cos(-a * rad);\n        var y1 = y + rx * Math.sin(-ry * rad);\n        var y2 = y + rx * Math.sin(-a * rad);\n        res = [\n            ['M', x1, y1],\n            ['A', rx, rx, 0, +(a - ry > 180), 0, x2, y2],\n        ];\n    }\n    else {\n        res = [['M', x, y], ['m', 0, -ry], ['a', rx, ry, 0, 1, 1, 0, 2 * ry], ['a', rx, ry, 0, 1, 1, 0, -2 * ry], ['z']];\n    }\n    return res;\n};\nvar pathToAbsolute = function (pathArray) {\n    pathArray = parsePathString(pathArray);\n    if (!pathArray || !pathArray.length) {\n        return [['M', 0, 0]];\n    }\n    var res = [];\n    var x = 0;\n    var y = 0;\n    var mx = 0;\n    var my = 0;\n    var start = 0;\n    var pa0;\n    var dots;\n    if (pathArray[0][0] === 'M') {\n        x = +pathArray[0][1];\n        y = +pathArray[0][2];\n        mx = x;\n        my = y;\n        start++;\n        res[0] = ['M', x, y];\n    }\n    var crz = pathArray.length === 3 &&\n        pathArray[0][0] === 'M' &&\n        pathArray[1][0].toUpperCase() === 'R' &&\n        pathArray[2][0].toUpperCase() === 'Z';\n    for (var r = void 0, pa = void 0, i = start, ii = pathArray.length; i < ii; i++) {\n        res.push((r = []));\n        pa = pathArray[i];\n        pa0 = pa[0];\n        if (pa0 !== pa0.toUpperCase()) {\n            r[0] = pa0.toUpperCase();\n            switch (r[0]) {\n                case 'A':\n                    r[1] = pa[1];\n                    r[2] = pa[2];\n                    r[3] = pa[3];\n                    r[4] = pa[4];\n                    r[5] = pa[5];\n                    r[6] = +pa[6] + x;\n                    r[7] = +pa[7] + y;\n                    break;\n                case 'V':\n                    r[1] = +pa[1] + y;\n                    break;\n                case 'H':\n                    r[1] = +pa[1] + x;\n                    break;\n                case 'R':\n                    dots = [x, y].concat(pa.slice(1));\n                    for (var j = 2, jj = dots.length; j < jj; j++) {\n                        dots[j] = +dots[j] + x;\n                        dots[++j] = +dots[j] + y;\n                    }\n                    res.pop();\n                    res = res.concat(catmullRomToBezier(dots, crz));\n                    break;\n                case 'O':\n                    res.pop();\n                    dots = ellipsePath(x, y, pa[1], pa[2]);\n                    dots.push(dots[0]);\n                    res = res.concat(dots);\n                    break;\n                case 'U':\n                    res.pop();\n                    res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                    r = ['U'].concat(res[res.length - 1].slice(-2));\n                    break;\n                case 'M':\n                    mx = +pa[1] + x;\n                    my = +pa[2] + y;\n                    break; // for lint\n                default:\n                    for (var j = 1, jj = pa.length; j < jj; j++) {\n                        r[j] = +pa[j] + (j % 2 ? x : y);\n                    }\n            }\n        }\n        else if (pa0 === 'R') {\n            dots = [x, y].concat(pa.slice(1));\n            res.pop();\n            res = res.concat(catmullRomToBezier(dots, crz));\n            r = ['R'].concat(pa.slice(-2));\n        }\n        else if (pa0 === 'O') {\n            res.pop();\n            dots = ellipsePath(x, y, pa[1], pa[2]);\n            dots.push(dots[0]);\n            res = res.concat(dots);\n        }\n        else if (pa0 === 'U') {\n            res.pop();\n            res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n            r = ['U'].concat(res[res.length - 1].slice(-2));\n        }\n        else {\n            for (var k = 0, kk = pa.length; k < kk; k++) {\n                r[k] = pa[k];\n            }\n        }\n        pa0 = pa0.toUpperCase();\n        if (pa0 !== 'O') {\n            switch (r[0]) {\n                case 'Z':\n                    x = +mx;\n                    y = +my;\n                    break;\n                case 'H':\n                    x = r[1];\n                    break;\n                case 'V':\n                    y = r[1];\n                    break;\n                case 'M':\n                    mx = r[r.length - 2];\n                    my = r[r.length - 1];\n                    break; // for lint\n                default:\n                    x = r[r.length - 2];\n                    y = r[r.length - 1];\n            }\n        }\n    }\n    return res;\n};\nvar l2c = function (x1, y1, x2, y2) {\n    return [x1, y1, x2, y2, x2, y2];\n};\nvar q2c = function (x1, y1, ax, ay, x2, y2) {\n    var _13 = 1 / 3;\n    var _23 = 2 / 3;\n    return [_13 * x1 + _23 * ax, _13 * y1 + _23 * ay, _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2];\n};\nvar a2c = function (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n    // for more information of where this math came from visit:\n    // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n    if (rx === ry) {\n        rx += 1;\n    }\n    var _120 = (Math.PI * 120) / 180;\n    var rad = (Math.PI / 180) * (+angle || 0);\n    var res = [];\n    var xy;\n    var f1;\n    var f2;\n    var cx;\n    var cy;\n    var rotate = function (x, y, rad) {\n        var X = x * Math.cos(rad) - y * Math.sin(rad);\n        var Y = x * Math.sin(rad) + y * Math.cos(rad);\n        return {\n            x: X,\n            y: Y,\n        };\n    };\n    if (!recursive) {\n        xy = rotate(x1, y1, -rad);\n        x1 = xy.x;\n        y1 = xy.y;\n        xy = rotate(x2, y2, -rad);\n        x2 = xy.x;\n        y2 = xy.y;\n        if (x1 === x2 && y1 === y2) {\n            // 若弧的起始点和终点重叠则错开一点\n            x2 += 1;\n            y2 += 1;\n        }\n        // const cos = Math.cos(Math.PI / 180 * angle);\n        // const sin = Math.sin(Math.PI / 180 * angle);\n        var x = (x1 - x2) / 2;\n        var y = (y1 - y2) / 2;\n        var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n        if (h > 1) {\n            h = Math.sqrt(h);\n            rx = h * rx;\n            ry = h * ry;\n        }\n        var rx2 = rx * rx;\n        var ry2 = ry * ry;\n        var k = (large_arc_flag === sweep_flag ? -1 : 1) *\n            Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)));\n        cx = (k * rx * y) / ry + (x1 + x2) / 2;\n        cy = (k * -ry * x) / rx + (y1 + y2) / 2;\n        // @ts-ignore\n        f1 = Math.asin(((y1 - cy) / ry).toFixed(9));\n        // @ts-ignore\n        f2 = Math.asin(((y2 - cy) / ry).toFixed(9));\n        f1 = x1 < cx ? Math.PI - f1 : f1;\n        f2 = x2 < cx ? Math.PI - f2 : f2;\n        f1 < 0 && (f1 = Math.PI * 2 + f1);\n        f2 < 0 && (f2 = Math.PI * 2 + f2);\n        if (sweep_flag && f1 > f2) {\n            f1 = f1 - Math.PI * 2;\n        }\n        if (!sweep_flag && f2 > f1) {\n            f2 = f2 - Math.PI * 2;\n        }\n    }\n    else {\n        f1 = recursive[0];\n        f2 = recursive[1];\n        cx = recursive[2];\n        cy = recursive[3];\n    }\n    var df = f2 - f1;\n    if (Math.abs(df) > _120) {\n        var f2old = f2;\n        var x2old = x2;\n        var y2old = y2;\n        f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n        x2 = cx + rx * Math.cos(f2);\n        y2 = cy + ry * Math.sin(f2);\n        res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n    }\n    df = f2 - f1;\n    var c1 = Math.cos(f1);\n    var s1 = Math.sin(f1);\n    var c2 = Math.cos(f2);\n    var s2 = Math.sin(f2);\n    var t = Math.tan(df / 4);\n    var hx = (4 / 3) * rx * t;\n    var hy = (4 / 3) * ry * t;\n    var m1 = [x1, y1];\n    var m2 = [x1 + hx * s1, y1 - hy * c1];\n    var m3 = [x2 + hx * s2, y2 - hy * c2];\n    var m4 = [x2, y2];\n    m2[0] = 2 * m1[0] - m2[0];\n    m2[1] = 2 * m1[1] - m2[1];\n    if (recursive) {\n        return [m2, m3, m4].concat(res);\n    }\n    res = [m2, m3, m4].concat(res).join().split(',');\n    var newres = [];\n    for (var i = 0, ii = res.length; i < ii; i++) {\n        newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n    }\n    return newres;\n};\nvar pathToCurve = function (path, path2) {\n    var p = pathToAbsolute(path);\n    var p2 = path2 && pathToAbsolute(path2);\n    var attrs = {\n        x: 0,\n        y: 0,\n        bx: 0,\n        by: 0,\n        X: 0,\n        Y: 0,\n        qx: null,\n        qy: null,\n    };\n    var attrs2 = {\n        x: 0,\n        y: 0,\n        bx: 0,\n        by: 0,\n        X: 0,\n        Y: 0,\n        qx: null,\n        qy: null,\n    };\n    var pcoms1 = []; // path commands of original path p\n    var pcoms2 = []; // path commands of original path p2\n    var pfirst = ''; // temporary holder for original path command\n    var pcom = ''; // holder for previous path command of original path\n    var ii;\n    var processPath = function (path, d, pcom) {\n        var nx;\n        var ny;\n        if (!path) {\n            return ['C', d.x, d.y, d.x, d.y, d.x, d.y];\n        }\n        !(path[0] in\n            {\n                T: 1,\n                Q: 1,\n            }) && (d.qx = d.qy = null);\n        switch (path[0]) {\n            case 'M':\n                d.X = path[1];\n                d.Y = path[2];\n                break;\n            case 'A':\n                path = ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                break;\n            case 'S':\n                if (pcom === 'C' || pcom === 'S') {\n                    // In \"S\" case we have to take into account, if the previous command is C/S.\n                    nx = d.x * 2 - d.bx; // And reflect the previous\n                    ny = d.y * 2 - d.by; // command's control point relative to the current point.\n                }\n                else {\n                    // or some else or nothing\n                    nx = d.x;\n                    ny = d.y;\n                }\n                path = ['C', nx, ny].concat(path.slice(1));\n                break;\n            case 'T':\n                if (pcom === 'Q' || pcom === 'T') {\n                    // In \"T\" case we have to take into account, if the previous command is Q/T.\n                    d.qx = d.x * 2 - d.qx; // And make a reflection similar\n                    d.qy = d.y * 2 - d.qy; // to case \"S\".\n                }\n                else {\n                    // or something else or nothing\n                    d.qx = d.x;\n                    d.qy = d.y;\n                }\n                path = ['C'].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                break;\n            case 'Q':\n                d.qx = path[1];\n                d.qy = path[2];\n                path = ['C'].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                break;\n            case 'L':\n                path = ['C'].concat(l2c(d.x, d.y, path[1], path[2]));\n                break;\n            case 'H':\n                path = ['C'].concat(l2c(d.x, d.y, path[1], d.y));\n                break;\n            case 'V':\n                path = ['C'].concat(l2c(d.x, d.y, d.x, path[1]));\n                break;\n            case 'Z':\n                path = ['C'].concat(l2c(d.x, d.y, d.X, d.Y));\n                break;\n            default:\n                break;\n        }\n        return path;\n    };\n    var fixArc = function (pp, i) {\n        if (pp[i].length > 7) {\n            pp[i].shift();\n            var pi = pp[i];\n            while (pi.length) {\n                pcoms1[i] = 'A'; // if created multiple C:s, their original seg is saved\n                p2 && (pcoms2[i] = 'A'); // the same as above\n                pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));\n            }\n            pp.splice(i, 1);\n            ii = Math.max(p.length, (p2 && p2.length) || 0);\n        }\n    };\n    var fixM = function (path1, path2, a1, a2, i) {\n        if (path1 && path2 && path1[i][0] === 'M' && path2[i][0] !== 'M') {\n            path2.splice(i, 0, ['M', a2.x, a2.y]);\n            a1.bx = 0;\n            a1.by = 0;\n            a1.x = path1[i][1];\n            a1.y = path1[i][2];\n            ii = Math.max(p.length, (p2 && p2.length) || 0);\n        }\n    };\n    ii = Math.max(p.length, (p2 && p2.length) || 0);\n    for (var i = 0; i < ii; i++) {\n        p[i] && (pfirst = p[i][0]); // save current path command\n        if (pfirst !== 'C') {\n            // C is not saved yet, because it may be result of conversion\n            pcoms1[i] = pfirst; // Save current path command\n            i && (pcom = pcoms1[i - 1]); // Get previous path command pcom\n        }\n        p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n        if (pcoms1[i] !== 'A' && pfirst === 'C')\n            pcoms1[i] = 'C'; // A is the only command\n        // which may produce multiple C:s\n        // so we have to make sure that C is also C in original path\n        fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n        if (p2) {\n            // the same procedures is done to p2\n            p2[i] && (pfirst = p2[i][0]);\n            if (pfirst !== 'C') {\n                pcoms2[i] = pfirst;\n                i && (pcom = pcoms2[i - 1]);\n            }\n            p2[i] = processPath(p2[i], attrs2, pcom);\n            if (pcoms2[i] !== 'A' && pfirst === 'C') {\n                pcoms2[i] = 'C';\n            }\n            fixArc(p2, i);\n        }\n        fixM(p, p2, attrs, attrs2, i);\n        fixM(p2, p, attrs2, attrs, i);\n        var seg = p[i];\n        var seg2 = p2 && p2[i];\n        var seglen = seg.length;\n        var seg2len = p2 && seg2.length;\n        attrs.x = seg[seglen - 2];\n        attrs.y = seg[seglen - 1];\n        attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;\n        attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;\n        attrs2.bx = p2 && (parseFloat(seg2[seg2len - 4]) || attrs2.x);\n        attrs2.by = p2 && (parseFloat(seg2[seg2len - 3]) || attrs2.y);\n        attrs2.x = p2 && seg2[seg2len - 2];\n        attrs2.y = p2 && seg2[seg2len - 1];\n    }\n    return p2 ? [p, p2] : p;\n};\nvar p2s = /,?([a-z]),?/gi;\nvar parsePathArray = function (path) {\n    return path.join(',').replace(p2s, '$1');\n};\nvar base3 = function (t, p1, p2, p3, p4) {\n    var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4;\n    var t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n    return t * t2 - 3 * p1 + 3 * p2;\n};\nvar bezlen = function (x1, y1, x2, y2, x3, y3, x4, y4, z) {\n    if (z === null) {\n        z = 1;\n    }\n    z = z > 1 ? 1 : z < 0 ? 0 : z;\n    var z2 = z / 2;\n    var n = 12;\n    var Tvalues = [\n        -0.1252,\n        0.1252,\n        -0.3678,\n        0.3678,\n        -0.5873,\n        0.5873,\n        -0.7699,\n        0.7699,\n        -0.9041,\n        0.9041,\n        -0.9816,\n        0.9816,\n    ];\n    var Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472];\n    var sum = 0;\n    for (var i = 0; i < n; i++) {\n        var ct = z2 * Tvalues[i] + z2;\n        var xbase = base3(ct, x1, x2, x3, x4);\n        var ybase = base3(ct, y1, y2, y3, y4);\n        var comb = xbase * xbase + ybase * ybase;\n        sum += Cvalues[i] * Math.sqrt(comb);\n    }\n    return z2 * sum;\n};\nvar curveDim = function (x0, y0, x1, y1, x2, y2, x3, y3) {\n    var tvalues = [];\n    var bounds = [[], []];\n    var a;\n    var b;\n    var c;\n    var t;\n    for (var i = 0; i < 2; ++i) {\n        if (i === 0) {\n            b = 6 * x0 - 12 * x1 + 6 * x2;\n            a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n            c = 3 * x1 - 3 * x0;\n        }\n        else {\n            b = 6 * y0 - 12 * y1 + 6 * y2;\n            a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n            c = 3 * y1 - 3 * y0;\n        }\n        if (Math.abs(a) < 1e-12) {\n            if (Math.abs(b) < 1e-12) {\n                continue;\n            }\n            t = -c / b;\n            if (t > 0 && t < 1) {\n                tvalues.push(t);\n            }\n            continue;\n        }\n        var b2ac = b * b - 4 * c * a;\n        var sqrtb2ac = Math.sqrt(b2ac);\n        if (b2ac < 0) {\n            continue;\n        }\n        var t1 = (-b + sqrtb2ac) / (2 * a);\n        if (t1 > 0 && t1 < 1) {\n            tvalues.push(t1);\n        }\n        var t2 = (-b - sqrtb2ac) / (2 * a);\n        if (t2 > 0 && t2 < 1) {\n            tvalues.push(t2);\n        }\n    }\n    var j = tvalues.length;\n    var jlen = j;\n    var mt;\n    while (j--) {\n        t = tvalues[j];\n        mt = 1 - t;\n        bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n        bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n    }\n    bounds[0][jlen] = x0;\n    bounds[1][jlen] = y0;\n    bounds[0][jlen + 1] = x3;\n    bounds[1][jlen + 1] = y3;\n    bounds[0].length = bounds[1].length = jlen + 2;\n    return {\n        min: {\n            x: Math.min.apply(0, bounds[0]),\n            y: Math.min.apply(0, bounds[1]),\n        },\n        max: {\n            x: Math.max.apply(0, bounds[0]),\n            y: Math.max.apply(0, bounds[1]),\n        },\n    };\n};\nvar intersect = function (x1, y1, x2, y2, x3, y3, x4, y4) {\n    if (Math.max(x1, x2) < Math.min(x3, x4) ||\n        Math.min(x1, x2) > Math.max(x3, x4) ||\n        Math.max(y1, y2) < Math.min(y3, y4) ||\n        Math.min(y1, y2) > Math.max(y3, y4)) {\n        return;\n    }\n    var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4);\n    var ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4);\n    var denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    if (!denominator) {\n        return;\n    }\n    var px = nx / denominator;\n    var py = ny / denominator;\n    var px2 = +px.toFixed(2);\n    var py2 = +py.toFixed(2);\n    if (px2 < +Math.min(x1, x2).toFixed(2) ||\n        px2 > +Math.max(x1, x2).toFixed(2) ||\n        px2 < +Math.min(x3, x4).toFixed(2) ||\n        px2 > +Math.max(x3, x4).toFixed(2) ||\n        py2 < +Math.min(y1, y2).toFixed(2) ||\n        py2 > +Math.max(y1, y2).toFixed(2) ||\n        py2 < +Math.min(y3, y4).toFixed(2) ||\n        py2 > +Math.max(y3, y4).toFixed(2)) {\n        return;\n    }\n    return {\n        x: px,\n        y: py,\n    };\n};\nvar isPointInsideBBox = function (bbox, x, y) {\n    return x >= bbox.x && x <= bbox.x + bbox.width && y >= bbox.y && y <= bbox.y + bbox.height;\n};\nvar rectPath = function (x, y, w, h, r) {\n    if (r) {\n        return [\n            ['M', +x + +r, y],\n            ['l', w - r * 2, 0],\n            ['a', r, r, 0, 0, 1, r, r],\n            ['l', 0, h - r * 2],\n            ['a', r, r, 0, 0, 1, -r, r],\n            ['l', r * 2 - w, 0],\n            ['a', r, r, 0, 0, 1, -r, -r],\n            ['l', 0, r * 2 - h],\n            ['a', r, r, 0, 0, 1, r, -r],\n            ['z'],\n        ];\n    }\n    var res = [['M', x, y], ['l', w, 0], ['l', 0, h], ['l', -w, 0], ['z']];\n    // @ts-ignore\n    res.parsePathArray = parsePathArray;\n    return res;\n};\nvar box = function (x, y, width, height) {\n    if (x === null) {\n        x = y = width = height = 0;\n    }\n    if (y === null) {\n        y = x.y;\n        width = x.width;\n        height = x.height;\n        x = x.x;\n    }\n    return {\n        x: x,\n        y: y,\n        width: width,\n        w: width,\n        height: height,\n        h: height,\n        x2: x + width,\n        y2: y + height,\n        cx: x + width / 2,\n        cy: y + height / 2,\n        r1: Math.min(width, height) / 2,\n        r2: Math.max(width, height) / 2,\n        r0: Math.sqrt(width * width + height * height) / 2,\n        path: rectPath(x, y, width, height),\n        vb: [x, y, width, height].join(' '),\n    };\n};\nvar isBBoxIntersect = function (bbox1, bbox2) {\n    bbox1 = box(bbox1);\n    bbox2 = box(bbox2);\n    return (isPointInsideBBox(bbox2, bbox1.x, bbox1.y) ||\n        isPointInsideBBox(bbox2, bbox1.x2, bbox1.y) ||\n        isPointInsideBBox(bbox2, bbox1.x, bbox1.y2) ||\n        isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2) ||\n        isPointInsideBBox(bbox1, bbox2.x, bbox2.y) ||\n        isPointInsideBBox(bbox1, bbox2.x2, bbox2.y) ||\n        isPointInsideBBox(bbox1, bbox2.x, bbox2.y2) ||\n        isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2) ||\n        (((bbox1.x < bbox2.x2 && bbox1.x > bbox2.x) || (bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)) &&\n            ((bbox1.y < bbox2.y2 && bbox1.y > bbox2.y) || (bbox2.y < bbox1.y2 && bbox2.y > bbox1.y))));\n};\nvar bezierBBox = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n    if (!isArray(p1x)) {\n        p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n    }\n    var bbox = curveDim.apply(null, p1x);\n    return box(bbox.min.x, bbox.min.y, bbox.max.x - bbox.min.x, bbox.max.y - bbox.min.y);\n};\nvar findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n    var t1 = 1 - t;\n    var t13 = Math.pow(t1, 3);\n    var t12 = Math.pow(t1, 2);\n    var t2 = t * t;\n    var t3 = t2 * t;\n    var x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x;\n    var y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;\n    var mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x);\n    var my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y);\n    var nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x);\n    var ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y);\n    var ax = t1 * p1x + t * c1x;\n    var ay = t1 * p1y + t * c1y;\n    var cx = t1 * c2x + t * p2x;\n    var cy = t1 * c2y + t * p2y;\n    var alpha = 90 - (Math.atan2(mx - nx, my - ny) * 180) / Math.PI;\n    // (mx > nx || my < ny) && (alpha += 180);\n    return {\n        x: x,\n        y: y,\n        m: {\n            x: mx,\n            y: my,\n        },\n        n: {\n            x: nx,\n            y: ny,\n        },\n        start: {\n            x: ax,\n            y: ay,\n        },\n        end: {\n            x: cx,\n            y: cy,\n        },\n        alpha: alpha,\n    };\n};\nvar interHelper = function (bez1, bez2, justCount) {\n    var bbox1 = bezierBBox(bez1);\n    var bbox2 = bezierBBox(bez2);\n    if (!isBBoxIntersect(bbox1, bbox2)) {\n        return justCount ? 0 : [];\n    }\n    var l1 = bezlen.apply(0, bez1);\n    var l2 = bezlen.apply(0, bez2);\n    var n1 = ~~(l1 / 8);\n    var n2 = ~~(l2 / 8);\n    var dots1 = [];\n    var dots2 = [];\n    var xy = {};\n    var res = justCount ? 0 : [];\n    for (var i = 0; i < n1 + 1; i++) {\n        var d = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n        dots1.push({\n            x: d.x,\n            y: d.y,\n            t: i / n1,\n        });\n    }\n    for (var i = 0; i < n2 + 1; i++) {\n        var d = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n        dots2.push({\n            x: d.x,\n            y: d.y,\n            t: i / n2,\n        });\n    }\n    for (var i = 0; i < n1; i++) {\n        for (var j = 0; j < n2; j++) {\n            var di = dots1[i];\n            var di1 = dots1[i + 1];\n            var dj = dots2[j];\n            var dj1 = dots2[j + 1];\n            var ci = Math.abs(di1.x - di.x) < 0.001 ? 'y' : 'x';\n            var cj = Math.abs(dj1.x - dj.x) < 0.001 ? 'y' : 'x';\n            var is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n            if (is) {\n                if (xy[is.x.toFixed(4)] === is.y.toFixed(4)) {\n                    continue;\n                }\n                xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                var t1 = di.t + Math.abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t);\n                var t2 = dj.t + Math.abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                    if (justCount) {\n                        // @ts-ignore\n                        res += 1;\n                    }\n                    else {\n                        // @ts-ignore\n                        res.push({\n                            x: is.x,\n                            y: is.y,\n                            t1: t1,\n                            t2: t2,\n                        });\n                    }\n                }\n            }\n        }\n    }\n    return res;\n};\nvar interPathHelper = function (path1, path2, justCount) {\n    path1 = pathToCurve(path1);\n    path2 = pathToCurve(path2);\n    var x1;\n    var y1;\n    var x2;\n    var y2;\n    var x1m;\n    var y1m;\n    var x2m;\n    var y2m;\n    var bez1;\n    var bez2;\n    var res = justCount ? 0 : [];\n    for (var i = 0, ii = path1.length; i < ii; i++) {\n        var pi = path1[i];\n        if (pi[0] === 'M') {\n            x1 = x1m = pi[1];\n            y1 = y1m = pi[2];\n        }\n        else {\n            if (pi[0] === 'C') {\n                bez1 = [x1, y1].concat(pi.slice(1));\n                x1 = bez1[6];\n                y1 = bez1[7];\n            }\n            else {\n                bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                x1 = x1m;\n                y1 = y1m;\n            }\n            for (var j = 0, jj = path2.length; j < jj; j++) {\n                var pj = path2[j];\n                if (pj[0] === 'M') {\n                    x2 = x2m = pj[1];\n                    y2 = y2m = pj[2];\n                }\n                else {\n                    if (pj[0] === 'C') {\n                        bez2 = [x2, y2].concat(pj.slice(1));\n                        x2 = bez2[6];\n                        y2 = bez2[7];\n                    }\n                    else {\n                        bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                        x2 = x2m;\n                        y2 = y2m;\n                    }\n                    var intr = interHelper(bez1, bez2, justCount);\n                    if (justCount) {\n                        // @ts-ignore\n                        res += intr;\n                    }\n                    else {\n                        // @ts-ignore\n                        for (var k = 0, kk = intr.length; k < kk; k++) {\n                            intr[k].segment1 = i;\n                            intr[k].segment2 = j;\n                            intr[k].bez1 = bez1;\n                            intr[k].bez2 = bez2;\n                        }\n                        // @ts-ignore\n                        res = res.concat(intr);\n                    }\n                }\n            }\n        }\n    }\n    return res;\n};\nvar intersection = function (path1, path2) {\n    return interPathHelper(path1, path2);\n};\nfunction decasteljau(points, t) {\n    var left = [];\n    var right = [];\n    function recurse(points, t) {\n        if (points.length === 1) {\n            left.push(points[0]);\n            right.push(points[0]);\n        }\n        else {\n            var middlePoints = [];\n            for (var i = 0; i < points.length - 1; i++) {\n                if (i === 0) {\n                    left.push(points[0]);\n                }\n                if (i === points.length - 2) {\n                    right.push(points[i + 1]);\n                }\n                middlePoints[i] = [\n                    (1 - t) * points[i][0] + t * points[i + 1][0],\n                    (1 - t) * points[i][1] + t * points[i + 1][1],\n                ];\n            }\n            recurse(middlePoints, t);\n        }\n    }\n    if (points.length) {\n        recurse(points, t);\n    }\n    return { left: left, right: right.reverse() };\n}\nfunction splitCurve(start, end, count) {\n    var points = [[start[1], start[2]]];\n    count = count || 2;\n    var segments = [];\n    if (end[0] === 'A') {\n        points.push(end[6]);\n        points.push(end[7]);\n    }\n    else if (end[0] === 'C') {\n        points.push([end[1], end[2]]);\n        points.push([end[3], end[4]]);\n        points.push([end[5], end[6]]);\n    }\n    else if (end[0] === 'S' || end[0] === 'Q') {\n        points.push([end[1], end[2]]);\n        points.push([end[3], end[4]]);\n    }\n    else {\n        points.push([end[1], end[2]]);\n    }\n    var leftSegments = points;\n    var t = 1 / count;\n    for (var i = 0; i < count - 1; i++) {\n        var rt = t / (1 - t * i);\n        var split = decasteljau(leftSegments, rt);\n        segments.push(split.left);\n        leftSegments = split.right;\n    }\n    segments.push(leftSegments);\n    var result = segments.map(function (segment) {\n        var cmd = [];\n        if (segment.length === 4) {\n            cmd.push('C');\n            cmd = cmd.concat(segment[2]);\n        }\n        if (segment.length >= 3) {\n            if (segment.length === 3) {\n                cmd.push('Q');\n            }\n            cmd = cmd.concat(segment[1]);\n        }\n        if (segment.length === 2) {\n            cmd.push('L');\n        }\n        cmd = cmd.concat(segment[segment.length - 1]);\n        return cmd;\n    });\n    return result;\n}\nvar splitSegment = function (start, end, count) {\n    if (count === 1) {\n        return [[].concat(start)];\n    }\n    var segments = [];\n    if (end[0] === 'L' || end[0] === 'C' || end[0] === 'Q') {\n        segments = segments.concat(splitCurve(start, end, count));\n    }\n    else {\n        var temp = [].concat(start);\n        if (temp[0] === 'M') {\n            temp[0] = 'L';\n        }\n        for (var i = 0; i <= count - 1; i++) {\n            segments.push(temp);\n        }\n    }\n    return segments;\n};\nvar fillPath = function (source, target) {\n    if (source.length === 1) {\n        return source;\n    }\n    var sourceLen = source.length - 1;\n    var targetLen = target.length - 1;\n    var ratio = sourceLen / targetLen;\n    var segmentsToFill = [];\n    if (source.length === 1 && source[0][0] === 'M') {\n        for (var i = 0; i < targetLen - sourceLen; i++) {\n            source.push(source[0]);\n        }\n        return source;\n    }\n    for (var i = 0; i < targetLen; i++) {\n        var index = Math.floor(ratio * i);\n        segmentsToFill[index] = (segmentsToFill[index] || 0) + 1;\n    }\n    var filled = segmentsToFill.reduce(function (filled, count, i) {\n        if (i === sourceLen) {\n            return filled.concat(source[sourceLen]);\n        }\n        return filled.concat(splitSegment(source[i], source[i + 1], count));\n    }, []);\n    filled.unshift(source[0]);\n    if (target[targetLen] === 'Z' || target[targetLen] === 'z') {\n        filled.push('Z');\n    }\n    return filled;\n};\nvar isEqual = function (obj1, obj2) {\n    if (obj1.length !== obj2.length) {\n        return false;\n    }\n    var result = true;\n    each(obj1, function (item, i) {\n        if (item !== obj2[i]) {\n            result = false;\n            return false;\n        }\n    });\n    return result;\n};\nfunction getMinDiff(del, add, modify) {\n    var type = null;\n    var min = modify;\n    if (add < min) {\n        min = add;\n        type = 'add';\n    }\n    if (del < min) {\n        min = del;\n        type = 'del';\n    }\n    return {\n        type: type,\n        min: min,\n    };\n}\n/*\n * https://en.wikipedia.org/wiki/Levenshtein_distance\n * 计算两条path的编辑距离\n */\nvar levenshteinDistance = function (source, target) {\n    var sourceLen = source.length;\n    var targetLen = target.length;\n    var sourceSegment;\n    var targetSegment;\n    var temp = 0;\n    if (sourceLen === 0 || targetLen === 0) {\n        return null;\n    }\n    var dist = [];\n    for (var i = 0; i <= sourceLen; i++) {\n        dist[i] = [];\n        dist[i][0] = { min: i };\n    }\n    for (var j = 0; j <= targetLen; j++) {\n        dist[0][j] = { min: j };\n    }\n    for (var i = 1; i <= sourceLen; i++) {\n        sourceSegment = source[i - 1];\n        for (var j = 1; j <= targetLen; j++) {\n            targetSegment = target[j - 1];\n            if (isEqual(sourceSegment, targetSegment)) {\n                temp = 0;\n            }\n            else {\n                temp = 1;\n            }\n            var del = dist[i - 1][j].min + 1;\n            var add = dist[i][j - 1].min + 1;\n            var modify = dist[i - 1][j - 1].min + temp;\n            dist[i][j] = getMinDiff(del, add, modify);\n        }\n    }\n    return dist;\n};\nvar fillPathByDiff = function (source, target) {\n    var diffMatrix = levenshteinDistance(source, target);\n    var sourceLen = source.length;\n    var targetLen = target.length;\n    var changes = [];\n    var index = 1;\n    var minPos = 1;\n    // 如果source和target不是完全不相等\n    if (diffMatrix[sourceLen][targetLen].min !== sourceLen) {\n        // 获取从source到target所需改动\n        for (var i = 1; i <= sourceLen; i++) {\n            var min = diffMatrix[i][i].min;\n            minPos = i;\n            for (var j = index; j <= targetLen; j++) {\n                if (diffMatrix[i][j].min < min) {\n                    min = diffMatrix[i][j].min;\n                    minPos = j;\n                }\n            }\n            index = minPos;\n            if (diffMatrix[i][index].type) {\n                changes.push({ index: i - 1, type: diffMatrix[i][index].type });\n            }\n        }\n        // 对source进行增删path\n        for (var i = changes.length - 1; i >= 0; i--) {\n            index = changes[i].index;\n            if (changes[i].type === 'add') {\n                source.splice(index, 0, [].concat(source[index]));\n            }\n            else {\n                source.splice(index, 1);\n            }\n        }\n    }\n    // source尾部补齐\n    sourceLen = source.length;\n    var diff = targetLen - sourceLen;\n    if (sourceLen < targetLen) {\n        for (var i = 0; i < diff; i++) {\n            if (source[sourceLen - 1][0] === 'z' || source[sourceLen - 1][0] === 'Z') {\n                source.splice(sourceLen - 2, 0, source[sourceLen - 2]);\n            }\n            else {\n                source.push(source[sourceLen - 1]);\n            }\n            sourceLen += 1;\n        }\n    }\n    return source;\n};\n// 将两个点均分成count个点\nfunction _splitPoints(points, former, count) {\n    var result = [].concat(points);\n    var index;\n    var t = 1 / (count + 1);\n    var formerEnd = _getSegmentPoints(former)[0];\n    for (var i = 1; i <= count; i++) {\n        t *= i;\n        index = Math.floor(points.length * t);\n        if (index === 0) {\n            result.unshift([formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n        }\n        else {\n            result.splice(index, 0, [\n                formerEnd[0] * t + points[index][0] * (1 - t),\n                formerEnd[1] * t + points[index][1] * (1 - t),\n            ]);\n        }\n    }\n    return result;\n}\n/*\n * 抽取pathSegment中的关键点\n * M,L,A,Q,H,V一个端点\n * Q, S抽取一个端点，一个控制点\n * C抽取一个端点，两个控制点\n */\nfunction _getSegmentPoints(segment) {\n    var points = [];\n    switch (segment[0]) {\n        case 'M':\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'L':\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'A':\n            points.push([segment[6], segment[7]]);\n            break;\n        case 'Q':\n            points.push([segment[3], segment[4]]);\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'T':\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'C':\n            points.push([segment[5], segment[6]]);\n            points.push([segment[1], segment[2]]);\n            points.push([segment[3], segment[4]]);\n            break;\n        case 'S':\n            points.push([segment[3], segment[4]]);\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'H':\n            points.push([segment[1], segment[1]]);\n            break;\n        case 'V':\n            points.push([segment[1], segment[1]]);\n            break;\n        default:\n    }\n    return points;\n}\nvar formatPath = function (fromPath, toPath) {\n    if (fromPath.length <= 1) {\n        return fromPath;\n    }\n    var points;\n    for (var i = 0; i < toPath.length; i++) {\n        if (fromPath[i][0] !== toPath[i][0]) {\n            // 获取fromPath的pathSegment的端点，根据toPath的指令对其改造\n            points = _getSegmentPoints(fromPath[i]);\n            switch (toPath[i][0]) {\n                case 'M':\n                    fromPath[i] = ['M'].concat(points[0]);\n                    break;\n                case 'L':\n                    fromPath[i] = ['L'].concat(points[0]);\n                    break;\n                case 'A':\n                    fromPath[i] = [].concat(toPath[i]);\n                    fromPath[i][6] = points[0][0];\n                    fromPath[i][7] = points[0][1];\n                    break;\n                case 'Q':\n                    if (points.length < 2) {\n                        if (i > 0) {\n                            points = _splitPoints(points, fromPath[i - 1], 1);\n                        }\n                        else {\n                            fromPath[i] = toPath[i];\n                            break;\n                        }\n                    }\n                    fromPath[i] = ['Q'].concat(points.reduce(function (arr, i) {\n                        return arr.concat(i);\n                    }, []));\n                    break;\n                case 'T':\n                    fromPath[i] = ['T'].concat(points[0]);\n                    break;\n                case 'C':\n                    if (points.length < 3) {\n                        if (i > 0) {\n                            points = _splitPoints(points, fromPath[i - 1], 2);\n                        }\n                        else {\n                            fromPath[i] = toPath[i];\n                            break;\n                        }\n                    }\n                    fromPath[i] = ['C'].concat(points.reduce(function (arr, i) {\n                        return arr.concat(i);\n                    }, []));\n                    break;\n                case 'S':\n                    if (points.length < 2) {\n                        if (i > 0) {\n                            points = _splitPoints(points, fromPath[i - 1], 1);\n                        }\n                        else {\n                            fromPath[i] = toPath[i];\n                            break;\n                        }\n                    }\n                    fromPath[i] = ['S'].concat(points.reduce(function (arr, i) {\n                        return arr.concat(i);\n                    }, []));\n                    break;\n                default:\n                    fromPath[i] = toPath[i];\n            }\n        }\n    }\n    return fromPath;\n};\nexport { catmullRomToBezier, fillPath, fillPathByDiff, formatPath, intersection, parsePathArray, parsePathString, pathToAbsolute, pathToCurve, rectPath, };\n//# sourceMappingURL=path.js.map"]},"metadata":{},"sourceType":"module"}