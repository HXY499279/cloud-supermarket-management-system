{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { isNumber, isString } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { renderTag } from '../util/graphic';\nimport Theme from '../util/theme';\nimport { getValueByPercent } from '../util/util';\n\nvar LineAnnotation =\n/** @class */\nfunction (_super) {\n  __extends(LineAnnotation, _super);\n\n  function LineAnnotation() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @protected\n   * 默认的配置项\n   * @returns {object} 默认的配置项\n   */\n\n\n  LineAnnotation.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n\n    return __assign(__assign({}, cfg), {\n      name: 'annotation',\n      type: 'line',\n      locationType: 'region',\n      start: null,\n      end: null,\n      style: {},\n      text: null,\n      defaultCfg: {\n        style: {\n          fill: Theme.textColor,\n          fontSize: 12,\n          textAlign: 'center',\n          textBaseline: 'bottom',\n          fontFamily: Theme.fontFamily\n        },\n        text: {\n          position: 'center',\n          autoRotate: true,\n          content: null,\n          offsetX: 0,\n          offsetY: 0,\n          style: {\n            stroke: Theme.lineColor,\n            lineWidth: 1\n          }\n        }\n      }\n    });\n  };\n\n  LineAnnotation.prototype.renderInner = function (group) {\n    this.renderLine(group);\n\n    if (this.get('text')) {\n      this.renderLabel(group);\n    }\n  }; // 绘制线\n\n\n  LineAnnotation.prototype.renderLine = function (group) {\n    var start = this.get('start');\n    var end = this.get('end');\n    var style = this.get('style');\n    this.addShape(group, {\n      type: 'line',\n      id: this.getElementId('line'),\n      name: 'annotation-line',\n      attrs: __assign({\n        x1: start.x,\n        y1: start.y,\n        x2: end.x,\n        y2: end.y\n      }, style)\n    });\n  }; // 获取 label 的位置\n\n\n  LineAnnotation.prototype.getLabelPoint = function (start, end, position) {\n    var percent;\n\n    if (position === 'start') {\n      percent = 0;\n    } else if (position === 'center') {\n      percent = 0.5;\n    } else if (isString(position) && position.indexOf('%') !== -1) {\n      percent = parseInt(position, 10) / 100;\n    } else if (isNumber(position)) {\n      percent = position;\n    } else {\n      percent = 1;\n    }\n\n    if (percent > 1 || percent < 0) {\n      percent = 1;\n    }\n\n    return {\n      x: getValueByPercent(start.x, end.x, percent),\n      y: getValueByPercent(start.y, end.y, percent)\n    };\n  }; // 绘制 label\n\n\n  LineAnnotation.prototype.renderLabel = function (group) {\n    var text = this.get('text');\n    var start = this.get('start');\n    var end = this.get('end');\n    var position = text.position,\n        content = text.content,\n        style = text.style,\n        offsetX = text.offsetX,\n        offsetY = text.offsetY,\n        autoRotate = text.autoRotate,\n        maxLength = text.maxLength,\n        autoEllipsis = text.autoEllipsis,\n        ellipsisPosition = text.ellipsisPosition,\n        background = text.background,\n        _a = text.isVertical,\n        isVertical = _a === void 0 ? false : _a;\n    var point = this.getLabelPoint(start, end, position);\n    var x = point.x + offsetX;\n    var y = point.y + offsetY;\n    var cfg = {\n      id: this.getElementId('line-text'),\n      name: 'annotation-line-text',\n      x: x,\n      y: y,\n      content: content,\n      style: style,\n      maxLength: maxLength,\n      autoEllipsis: autoEllipsis,\n      ellipsisPosition: ellipsisPosition,\n      background: background,\n      isVertical: isVertical\n    }; // 如果自动旋转\n\n    if (autoRotate) {\n      var vector = [end.x - start.x, end.y - start.y];\n      cfg.rotate = Math.atan2(vector[1], vector[0]);\n    }\n\n    renderTag(group, cfg);\n  };\n\n  return LineAnnotation;\n}(GroupComponent);\n\nexport default LineAnnotation;","map":{"version":3,"sources":["../../src/annotation/line.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { isNumber, isString } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { renderTag } from '../util/graphic';\nimport Theme from '../util/theme';\nimport { getValueByPercent } from '../util/util';\nvar LineAnnotation = /** @class */ (function (_super) {\n    __extends(LineAnnotation, _super);\n    function LineAnnotation() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @protected\n     * 默认的配置项\n     * @returns {object} 默认的配置项\n     */\n    LineAnnotation.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        return __assign(__assign({}, cfg), { name: 'annotation', type: 'line', locationType: 'region', start: null, end: null, style: {}, text: null, defaultCfg: {\n                style: {\n                    fill: Theme.textColor,\n                    fontSize: 12,\n                    textAlign: 'center',\n                    textBaseline: 'bottom',\n                    fontFamily: Theme.fontFamily,\n                },\n                text: {\n                    position: 'center',\n                    autoRotate: true,\n                    content: null,\n                    offsetX: 0,\n                    offsetY: 0,\n                    style: {\n                        stroke: Theme.lineColor,\n                        lineWidth: 1,\n                    },\n                },\n            } });\n    };\n    LineAnnotation.prototype.renderInner = function (group) {\n        this.renderLine(group);\n        if (this.get('text')) {\n            this.renderLabel(group);\n        }\n    };\n    // 绘制线\n    LineAnnotation.prototype.renderLine = function (group) {\n        var start = this.get('start');\n        var end = this.get('end');\n        var style = this.get('style');\n        this.addShape(group, {\n            type: 'line',\n            id: this.getElementId('line'),\n            name: 'annotation-line',\n            attrs: __assign({ x1: start.x, y1: start.y, x2: end.x, y2: end.y }, style),\n        });\n    };\n    // 获取 label 的位置\n    LineAnnotation.prototype.getLabelPoint = function (start, end, position) {\n        var percent;\n        if (position === 'start') {\n            percent = 0;\n        }\n        else if (position === 'center') {\n            percent = 0.5;\n        }\n        else if (isString(position) && position.indexOf('%') !== -1) {\n            percent = parseInt(position, 10) / 100;\n        }\n        else if (isNumber(position)) {\n            percent = position;\n        }\n        else {\n            percent = 1;\n        }\n        if (percent > 1 || percent < 0) {\n            percent = 1;\n        }\n        return {\n            x: getValueByPercent(start.x, end.x, percent),\n            y: getValueByPercent(start.y, end.y, percent),\n        };\n    };\n    // 绘制 label\n    LineAnnotation.prototype.renderLabel = function (group) {\n        var text = this.get('text');\n        var start = this.get('start');\n        var end = this.get('end');\n        var position = text.position, content = text.content, style = text.style, offsetX = text.offsetX, offsetY = text.offsetY, autoRotate = text.autoRotate, maxLength = text.maxLength, autoEllipsis = text.autoEllipsis, ellipsisPosition = text.ellipsisPosition, background = text.background, _a = text.isVertical, isVertical = _a === void 0 ? false : _a;\n        var point = this.getLabelPoint(start, end, position);\n        var x = point.x + offsetX;\n        var y = point.y + offsetY;\n        var cfg = {\n            id: this.getElementId('line-text'),\n            name: 'annotation-line-text',\n            x: x,\n            y: y,\n            content: content,\n            style: style,\n            maxLength: maxLength,\n            autoEllipsis: autoEllipsis,\n            ellipsisPosition: ellipsisPosition,\n            background: background,\n            isVertical: isVertical,\n        };\n        // 如果自动旋转\n        if (autoRotate) {\n            var vector = [end.x - start.x, end.y - start.y];\n            cfg.rotate = Math.atan2(vector[1], vector[0]);\n        }\n        renderTag(group, cfg);\n    };\n    return LineAnnotation;\n}(GroupComponent));\nexport default LineAnnotation;\n//# sourceMappingURL=line.js.map"]},"metadata":{},"sourceType":"module"}