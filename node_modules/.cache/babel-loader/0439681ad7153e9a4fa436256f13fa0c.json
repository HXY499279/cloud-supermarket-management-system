{"ast":null,"code":"import { get } from '@antv/util';\nimport { isIntersect } from '../../../util/collision-detect';\nimport { getlLabelBackgroundInfo } from '../util';\n/**\n * label 防遮挡布局：在不改变 label 位置的情况下对相互重叠的 label 进行隐藏（非移除）\n * 不同于 'overlap' 类型的布局，该布局不会对 label 的位置进行偏移调整。\n * @param labels 参与布局调整的 label 数组集合\n */\n\nexport function hideOverlap(items, labels, shapes, region) {\n  // todo 添加 labelrank\n  // each label will hide the next one because the next one always has lower rank.\n  // Detect overlapping labels\n  for (var i = 0; i < labels.length; i++) {\n    var label1 = labels[i];\n\n    if (labels[i].get('visible')) {\n      for (var j = i + 1; j < labels.length; j++) {\n        var label2 = labels[j];\n\n        if (label1 && label2 && label1 !== label2 && label2.get('visible')) {\n          var box1 = getlLabelBackgroundInfo(label1, items[i], get(items[i], 'background.padding'));\n          var box2 = getlLabelBackgroundInfo(label2, items[j], get(items[j], 'background.padding'));\n\n          if (isIntersect(box1, box2)) {\n            labels[j].set('visible', false);\n          }\n        }\n      }\n    }\n  }\n}","map":{"version":3,"sources":["../../../../src/geometry/label/layout/hide-overlap.ts"],"names":[],"mappings":"AAAA,SAAS,GAAT,QAAoB,YAApB;AAEA,SAAS,WAAT,QAA4B,gCAA5B;AAEA,SAAS,uBAAT,QAAwC,SAAxC;AAEA;;;;AAIG;;AACH,OAAM,SAAU,WAAV,CAAsB,KAAtB,EAA0C,MAA1C,EAA4D,MAA5D,EAAyF,MAAzF,EAAqG;AACzG;AACA;AAEA;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACtC,QAAM,MAAM,GAAG,MAAM,CAAC,CAAD,CAArB;;AACA,QAAI,MAAM,CAAC,CAAD,CAAN,CAAU,GAAV,CAAc,SAAd,CAAJ,EAA8B;AAC5B,WAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAjB,EAAoB,CAAC,GAAG,MAAM,CAAC,MAA/B,EAAuC,CAAC,EAAxC,EAA4C;AAC1C,YAAM,MAAM,GAAG,MAAM,CAAC,CAAD,CAArB;;AACA,YAAI,MAAM,IAAI,MAAV,IAAoB,MAAM,KAAK,MAA/B,IAAyC,MAAM,CAAC,GAAP,CAAW,SAAX,CAA7C,EAAoE;AAClE,cAAM,IAAI,GAAG,uBAAuB,CAAC,MAAD,EAAS,KAAK,CAAC,CAAD,CAAd,EAAmB,GAAG,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,oBAAX,CAAtB,CAApC;AACA,cAAM,IAAI,GAAG,uBAAuB,CAAC,MAAD,EAAS,KAAK,CAAC,CAAD,CAAd,EAAmB,GAAG,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,oBAAX,CAAtB,CAApC;;AAEA,cAAI,WAAW,CAAC,IAAD,EAAO,IAAP,CAAf,EAA6B;AAC3B,YAAA,MAAM,CAAC,CAAD,CAAN,CAAU,GAAV,CAAc,SAAd,EAAyB,KAAzB;AACD;AACF;AACF;AACF;AACF;AACF","sourcesContent":["import { get } from '@antv/util';\nimport { BBox, IGroup, IShape } from '../../../dependents';\nimport { isIntersect } from '../../../util/collision-detect';\nimport { LabelItem } from '../interface';\nimport { getlLabelBackgroundInfo } from '../util';\n\n/**\n * label 防遮挡布局：在不改变 label 位置的情况下对相互重叠的 label 进行隐藏（非移除）\n * 不同于 'overlap' 类型的布局，该布局不会对 label 的位置进行偏移调整。\n * @param labels 参与布局调整的 label 数组集合\n */\nexport function hideOverlap(items: LabelItem[], labels: IGroup[], shapes: IShape[] | IGroup[], region: BBox) {\n  // todo 添加 labelrank\n  // each label will hide the next one because the next one always has lower rank.\n\n  // Detect overlapping labels\n  for (let i = 0; i < labels.length; i++) {\n    const label1 = labels[i];\n    if (labels[i].get('visible')) {\n      for (let j = i + 1; j < labels.length; j++) {\n        const label2 = labels[j];\n        if (label1 && label2 && label1 !== label2 && label2.get('visible')) {\n          const box1 = getlLabelBackgroundInfo(label1, items[i], get(items[i], 'background.padding'));\n          const box2 = getlLabelBackgroundInfo(label2, items[j], get(items[j], 'background.padding'));\n\n          if (isIntersect(box1, box2)) {\n            labels[j].set('visible', false);\n          }\n        }\n      }\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}