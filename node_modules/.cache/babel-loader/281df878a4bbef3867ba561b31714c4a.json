{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport ColorUtil from '@antv/color-util';\nimport { get, isNumber } from '@antv/util';\nimport { FIELD_ORIGIN } from '../constant';\nimport Geometry from './base';\n/**\n * 用于绘制热力图。\n */\n\nvar Heatmap =\n/** @class */\nfunction (_super) {\n  __extends(Heatmap, _super);\n\n  function Heatmap() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'heatmap';\n    _this.paletteCache = {};\n    return _this;\n  }\n\n  Heatmap.prototype.createElements = function (mappingData, index, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n\n    var range = this.prepareRange(mappingData);\n    var radius = this.prepareSize();\n    var blur = get(this.styleOption, ['style', 'shadowBlur']);\n\n    if (!isNumber(blur)) {\n      blur = radius / 2;\n    }\n\n    this.prepareGreyScaleBlurredCircle(radius, blur);\n    this.drawWithRange(mappingData, range, radius, blur);\n    return null;\n  };\n  /**\n   * clear\n   */\n\n\n  Heatmap.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n\n    this.clearShadowCanvasCtx();\n    this.paletteCache = {};\n  };\n\n  Heatmap.prototype.prepareRange = function (data) {\n    var colorAttr = this.getAttribute('color');\n    var colorField = colorAttr.getFields()[0];\n    var min = Infinity;\n    var max = -Infinity;\n    data.forEach(function (row) {\n      var value = row[FIELD_ORIGIN][colorField];\n\n      if (value > max) {\n        max = value;\n      }\n\n      if (value < min) {\n        min = value;\n      }\n    });\n\n    if (min === max) {\n      min = max - 1;\n    }\n\n    return [min, max];\n  };\n\n  Heatmap.prototype.prepareSize = function () {\n    var radius = this.getDefaultValue('size');\n\n    if (!isNumber(radius)) {\n      radius = this.getDefaultSize();\n    }\n\n    return radius;\n  };\n\n  Heatmap.prototype.prepareGreyScaleBlurredCircle = function (radius, blur) {\n    var grayScaleBlurredCanvas = this.getGrayScaleBlurredCanvas();\n    var r2 = radius + blur;\n    var ctx = grayScaleBlurredCanvas.getContext('2d');\n    grayScaleBlurredCanvas.width = grayScaleBlurredCanvas.height = r2 * 2;\n    ctx.clearRect(0, 0, grayScaleBlurredCanvas.width, grayScaleBlurredCanvas.height);\n    ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;\n    ctx.shadowBlur = blur;\n    ctx.shadowColor = 'black';\n    ctx.beginPath();\n    ctx.arc(-r2, -r2, radius, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n  };\n\n  Heatmap.prototype.drawWithRange = function (data, range, radius, blur) {\n    // canvas size\n    var _a = this.coordinate,\n        start = _a.start,\n        end = _a.end;\n    var width = this.coordinate.getWidth();\n    var height = this.coordinate.getHeight(); // value, range, etc\n\n    var colorAttr = this.getAttribute('color');\n    var valueField = colorAttr.getFields()[0]; // prepare shadow canvas context\n\n    this.clearShadowCanvasCtx();\n    var ctx = this.getShadowCanvasCtx(); // filter data\n\n    if (range) {\n      data = data.filter(function (row) {\n        return row[FIELD_ORIGIN][valueField] <= range[1] && row[FIELD_ORIGIN][valueField] >= range[0];\n      });\n    } // step1. draw points with shadow\n\n\n    var scale = this.scales[valueField];\n\n    for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n      var obj = data_1[_i];\n\n      var _b = this.getDrawCfg(obj),\n          x = _b.x,\n          y = _b.y;\n\n      var alpha = scale.scale(obj[FIELD_ORIGIN][valueField]);\n      this.drawGrayScaleBlurredCircle(x - start.x, y - end.y, radius + blur, alpha, ctx);\n    } // step2. convert pixels\n\n\n    var colored = ctx.getImageData(0, 0, width, height);\n    this.clearShadowCanvasCtx();\n    this.colorize(colored);\n    ctx.putImageData(colored, 0, 0);\n    var imageShape = this.getImageShape();\n    imageShape.attr('x', start.x);\n    imageShape.attr('y', end.y);\n    imageShape.attr('width', width);\n    imageShape.attr('height', height);\n    imageShape.attr('img', ctx.canvas);\n    imageShape.set('origin', this.getShapeInfo(data)); // 存储绘图信息数据\n  };\n\n  Heatmap.prototype.getDefaultSize = function () {\n    var position = this.getAttribute('position');\n    var coordinate = this.coordinate;\n    return Math.min(coordinate.getWidth() / (position.scales[0].ticks.length * 4), coordinate.getHeight() / (position.scales[1].ticks.length * 4));\n  };\n\n  Heatmap.prototype.clearShadowCanvasCtx = function () {\n    var ctx = this.getShadowCanvasCtx();\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  };\n\n  Heatmap.prototype.getShadowCanvasCtx = function () {\n    var canvas = this.shadowCanvas;\n\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      this.shadowCanvas = canvas;\n    }\n\n    canvas.width = this.coordinate.getWidth();\n    canvas.height = this.coordinate.getHeight();\n    return canvas.getContext('2d');\n  };\n\n  Heatmap.prototype.getGrayScaleBlurredCanvas = function () {\n    if (!this.grayScaleBlurredCanvas) {\n      this.grayScaleBlurredCanvas = document.createElement('canvas');\n    }\n\n    return this.grayScaleBlurredCanvas;\n  };\n\n  Heatmap.prototype.drawGrayScaleBlurredCircle = function (x, y, r, alpha, ctx) {\n    var grayScaleBlurredCanvas = this.getGrayScaleBlurredCanvas();\n    ctx.globalAlpha = alpha;\n    ctx.drawImage(grayScaleBlurredCanvas, x - r, y - r);\n  };\n\n  Heatmap.prototype.colorize = function (img) {\n    var colorAttr = this.getAttribute('color');\n    var pixels = img.data;\n    var paletteCache = this.paletteCache;\n\n    for (var i = 3; i < pixels.length; i += 4) {\n      var alpha = pixels[i]; // get gradient color from opacity value\n\n      if (isNumber(alpha)) {\n        var palette = paletteCache[alpha] ? paletteCache[alpha] : ColorUtil.rgb2arr(colorAttr.gradient(alpha / 256));\n        pixels[i - 3] = palette[0];\n        pixels[i - 2] = palette[1];\n        pixels[i - 1] = palette[2];\n        pixels[i] = alpha;\n      }\n    }\n  };\n\n  Heatmap.prototype.getImageShape = function () {\n    var imageShape = this.imageShape;\n\n    if (imageShape) {\n      return imageShape;\n    }\n\n    var container = this.container;\n    imageShape = container.addShape({\n      type: 'image',\n      attrs: {}\n    });\n    this.imageShape = imageShape;\n    return imageShape;\n  };\n\n  Heatmap.prototype.getShapeInfo = function (mappingData) {\n    var shapeCfg = this.getDrawCfg(mappingData[0]);\n    return __assign(__assign({}, shapeCfg), {\n      mappingData: mappingData,\n      data: this.getData(mappingData)\n    });\n  };\n\n  Heatmap.prototype.getData = function (mappingData) {\n    return mappingData.map(function (obj) {\n      return obj[FIELD_ORIGIN];\n    });\n  };\n\n  return Heatmap;\n}(Geometry);\n\nexport default Heatmap;","map":{"version":3,"sources":["../../src/geometry/heatmap.ts"],"names":[],"mappings":"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","sourcesContent":["import ColorUtil from '@antv/color-util';\nimport { get, isNumber } from '@antv/util';\nimport { FIELD_ORIGIN } from '../constant';\nimport { Color, IShape } from '../dependents';\nimport { Data, Datum, MappingDatum, ShapeInfo } from '../interface';\nimport Geometry from './base';\n\n/**\n * 用于绘制热力图。\n */\nexport default class Heatmap extends Geometry {\n  public readonly type: string = 'heatmap';\n\n  private paletteCache: Record<number, number> = {};\n  private grayScaleBlurredCanvas: HTMLCanvasElement;\n  private shadowCanvas: HTMLCanvasElement;\n  private imageShape: IShape;\n\n  protected createElements(mappingData: MappingDatum[], index: number, isUpdate: boolean = false) {\n    const range = this.prepareRange(mappingData);\n    const radius = this.prepareSize();\n\n    let blur = get(this.styleOption, ['style', 'shadowBlur']);\n    if (!isNumber(blur)) {\n      blur = radius / 2;\n    }\n\n    this.prepareGreyScaleBlurredCircle(radius, blur);\n    this.drawWithRange(mappingData, range, radius, blur);\n\n    return null;\n  }\n\n  /**\n   * clear\n   */\n  public clear() {\n    super.clear();\n    this.clearShadowCanvasCtx();\n    this.paletteCache = {};\n  }\n\n  private prepareRange(data: MappingDatum[]) {\n    const colorAttr = this.getAttribute('color');\n    const colorField = colorAttr.getFields()[0];\n\n    let min = Infinity;\n    let max = -Infinity;\n    data.forEach((row) => {\n      const value = row[FIELD_ORIGIN][colorField];\n      if (value > max) {\n        max = value;\n      }\n      if (value < min) {\n        min = value;\n      }\n    });\n\n    if (min === max) {\n      min = max - 1;\n    }\n\n    return [min, max];\n  }\n\n  private prepareSize() {\n    let radius = this.getDefaultValue('size');\n    if (!isNumber(radius)) {\n      radius = this.getDefaultSize();\n    }\n\n    return radius;\n  }\n\n  private prepareGreyScaleBlurredCircle(radius: number, blur: number) {\n    const grayScaleBlurredCanvas = this.getGrayScaleBlurredCanvas();\n    const r2 = radius + blur;\n    const ctx = grayScaleBlurredCanvas.getContext('2d');\n    grayScaleBlurredCanvas.width = grayScaleBlurredCanvas.height = r2 * 2;\n    ctx.clearRect(0, 0, grayScaleBlurredCanvas.width, grayScaleBlurredCanvas.height);\n    ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;\n    ctx.shadowBlur = blur;\n    ctx.shadowColor = 'black';\n\n    ctx.beginPath();\n    ctx.arc(-r2, -r2, radius, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  private drawWithRange(data: MappingDatum[], range: number[], radius: number, blur: number) {\n    // canvas size\n    const { start, end } = this.coordinate;\n    const width = this.coordinate.getWidth();\n    const height = this.coordinate.getHeight();\n\n    // value, range, etc\n    const colorAttr = this.getAttribute('color');\n    const valueField = colorAttr.getFields()[0];\n\n    // prepare shadow canvas context\n    this.clearShadowCanvasCtx();\n    const ctx = this.getShadowCanvasCtx();\n    // filter data\n    if (range) {\n      data = data.filter((row) => {\n        return row[FIELD_ORIGIN][valueField] <= range[1] && row[FIELD_ORIGIN][valueField] >= range[0];\n      });\n    }\n\n    // step1. draw points with shadow\n    const scale = this.scales[valueField];\n    for (const obj of data) {\n      const { x, y } = this.getDrawCfg(obj);\n      const alpha = scale.scale(obj[FIELD_ORIGIN][valueField]);\n      this.drawGrayScaleBlurredCircle((x as number) - start.x, (y as number) - end.y, radius + blur, alpha, ctx);\n    }\n\n    // step2. convert pixels\n    const colored = ctx.getImageData(0, 0, width, height);\n    this.clearShadowCanvasCtx();\n    this.colorize(colored);\n    ctx.putImageData(colored, 0, 0);\n    const imageShape = this.getImageShape();\n    imageShape.attr('x', start.x);\n    imageShape.attr('y', end.y);\n    imageShape.attr('width', width);\n    imageShape.attr('height', height);\n    imageShape.attr('img', ctx.canvas);\n    imageShape.set('origin', this.getShapeInfo(data)); // 存储绘图信息数据\n  }\n\n  private getDefaultSize() {\n    const position = this.getAttribute('position');\n    const coordinate = this.coordinate;\n    return Math.min(\n      coordinate.getWidth() / (position.scales[0].ticks.length * 4),\n      coordinate.getHeight() / (position.scales[1].ticks.length * 4)\n    );\n  }\n\n  private clearShadowCanvasCtx() {\n    const ctx = this.getShadowCanvasCtx();\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  }\n\n  private getShadowCanvasCtx() {\n    let canvas = this.shadowCanvas;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      this.shadowCanvas = canvas;\n    }\n    canvas.width = this.coordinate.getWidth();\n    canvas.height = this.coordinate.getHeight();\n    return canvas.getContext('2d');\n  }\n\n  private getGrayScaleBlurredCanvas() {\n    if (!this.grayScaleBlurredCanvas) {\n      this.grayScaleBlurredCanvas = document.createElement('canvas');\n    }\n\n    return this.grayScaleBlurredCanvas;\n  }\n\n  private drawGrayScaleBlurredCircle(x: number, y: number, r: number, alpha: number, ctx: CanvasRenderingContext2D) {\n    const grayScaleBlurredCanvas = this.getGrayScaleBlurredCanvas();\n    ctx.globalAlpha = alpha;\n    ctx.drawImage(grayScaleBlurredCanvas, x - r, y - r);\n  }\n\n  private colorize(img: ImageData) {\n    const colorAttr = this.getAttribute('color') as Color;\n    const pixels = img.data;\n    const paletteCache = this.paletteCache;\n    for (let i = 3; i < pixels.length; i += 4) {\n      const alpha = pixels[i]; // get gradient color from opacity value\n      if (isNumber(alpha)) {\n        const palette = paletteCache[alpha] ? paletteCache[alpha] : ColorUtil.rgb2arr(colorAttr.gradient(alpha / 256));\n        pixels[i - 3] = palette[0];\n        pixels[i - 2] = palette[1];\n        pixels[i - 1] = palette[2];\n        pixels[i] = alpha;\n      }\n    }\n  }\n\n  private getImageShape() {\n    let imageShape = this.imageShape;\n    if (imageShape) {\n      return imageShape;\n    }\n    const container = this.container;\n    imageShape = container.addShape({\n      type: 'image',\n      attrs: {},\n    });\n    this.imageShape = imageShape;\n    return imageShape;\n  }\n\n  private getShapeInfo(mappingData: MappingDatum[]): ShapeInfo {\n    const shapeCfg = this.getDrawCfg(mappingData[0]);\n\n    return {\n      ...shapeCfg,\n      mappingData,\n      data: this.getData(mappingData),\n    };\n  }\n\n  private getData(mappingData: MappingDatum[]): Data {\n    return mappingData.map((obj: Datum) => {\n      return obj[FIELD_ORIGIN];\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}