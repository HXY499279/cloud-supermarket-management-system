{"ast":null,"code":"import { each } from '@antv/util';\nimport { getPathPoints } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nimport { getLinePath, getSplinePath } from '../util/path';\n\nfunction getPath(points, isInCircle, smooth, registeredShape, constraint) {\n  var path = [];\n\n  if (points.length) {\n    var topLinePoints_1 = []; // area 区域上部分\n\n    var bottomLinePoints_1 = []; // area 区域下部分\n\n    for (var i = 0, len = points.length; i < len; i++) {\n      var point = points[i];\n      topLinePoints_1.push(point[1]);\n      bottomLinePoints_1.push(point[0]);\n    }\n\n    bottomLinePoints_1 = bottomLinePoints_1.reverse();\n    each([topLinePoints_1, bottomLinePoints_1], function (pointsData, index) {\n      var subPath = [];\n      var parsedPoints = registeredShape.parsePoints(pointsData);\n      var p1 = parsedPoints[0];\n\n      if (topLinePoints_1.length === 1 && bottomLinePoints_1.length === 1) {\n        // 都只有一个点，绘制一条竖线\n        subPath = index === 0 ? [['M', p1.x - 0.5, p1.y], ['L', p1.x + 0.5, p1.y]] : [['L', p1.x + 0.5, p1.y], ['L', p1.x - 0.5, p1.y]];\n      } else {\n        if (isInCircle) {\n          parsedPoints.push({\n            x: p1.x,\n            y: p1.y\n          });\n        }\n\n        if (smooth) {\n          subPath = getSplinePath(parsedPoints, false, constraint);\n        } else {\n          subPath = getLinePath(parsedPoints, false);\n        }\n\n        if (index > 0) {\n          subPath[0][0] = 'L';\n        }\n      }\n\n      path = path.concat(subPath);\n    });\n    path.push(['Z']);\n  }\n\n  return path;\n}\n/**\n * @ignore\n * Gets shape attrs\n * @param cfg\n * @param isStroke\n * @param smooth\n * @param registeredShape\n * @param [constraint]\n * @returns\n */\n\n\nexport function getShapeAttrs(cfg, isStroke, smooth, registeredShape, constraint) {\n  var attrs = getStyle(cfg, isStroke, !isStroke, 'lineWidth');\n  var connectNulls = cfg.connectNulls,\n      isInCircle = cfg.isInCircle,\n      points = cfg.points,\n      showSinglePoint = cfg.showSinglePoint;\n  var pathPoints = getPathPoints(points, connectNulls, showSinglePoint); // 根据 connectNulls 配置获取图形关键点\n\n  var path = [];\n\n  for (var i = 0, len = pathPoints.length; i < len; i++) {\n    var eachPoints = pathPoints[i];\n    path = path.concat(getPath(eachPoints, isInCircle, smooth, registeredShape, constraint));\n  }\n\n  attrs.path = path;\n  return attrs;\n}\n/**\n * @ignore\n * Gets constraint\n * @param coordinate\n * @returns constraint\n */\n\nexport function getConstraint(coordinate) {\n  var start = coordinate.start,\n      end = coordinate.end;\n  return [[start.x, end.y], [end.x, start.y]];\n}","map":{"version":3,"sources":["../../../../src/geometry/shape/area/util.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport { Coordinate, PathCommand } from '../../../dependents';\nimport { Point, Position, Shape, ShapeInfo } from '../../../interface';\n\nimport { getPathPoints } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nimport { getLinePath, getSplinePath } from '../util/path';\n\nfunction getPath(\n  points: Point[],\n  isInCircle: boolean,\n  smooth: boolean,\n  registeredShape: Shape,\n  constraint?: Position[]\n): PathCommand[] {\n  let path = [];\n\n  if (points.length) {\n    const topLinePoints = []; // area 区域上部分\n    let bottomLinePoints = []; // area 区域下部分\n    for (let i = 0, len = points.length; i < len; i++) {\n      const point = points[i];\n      topLinePoints.push(point[1]);\n      bottomLinePoints.push(point[0]);\n    }\n    bottomLinePoints = bottomLinePoints.reverse();\n\n    each([topLinePoints, bottomLinePoints], (pointsData, index) => {\n      let subPath = [];\n      const parsedPoints = registeredShape.parsePoints(pointsData);\n      const p1 = parsedPoints[0];\n\n      if (topLinePoints.length === 1 && bottomLinePoints.length === 1) {\n        // 都只有一个点，绘制一条竖线\n        subPath =\n          index === 0\n            ? [\n                ['M', p1.x - 0.5, p1.y],\n                ['L', p1.x + 0.5, p1.y],\n              ]\n            : [\n                ['L', p1.x + 0.5, p1.y],\n                ['L', p1.x - 0.5, p1.y],\n              ];\n      } else {\n        if (isInCircle) {\n          parsedPoints.push({ x: p1.x, y: p1.y });\n        }\n        if (smooth) {\n          subPath = getSplinePath(parsedPoints, false, constraint);\n        } else {\n          subPath = getLinePath(parsedPoints, false);\n        }\n        if (index > 0) {\n          subPath[0][0] = 'L';\n        }\n      }\n\n      path = path.concat(subPath);\n    });\n\n    path.push(['Z']);\n  }\n\n  return path;\n}\n\n/**\n * @ignore\n * Gets shape attrs\n * @param cfg\n * @param isStroke\n * @param smooth\n * @param registeredShape\n * @param [constraint]\n * @returns\n */\nexport function getShapeAttrs(\n  cfg: ShapeInfo,\n  isStroke: boolean,\n  smooth: boolean,\n  registeredShape: Shape,\n  constraint?: Position[]\n) {\n  const attrs = getStyle(cfg, isStroke, !isStroke, 'lineWidth');\n  const { connectNulls, isInCircle, points, showSinglePoint } = cfg;\n  const pathPoints = getPathPoints(points, connectNulls, showSinglePoint); // 根据 connectNulls 配置获取图形关键点\n\n  let path = [];\n  for (let i = 0, len = pathPoints.length; i < len; i++) {\n    const eachPoints = pathPoints[i];\n    path = path.concat(getPath(eachPoints, isInCircle, smooth, registeredShape, constraint));\n  }\n  attrs.path = path;\n\n  return attrs;\n}\n\n/**\n * @ignore\n * Gets constraint\n * @param coordinate\n * @returns constraint\n */\nexport function getConstraint(coordinate: Coordinate): Position[] {\n  const { start, end } = coordinate;\n  return [\n    [start.x, end.y],\n    [end.x, start.y],\n  ];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}