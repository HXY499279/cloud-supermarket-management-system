{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, isNumber } from '@antv/util';\nimport { timeFormat, toTimeStamp } from '../util/time';\nimport Category from './base';\n/**\n * 时间分类度量\n * @class\n */\n\nvar TimeCat =\n/** @class */\nfunction (_super) {\n  __extends(TimeCat, _super);\n\n  function TimeCat() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'timeCat';\n    return _this;\n  }\n  /**\n   * @override\n   */\n\n\n  TimeCat.prototype.translate = function (value) {\n    value = toTimeStamp(value);\n    var index = this.values.indexOf(value);\n\n    if (index === -1) {\n      if (isNumber(value) && value < this.values.length) {\n        index = value;\n      } else {\n        index = NaN;\n      }\n    }\n\n    return index;\n  };\n  /**\n   * 由于时间类型数据需要转换一下，所以复写 getText\n   * @override\n   */\n\n\n  TimeCat.prototype.getText = function (value, tickIndex) {\n    var index = this.translate(value);\n\n    if (index > -1) {\n      var result = this.values[index];\n      var formatter = this.formatter;\n      result = formatter ? formatter(result, tickIndex) : timeFormat(result, this.mask);\n      return result;\n    }\n\n    return value;\n  };\n\n  TimeCat.prototype.initCfg = function () {\n    this.tickMethod = 'time-cat';\n    this.mask = 'YYYY-MM-DD';\n    this.tickCount = 7; // 一般时间数据会显示 7， 14， 30 天的数字\n  };\n\n  TimeCat.prototype.setDomain = function () {\n    var values = this.values; // 针对时间分类类型，会将时间统一转换为时间戳\n\n    each(values, function (v, i) {\n      values[i] = toTimeStamp(v);\n    });\n    values.sort(function (v1, v2) {\n      return v1 - v2;\n    });\n\n    _super.prototype.setDomain.call(this);\n  };\n\n  return TimeCat;\n}(Category);\n\nexport default TimeCat;","map":{"version":3,"sources":["../../src/category/time.ts"],"names":[],"mappings":";AAAA,SAAS,IAAT,EAAe,QAAf,QAA+B,YAA/B;AACA,SAAS,UAAT,EAAqB,WAArB,QAAwC,cAAxC;AACA,OAAO,QAAP,MAAqB,QAArB;AAEA;;;AAGG;;AACH,IAAA,OAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsB,EAAA,SAAA,CAAA,OAAA,EAAA,MAAA,CAAA;;AAAtB,WAAA,OAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AACkB,IAAA,KAAA,CAAA,IAAA,GAAe,SAAf;;AAiDjB;AA/CC;;AAEG;;;AACI,EAAA,OAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,KAAjB,EAAsB;AACpB,IAAA,KAAK,GAAG,WAAW,CAAC,KAAD,CAAnB;AACA,QAAI,KAAK,GAAG,KAAK,MAAL,CAAY,OAAZ,CAAoB,KAApB,CAAZ;;AACA,QAAI,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,UAAI,QAAQ,CAAC,KAAD,CAAR,IAAmB,KAAK,GAAG,KAAK,MAAL,CAAY,MAA3C,EAAmD;AACjD,QAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,QAAA,KAAK,GAAG,GAAR;AACD;AACF;;AACD,WAAO,KAAP;AACD,GAXM;AAaP;;;AAGG;;;AACI,EAAA,OAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,KAAf,EAAuC,SAAvC,EAAyD;AACvD,QAAM,KAAK,GAAG,KAAK,SAAL,CAAe,KAAf,CAAd;;AACA,QAAI,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,UAAI,MAAM,GAAG,KAAK,MAAL,CAAY,KAAZ,CAAb;AACA,UAAM,SAAS,GAAG,KAAK,SAAvB;AACA,MAAA,MAAM,GAAG,SAAS,GAAG,SAAS,CAAC,MAAD,EAAS,SAAT,CAAZ,GAAkC,UAAU,CAAC,MAAD,EAAS,KAAK,IAAd,CAA9D;AACA,aAAO,MAAP;AACD;;AACD,WAAO,KAAP;AACD,GATM;;AAUG,EAAA,OAAA,CAAA,SAAA,CAAA,OAAA,GAAV,YAAA;AACE,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,IAAL,GAAY,YAAZ;AACA,SAAK,SAAL,GAAiB,CAAjB,CAHF,CAGsB;AACrB,GAJS;;AAMA,EAAA,OAAA,CAAA,SAAA,CAAA,SAAA,GAAV,YAAA;AACE,QAAM,MAAM,GAAG,KAAK,MAApB,CADF,CAEE;;AACA,IAAA,IAAI,CAAC,MAAD,EAAS,UAAC,CAAD,EAAI,CAAJ,EAAK;AAChB,MAAA,MAAM,CAAC,CAAD,CAAN,GAAY,WAAW,CAAC,CAAD,CAAvB;AACD,KAFG,CAAJ;AAGA,IAAA,MAAM,CAAC,IAAP,CAAY,UAAC,EAAD,EAAK,EAAL,EAAO;AACjB,aAAO,EAAE,GAAG,EAAZ;AACD,KAFD;;AAGA,IAAA,MAAA,CAAA,SAAA,CAAM,SAAN,CAAe,IAAf,CAAe,IAAf;AACD,GAVS;;AAWZ,SAAA,OAAA;AAAC,CAlDD,CAAsB,QAAtB,CAAA;;AAoDA,eAAe,OAAf","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { each, isNumber } from '@antv/util';\nimport { timeFormat, toTimeStamp } from '../util/time';\nimport Category from './base';\n/**\n * 时间分类度量\n * @class\n */\nvar TimeCat = /** @class */ (function (_super) {\n    __extends(TimeCat, _super);\n    function TimeCat() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'timeCat';\n        return _this;\n    }\n    /**\n     * @override\n     */\n    TimeCat.prototype.translate = function (value) {\n        value = toTimeStamp(value);\n        var index = this.values.indexOf(value);\n        if (index === -1) {\n            if (isNumber(value) && value < this.values.length) {\n                index = value;\n            }\n            else {\n                index = NaN;\n            }\n        }\n        return index;\n    };\n    /**\n     * 由于时间类型数据需要转换一下，所以复写 getText\n     * @override\n     */\n    TimeCat.prototype.getText = function (value, tickIndex) {\n        var index = this.translate(value);\n        if (index > -1) {\n            var result = this.values[index];\n            var formatter = this.formatter;\n            result = formatter ? formatter(result, tickIndex) : timeFormat(result, this.mask);\n            return result;\n        }\n        return value;\n    };\n    TimeCat.prototype.initCfg = function () {\n        this.tickMethod = 'time-cat';\n        this.mask = 'YYYY-MM-DD';\n        this.tickCount = 7; // 一般时间数据会显示 7， 14， 30 天的数字\n    };\n    TimeCat.prototype.setDomain = function () {\n        var values = this.values;\n        // 针对时间分类类型，会将时间统一转换为时间戳\n        each(values, function (v, i) {\n            values[i] = toTimeStamp(v);\n        });\n        values.sort(function (v1, v2) {\n            return v1 - v2;\n        });\n        _super.prototype.setDomain.call(this);\n    };\n    return TimeCat;\n}(Category));\nexport default TimeCat;\n//# sourceMappingURL=time.js.map"]},"metadata":{},"sourceType":"module"}