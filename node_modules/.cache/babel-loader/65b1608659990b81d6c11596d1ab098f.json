{"ast":null,"code":"import { getMaxLabelWidth } from '../../util/label';\nimport { getAngleByMatrix } from '../../util/matrix';\nimport { near } from '../../util/util'; // 文本是否旋转\n\nfunction isRotate(label) {\n  var matrix = label.attr('matrix');\n  return matrix && matrix[0] !== 1; // 仅在这个场景下判定\n}\n\nfunction getRotateAngle(label) {\n  var angle = isRotate(label) ? getAngleByMatrix(label.attr('matrix')) : 0;\n  return angle % 360;\n} // autohide 不再考虑超出限制\n// function isOutLimit(isVertical: boolean, label: IElement, limitLength: number) {\n//   if (!limitLength) {\n//     // 如果没限制 limitLength 则直接返回 false\n//     return false;\n//   }\n//   const canvasBBox = label.getCanvasBBox();\n//   let isOut = false;\n//   if (isVertical) {\n//     isOut = canvasBBox.width > limitLength;\n//   } else {\n//     isOut = canvasBBox.height > limitLength;\n//   }\n//   return isOut;\n// }\n// 是否重叠\n\n\nfunction isOverlap(isVertical, first, second, minGap) {\n  var overlap = false;\n  var angle = getRotateAngle(first);\n  var distance = isVertical ? Math.abs(second.attr('y') - first.attr('y')) : Math.abs(second.attr('x') - first.attr('x'));\n  var prevBBox = (isVertical ? second.attr('y') > first.attr('y') : second.attr('x') > first.attr('x')) ? first.getBBox() : second.getBBox();\n\n  if (isVertical) {\n    var ratio = Math.abs(Math.cos(angle));\n\n    if (near(ratio, 0, Math.PI / 180)) {\n      overlap = prevBBox.width + minGap > distance;\n    } else {\n      overlap = prevBBox.height / ratio + minGap > distance;\n    }\n  } else {\n    var ratio = Math.abs(Math.sin(angle));\n\n    if (near(ratio, 0, Math.PI / 180)) {\n      overlap = prevBBox.width + minGap > distance;\n    } else {\n      overlap = prevBBox.height / ratio + minGap > distance;\n    }\n  }\n\n  return overlap;\n} // 保留第一个或者最后一个\n\n\nfunction reserveOne(isVertical, labelsGroup, reversed, autoHideCfg) {\n  var minGap = (autoHideCfg === null || autoHideCfg === void 0 ? void 0 : autoHideCfg.minGap) || 0;\n  var labels = labelsGroup.getChildren().slice() // 复制数组\n  .filter(function (item) {\n    return item.get('visible');\n  });\n\n  if (!labels.length) {\n    return false;\n  }\n\n  var hasHide = false;\n\n  if (reversed) {\n    // 翻转\n    labels.reverse();\n  }\n\n  var count = labels.length;\n  var first = labels[0];\n  var prev = first;\n\n  for (var i = 1; i < count; i++) {\n    var label = labels[i];\n    var curBBox = label.getBBox(); // 不再考虑超出限制，而仅仅根据是否重叠进行隐藏 isOutLimit(isVertical, label, limitLength) ||\n\n    var isHide = isOverlap(isVertical, prev, label, minGap);\n\n    if (isHide) {\n      label.hide();\n      hasHide = true;\n    } else {\n      prev = label;\n    }\n  }\n\n  return hasHide;\n} // 均匀抽样隐藏标签，注意这里假设 label/tick 是均匀的\n\n\nfunction parityHide(isVertical, labelsGroup, autoHideCfg) {\n  var minGap = (autoHideCfg === null || autoHideCfg === void 0 ? void 0 : autoHideCfg.minGap) || 0;\n  var labels = labelsGroup.getChildren().slice(); // 复制数组\n\n  if (labels.length < 2) {\n    // 如果数量小于 2 则直接返回，等于 2 时可能也会重合\n    return false;\n  }\n\n  var hasHide = false;\n  var first = labels[0];\n  var firstBBox = first.getBBox();\n  var second = labels[1];\n  var count = labels.length;\n  var angle = getRotateAngle(first);\n  var distance = isVertical ? Math.abs(second.attr('y') - first.attr('y')) : Math.abs(second.attr('x') - first.attr('x'));\n  var interval = 0; // 不重叠的坐标文本间距个数\n\n  if (isVertical) {\n    // 垂直的坐标轴计算垂直方向的间距\n    var ratio = Math.abs(Math.cos(angle));\n\n    if (near(ratio, 0, Math.PI / 180)) {\n      var maxWidth = getMaxLabelWidth(labels);\n      interval = (maxWidth + minGap) / distance;\n    } else {\n      interval = (firstBBox.height / ratio + minGap) / distance;\n    }\n  } else {\n    // 水平坐标轴\n    var ratio = Math.abs(Math.sin(angle));\n\n    if (near(ratio, 0, Math.PI / 180)) {\n      var maxWidth = getMaxLabelWidth(labels);\n      interval = (maxWidth + minGap) / distance;\n    } else {\n      interval = (firstBBox.height / ratio + minGap) / distance;\n    }\n  } // interval > 1 时需要对 label 进行隐藏\n\n\n  if (interval > 1) {\n    interval = Math.ceil(interval);\n\n    for (var i = 0; i < count; i++) {\n      if (i % interval !== 0) {\n        // 仅保留被整除的 label\n        labels[i].hide();\n        hasHide = true;\n      }\n    }\n  }\n\n  return hasHide;\n}\n\nexport function getDefault() {\n  return equidistance;\n}\n/**\n * 保证首个 label 可见，即使超过 limitLength 也不隐藏\n * @param {boolean} isVertical  是否垂直\n * @param {IGroup}  labelsGroup label 的分组\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\n\nexport function reserveFirst(isVertical, labelsGroup, limitLength, autoHideCfg) {\n  return reserveOne(isVertical, labelsGroup, false, autoHideCfg);\n}\n/**\n * 保证最后一个 label 可见，即使超过 limitLength 也不隐藏\n * @param {boolean} isVertical  是否垂直\n * @param {IGroup}  labelsGroup label 的分组\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\n\nexport function reserveLast(isVertical, labelsGroup, limitLength, autoHideCfg) {\n  return reserveOne(isVertical, labelsGroup, true, autoHideCfg);\n}\n/**\n * 保证第一个最后一个 label 可见，即使超过 limitLength 也不隐藏\n * @param {boolean} isVertical  是否垂直\n * @param {IGroup}  labelsGroup label 的分组\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\n\nexport function reserveBoth(isVertical, labelsGroup, limitLength, autoHideCfg) {\n  var minGap = (autoHideCfg === null || autoHideCfg === void 0 ? void 0 : autoHideCfg.minGap) || 0;\n  var labels = labelsGroup.getChildren().slice(); // 复制数组\n\n  if (labels.length <= 2) {\n    // 如果数量小于或等于 2 则直接返回\n    return false;\n  }\n\n  var hasHide = false;\n  var count = labels.length;\n  var first = labels[0];\n  var last = labels[count - 1];\n  var preLabel = first; // 按照先保存第一个的逻辑循环一遍，最后一个不参与循环\n\n  for (var i = 1; i < count - 1; i++) {\n    var label = labels[i];\n    var curBBox = label.getBBox(); // 废弃 isOutLimit(isVertical, label, limitLength) ||\n\n    var isHide = isOverlap(isVertical, preLabel, label, minGap);\n\n    if (isHide) {\n      label.hide();\n      hasHide = true;\n    } else {\n      preLabel = label;\n    }\n  }\n\n  var overlap = isOverlap(isVertical, preLabel, last, minGap);\n\n  if (overlap) {\n    // 发生冲突，则隐藏前一个保留后一个\n    preLabel.hide();\n    hasHide = true;\n  }\n\n  return hasHide;\n}\n/**\n * 保证 label 均匀显示 和 不出现重叠，主要解决文本层叠的问题，对于 limitLength 不处理\n * @param {boolean} isVertical  是否垂直\n * @param {IGroup}  labelsGroup label 的分组\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\n\nexport function equidistance(isVertical, labelsGroup, limitLength, autoHideCfg) {\n  var hasHide = parityHide(isVertical, labelsGroup, autoHideCfg); // 处理  timeCat 类型的 tick，在均匀的基础上，再次检查出现重叠的进行隐藏\n\n  if (reserveOne(isVertical, labelsGroup, false)) {\n    hasHide = true;\n  }\n\n  return hasHide;\n}\n/**\n * 同 equidistance， 首先会保证 labels 均匀显示，然后会保留首尾\n * @param isVertical\n * @param labelsGroup\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\n\nexport function equidistanceWithReverseBoth(isVertical, labelsGroup, limitLength, autoHideCfg) {\n  var labels = labelsGroup.getChildren().slice(); // 复制数组\n\n  var hasHide = parityHide(isVertical, labelsGroup, autoHideCfg);\n\n  if (labels.length > 2) {\n    var first = labels[0];\n    var last = labels[labels.length - 1]; // 如果第一个被隐藏了\n\n    if (!first.get('visible')) {\n      first.show();\n\n      if (reserveOne(isVertical, labelsGroup, false, autoHideCfg)) {\n        hasHide = true;\n      }\n    } // 如果最后一个被隐藏了\n\n\n    if (!last.get('visible')) {\n      last.show();\n\n      if (reserveOne(isVertical, labelsGroup, true, autoHideCfg)) {\n        hasHide = true;\n      }\n    }\n  }\n\n  return hasHide;\n}","map":{"version":3,"sources":["../../../src/axis/overlap/auto-hide.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getMaxLabelWidth } from '../../util/label';\nimport { getAngleByMatrix } from '../../util/matrix';\nimport { near } from '../../util/util';\n// 文本是否旋转\nfunction isRotate(label) {\n    var matrix = label.attr('matrix');\n    return matrix && matrix[0] !== 1; // 仅在这个场景下判定\n}\nfunction getRotateAngle(label) {\n    var angle = isRotate(label) ? getAngleByMatrix(label.attr('matrix')) : 0;\n    return angle % 360;\n}\n// autohide 不再考虑超出限制\n// function isOutLimit(isVertical: boolean, label: IElement, limitLength: number) {\n//   if (!limitLength) {\n//     // 如果没限制 limitLength 则直接返回 false\n//     return false;\n//   }\n//   const canvasBBox = label.getCanvasBBox();\n//   let isOut = false;\n//   if (isVertical) {\n//     isOut = canvasBBox.width > limitLength;\n//   } else {\n//     isOut = canvasBBox.height > limitLength;\n//   }\n//   return isOut;\n// }\n// 是否重叠\nfunction isOverlap(isVertical, first, second, minGap) {\n    var overlap = false;\n    var angle = getRotateAngle(first);\n    var distance = isVertical\n        ? Math.abs(second.attr('y') - first.attr('y'))\n        : Math.abs(second.attr('x') - first.attr('x'));\n    var prevBBox = (isVertical\n        ? second.attr('y') > first.attr('y')\n        : second.attr('x') > first.attr('x'))\n        ? first.getBBox()\n        : second.getBBox();\n    if (isVertical) {\n        var ratio = Math.abs(Math.cos(angle));\n        if (near(ratio, 0, Math.PI / 180)) {\n            overlap = prevBBox.width + minGap > distance;\n        }\n        else {\n            overlap = prevBBox.height / ratio + minGap > distance;\n        }\n    }\n    else {\n        var ratio = Math.abs(Math.sin(angle));\n        if (near(ratio, 0, Math.PI / 180)) {\n            overlap = prevBBox.width + minGap > distance;\n        }\n        else {\n            overlap = prevBBox.height / ratio + minGap > distance;\n        }\n    }\n    return overlap;\n}\n// 保留第一个或者最后一个\nfunction reserveOne(isVertical, labelsGroup, reversed, autoHideCfg) {\n    var minGap = (autoHideCfg === null || autoHideCfg === void 0 ? void 0 : autoHideCfg.minGap) || 0;\n    var labels = labelsGroup\n        .getChildren()\n        .slice() // 复制数组\n        .filter(function (item) { return item.get('visible'); });\n    if (!labels.length) {\n        return false;\n    }\n    var hasHide = false;\n    if (reversed) {\n        // 翻转\n        labels.reverse();\n    }\n    var count = labels.length;\n    var first = labels[0];\n    var prev = first;\n    for (var i = 1; i < count; i++) {\n        var label = labels[i];\n        var curBBox = label.getBBox();\n        // 不再考虑超出限制，而仅仅根据是否重叠进行隐藏 isOutLimit(isVertical, label, limitLength) ||\n        var isHide = isOverlap(isVertical, prev, label, minGap);\n        if (isHide) {\n            label.hide();\n            hasHide = true;\n        }\n        else {\n            prev = label;\n        }\n    }\n    return hasHide;\n}\n// 均匀抽样隐藏标签，注意这里假设 label/tick 是均匀的\nfunction parityHide(isVertical, labelsGroup, autoHideCfg) {\n    var minGap = (autoHideCfg === null || autoHideCfg === void 0 ? void 0 : autoHideCfg.minGap) || 0;\n    var labels = labelsGroup.getChildren().slice(); // 复制数组\n    if (labels.length < 2) {\n        // 如果数量小于 2 则直接返回，等于 2 时可能也会重合\n        return false;\n    }\n    var hasHide = false;\n    var first = labels[0];\n    var firstBBox = first.getBBox();\n    var second = labels[1];\n    var count = labels.length;\n    var angle = getRotateAngle(first);\n    var distance = isVertical\n        ? Math.abs(second.attr('y') - first.attr('y'))\n        : Math.abs(second.attr('x') - first.attr('x'));\n    var interval = 0; // 不重叠的坐标文本间距个数\n    if (isVertical) {\n        // 垂直的坐标轴计算垂直方向的间距\n        var ratio = Math.abs(Math.cos(angle));\n        if (near(ratio, 0, Math.PI / 180)) {\n            var maxWidth = getMaxLabelWidth(labels);\n            interval = (maxWidth + minGap) / distance;\n        }\n        else {\n            interval = (firstBBox.height / ratio + minGap) / distance;\n        }\n    }\n    else {\n        // 水平坐标轴\n        var ratio = Math.abs(Math.sin(angle));\n        if (near(ratio, 0, Math.PI / 180)) {\n            var maxWidth = getMaxLabelWidth(labels);\n            interval = (maxWidth + minGap) / distance;\n        }\n        else {\n            interval = (firstBBox.height / ratio + minGap) / distance;\n        }\n    }\n    // interval > 1 时需要对 label 进行隐藏\n    if (interval > 1) {\n        interval = Math.ceil(interval);\n        for (var i = 0; i < count; i++) {\n            if (i % interval !== 0) {\n                // 仅保留被整除的 label\n                labels[i].hide();\n                hasHide = true;\n            }\n        }\n    }\n    return hasHide;\n}\nexport function getDefault() {\n    return equidistance;\n}\n/**\n * 保证首个 label 可见，即使超过 limitLength 也不隐藏\n * @param {boolean} isVertical  是否垂直\n * @param {IGroup}  labelsGroup label 的分组\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\nexport function reserveFirst(isVertical, labelsGroup, limitLength, autoHideCfg) {\n    return reserveOne(isVertical, labelsGroup, false, autoHideCfg);\n}\n/**\n * 保证最后一个 label 可见，即使超过 limitLength 也不隐藏\n * @param {boolean} isVertical  是否垂直\n * @param {IGroup}  labelsGroup label 的分组\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\nexport function reserveLast(isVertical, labelsGroup, limitLength, autoHideCfg) {\n    return reserveOne(isVertical, labelsGroup, true, autoHideCfg);\n}\n/**\n * 保证第一个最后一个 label 可见，即使超过 limitLength 也不隐藏\n * @param {boolean} isVertical  是否垂直\n * @param {IGroup}  labelsGroup label 的分组\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\nexport function reserveBoth(isVertical, labelsGroup, limitLength, autoHideCfg) {\n    var minGap = (autoHideCfg === null || autoHideCfg === void 0 ? void 0 : autoHideCfg.minGap) || 0;\n    var labels = labelsGroup.getChildren().slice(); // 复制数组\n    if (labels.length <= 2) {\n        // 如果数量小于或等于 2 则直接返回\n        return false;\n    }\n    var hasHide = false;\n    var count = labels.length;\n    var first = labels[0];\n    var last = labels[count - 1];\n    var preLabel = first;\n    // 按照先保存第一个的逻辑循环一遍，最后一个不参与循环\n    for (var i = 1; i < count - 1; i++) {\n        var label = labels[i];\n        var curBBox = label.getBBox();\n        // 废弃 isOutLimit(isVertical, label, limitLength) ||\n        var isHide = isOverlap(isVertical, preLabel, label, minGap);\n        if (isHide) {\n            label.hide();\n            hasHide = true;\n        }\n        else {\n            preLabel = label;\n        }\n    }\n    var overlap = isOverlap(isVertical, preLabel, last, minGap);\n    if (overlap) {\n        // 发生冲突，则隐藏前一个保留后一个\n        preLabel.hide();\n        hasHide = true;\n    }\n    return hasHide;\n}\n/**\n * 保证 label 均匀显示 和 不出现重叠，主要解决文本层叠的问题，对于 limitLength 不处理\n * @param {boolean} isVertical  是否垂直\n * @param {IGroup}  labelsGroup label 的分组\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\nexport function equidistance(isVertical, labelsGroup, limitLength, autoHideCfg) {\n    var hasHide = parityHide(isVertical, labelsGroup, autoHideCfg);\n    // 处理  timeCat 类型的 tick，在均匀的基础上，再次检查出现重叠的进行隐藏\n    if (reserveOne(isVertical, labelsGroup, false)) {\n        hasHide = true;\n    }\n    return hasHide;\n}\n/**\n * 同 equidistance， 首先会保证 labels 均匀显示，然后会保留首尾\n * @param isVertical\n * @param labelsGroup\n * @param {number} limitLength 另一个方向的长度限制，autoHide 不关心\n * @param {AxisLabelAutoHideCfg} autoHideCfg autoHide overlap 的可选配置参数\n */\nexport function equidistanceWithReverseBoth(isVertical, labelsGroup, limitLength, autoHideCfg) {\n    var labels = labelsGroup.getChildren().slice(); // 复制数组\n    var hasHide = parityHide(isVertical, labelsGroup, autoHideCfg);\n    if (labels.length > 2) {\n        var first = labels[0];\n        var last = labels[labels.length - 1];\n        // 如果第一个被隐藏了\n        if (!first.get('visible')) {\n            first.show();\n            if (reserveOne(isVertical, labelsGroup, false, autoHideCfg)) {\n                hasHide = true;\n            }\n        }\n        // 如果最后一个被隐藏了\n        if (!last.get('visible')) {\n            last.show();\n            if (reserveOne(isVertical, labelsGroup, true, autoHideCfg)) {\n                hasHide = true;\n            }\n        }\n    }\n    return hasHide;\n}\n//# sourceMappingURL=auto-hide.js.map"]},"metadata":{},"sourceType":"module"}