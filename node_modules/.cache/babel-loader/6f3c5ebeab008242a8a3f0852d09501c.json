{"ast":null,"code":"/**\n * @fileoverview 矩形\n * @author dxq613@gmail.com\n */\nimport { __assign, __extends } from \"tslib\";\nimport ShapeBase from './base';\nimport { parseRadius } from '../util/parse';\nimport { inBox } from '../util/util';\nimport inRect from '../util/in-stroke/rect';\nimport inRectWithRadius from '../util/in-stroke/rect-radius';\nimport isPointInPath from '../util/in-path/point-in-path';\n\nvar Rect =\n/** @class */\nfunction (_super) {\n  __extends(Rect, _super);\n\n  function Rect() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Rect.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n\n    return __assign(__assign({}, attrs), {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      radius: 0\n    });\n  };\n\n  Rect.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n    var attrs = this.attr();\n    var minX = attrs.x;\n    var minY = attrs.y;\n    var width = attrs.width;\n    var height = attrs.height;\n    var radius = attrs.radius; // 无圆角时的策略\n\n    if (!radius) {\n      var halfWidth = lineWidth / 2; // 同时填充和带有边框\n\n      if (isFill && isStroke) {\n        return inBox(minX - halfWidth, minY - halfWidth, width + halfWidth, height + halfWidth, x, y);\n      } // 仅填充\n\n\n      if (isFill) {\n        return inBox(minX, minY, width, height, x, y);\n      }\n\n      if (isStroke) {\n        return inRect(minX, minY, width, height, lineWidth, x, y);\n      }\n    } else {\n      var isHit = false;\n\n      if (isStroke) {\n        isHit = inRectWithRadius(minX, minY, width, height, radius, lineWidth, x, y);\n      } // 仅填充时带有圆角的矩形直接通过图形拾取\n      // 以后可以改成纯数学的近似拾取，将圆弧切割成多边形\n\n\n      if (!isHit && isFill) {\n        isHit = isPointInPath(this, x, y);\n      }\n\n      return isHit;\n    }\n  };\n\n  Rect.prototype.createPath = function (context) {\n    var attrs = this.attr();\n    var x = attrs.x;\n    var y = attrs.y;\n    var width = attrs.width;\n    var height = attrs.height;\n    var radius = attrs.radius;\n    context.beginPath();\n\n    if (radius === 0) {\n      // 改成原生的rect方法\n      context.rect(x, y, width, height);\n    } else {\n      var _a = parseRadius(radius),\n          r1 = _a[0],\n          r2 = _a[1],\n          r3 = _a[2],\n          r4 = _a[3];\n\n      context.moveTo(x + r1, y);\n      context.lineTo(x + width - r2, y);\n      r2 !== 0 && context.arc(x + width - r2, y + r2, r2, -Math.PI / 2, 0);\n      context.lineTo(x + width, y + height - r3);\n      r3 !== 0 && context.arc(x + width - r3, y + height - r3, r3, 0, Math.PI / 2);\n      context.lineTo(x + r4, y + height);\n      r4 !== 0 && context.arc(x + r4, y + height - r4, r4, Math.PI / 2, Math.PI);\n      context.lineTo(x, y + r1);\n      r1 !== 0 && context.arc(x + r1, y + r1, r1, Math.PI, Math.PI * 1.5);\n      context.closePath();\n    }\n  };\n\n  return Rect;\n}(ShapeBase);\n\nexport default Rect;","map":{"version":3,"sources":["../../src/shape/rect.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @fileoverview 矩形\n * @author dxq613@gmail.com\n */\nimport { __assign, __extends } from \"tslib\";\nimport ShapeBase from './base';\nimport { parseRadius } from '../util/parse';\nimport { inBox } from '../util/util';\nimport inRect from '../util/in-stroke/rect';\nimport inRectWithRadius from '../util/in-stroke/rect-radius';\nimport isPointInPath from '../util/in-path/point-in-path';\nvar Rect = /** @class */ (function (_super) {\n    __extends(Rect, _super);\n    function Rect() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rect.prototype.getDefaultAttrs = function () {\n        var attrs = _super.prototype.getDefaultAttrs.call(this);\n        return __assign(__assign({}, attrs), { x: 0, y: 0, width: 0, height: 0, radius: 0 });\n    };\n    Rect.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n        var attrs = this.attr();\n        var minX = attrs.x;\n        var minY = attrs.y;\n        var width = attrs.width;\n        var height = attrs.height;\n        var radius = attrs.radius;\n        // 无圆角时的策略\n        if (!radius) {\n            var halfWidth = lineWidth / 2;\n            // 同时填充和带有边框\n            if (isFill && isStroke) {\n                return inBox(minX - halfWidth, minY - halfWidth, width + halfWidth, height + halfWidth, x, y);\n            }\n            // 仅填充\n            if (isFill) {\n                return inBox(minX, minY, width, height, x, y);\n            }\n            if (isStroke) {\n                return inRect(minX, minY, width, height, lineWidth, x, y);\n            }\n        }\n        else {\n            var isHit = false;\n            if (isStroke) {\n                isHit = inRectWithRadius(minX, minY, width, height, radius, lineWidth, x, y);\n            }\n            // 仅填充时带有圆角的矩形直接通过图形拾取\n            // 以后可以改成纯数学的近似拾取，将圆弧切割成多边形\n            if (!isHit && isFill) {\n                isHit = isPointInPath(this, x, y);\n            }\n            return isHit;\n        }\n    };\n    Rect.prototype.createPath = function (context) {\n        var attrs = this.attr();\n        var x = attrs.x;\n        var y = attrs.y;\n        var width = attrs.width;\n        var height = attrs.height;\n        var radius = attrs.radius;\n        context.beginPath();\n        if (radius === 0) {\n            // 改成原生的rect方法\n            context.rect(x, y, width, height);\n        }\n        else {\n            var _a = parseRadius(radius), r1 = _a[0], r2 = _a[1], r3 = _a[2], r4 = _a[3];\n            context.moveTo(x + r1, y);\n            context.lineTo(x + width - r2, y);\n            r2 !== 0 && context.arc(x + width - r2, y + r2, r2, -Math.PI / 2, 0);\n            context.lineTo(x + width, y + height - r3);\n            r3 !== 0 && context.arc(x + width - r3, y + height - r3, r3, 0, Math.PI / 2);\n            context.lineTo(x + r4, y + height);\n            r4 !== 0 && context.arc(x + r4, y + height - r4, r4, Math.PI / 2, Math.PI);\n            context.lineTo(x, y + r1);\n            r1 !== 0 && context.arc(x + r1, y + r1, r1, Math.PI, Math.PI * 1.5);\n            context.closePath();\n        }\n    };\n    return Rect;\n}(ShapeBase));\nexport default Rect;\n//# sourceMappingURL=rect.js.map"]},"metadata":{},"sourceType":"module"}