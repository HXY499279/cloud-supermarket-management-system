{"ast":null,"code":"var WILDCARD = '*';\n/* event-emitter */\n\nvar EventEmitter =\n/** @class */\nfunction () {\n  function EventEmitter() {\n    this._events = {};\n  }\n  /**\n   * 监听一个事件\n   * @param evt\n   * @param callback\n   * @param once\n   */\n\n\n  EventEmitter.prototype.on = function (evt, callback, once) {\n    if (!this._events[evt]) {\n      this._events[evt] = [];\n    }\n\n    this._events[evt].push({\n      callback: callback,\n      once: !!once\n    });\n\n    return this;\n  };\n  /**\n   * 监听一个事件一次\n   * @param evt\n   * @param callback\n   */\n\n\n  EventEmitter.prototype.once = function (evt, callback) {\n    this.on(evt, callback, true);\n    return this;\n  };\n  /**\n   * 触发一个事件\n   * @param evt\n   * @param args\n   */\n\n\n  EventEmitter.prototype.emit = function (evt) {\n    var _this = this;\n\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var events = this._events[evt] || [];\n    var wildcardEvents = this._events[WILDCARD] || []; // 实际的处理 emit 方法\n\n    var doEmit = function (es) {\n      var length = es.length;\n\n      for (var i = 0; i < length; i++) {\n        if (!es[i]) {\n          continue;\n        }\n\n        var _a = es[i],\n            callback = _a.callback,\n            once = _a.once;\n\n        if (once) {\n          es.splice(i, 1);\n\n          if (es.length === 0) {\n            delete _this._events[evt];\n          }\n\n          length--;\n          i--;\n        }\n\n        callback.apply(_this, args);\n      }\n    };\n\n    doEmit(events);\n    doEmit(wildcardEvents);\n  };\n  /**\n   * 取消监听一个事件，或者一个channel\n   * @param evt\n   * @param callback\n   */\n\n\n  EventEmitter.prototype.off = function (evt, callback) {\n    if (!evt) {\n      // evt 为空全部清除\n      this._events = {};\n    } else {\n      if (!callback) {\n        // evt 存在，callback 为空，清除事件所有方法\n        delete this._events[evt];\n      } else {\n        // evt 存在，callback 存在，清除匹配的\n        var events = this._events[evt] || [];\n        var length_1 = events.length;\n\n        for (var i = 0; i < length_1; i++) {\n          if (events[i].callback === callback) {\n            events.splice(i, 1);\n            length_1--;\n            i--;\n          }\n        }\n\n        if (events.length === 0) {\n          delete this._events[evt];\n        }\n      }\n    }\n\n    return this;\n  };\n  /* 当前所有的事件 */\n\n\n  EventEmitter.prototype.getEvents = function () {\n    return this._events;\n  };\n\n  return EventEmitter;\n}();\n\nexport default EventEmitter;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var WILDCARD = '*';\n/* event-emitter */\nvar EventEmitter = /** @class */ (function () {\n    function EventEmitter() {\n        this._events = {};\n    }\n    /**\n     * 监听一个事件\n     * @param evt\n     * @param callback\n     * @param once\n     */\n    EventEmitter.prototype.on = function (evt, callback, once) {\n        if (!this._events[evt]) {\n            this._events[evt] = [];\n        }\n        this._events[evt].push({\n            callback: callback,\n            once: !!once,\n        });\n        return this;\n    };\n    /**\n     * 监听一个事件一次\n     * @param evt\n     * @param callback\n     */\n    EventEmitter.prototype.once = function (evt, callback) {\n        this.on(evt, callback, true);\n        return this;\n    };\n    /**\n     * 触发一个事件\n     * @param evt\n     * @param args\n     */\n    EventEmitter.prototype.emit = function (evt) {\n        var _this = this;\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var events = this._events[evt] || [];\n        var wildcardEvents = this._events[WILDCARD] || [];\n        // 实际的处理 emit 方法\n        var doEmit = function (es) {\n            var length = es.length;\n            for (var i = 0; i < length; i++) {\n                if (!es[i]) {\n                    continue;\n                }\n                var _a = es[i], callback = _a.callback, once = _a.once;\n                if (once) {\n                    es.splice(i, 1);\n                    if (es.length === 0) {\n                        delete _this._events[evt];\n                    }\n                    length--;\n                    i--;\n                }\n                callback.apply(_this, args);\n            }\n        };\n        doEmit(events);\n        doEmit(wildcardEvents);\n    };\n    /**\n     * 取消监听一个事件，或者一个channel\n     * @param evt\n     * @param callback\n     */\n    EventEmitter.prototype.off = function (evt, callback) {\n        if (!evt) {\n            // evt 为空全部清除\n            this._events = {};\n        }\n        else {\n            if (!callback) {\n                // evt 存在，callback 为空，清除事件所有方法\n                delete this._events[evt];\n            }\n            else {\n                // evt 存在，callback 存在，清除匹配的\n                var events = this._events[evt] || [];\n                var length_1 = events.length;\n                for (var i = 0; i < length_1; i++) {\n                    if (events[i].callback === callback) {\n                        events.splice(i, 1);\n                        length_1--;\n                        i--;\n                    }\n                }\n                if (events.length === 0) {\n                    delete this._events[evt];\n                }\n            }\n        }\n        return this;\n    };\n    /* 当前所有的事件 */\n    EventEmitter.prototype.getEvents = function () {\n        return this._events;\n    };\n    return EventEmitter;\n}());\nexport default EventEmitter;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}