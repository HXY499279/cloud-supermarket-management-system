{"ast":null,"code":"export function getPixelRatio() {\n  return window ? window.devicePixelRatio : 1;\n}\n/**\n * 两点之间的距离\n * @param {number} x1 起始点 x\n * @param {number} y1 起始点 y\n * @param {number} x2 结束点 x\n * @param {number} y2 结束点 y\n */\n\nexport function distance(x1, y1, x2, y2) {\n  var dx = x1 - x2;\n  var dy = y1 - y2;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n/**\n * 是否在包围盒内\n * @param {number} minX   包围盒开始的点 x\n * @param {number} minY   包围盒开始的点 y\n * @param {number} width  宽度\n * @param {number} height 高度\n * @param {[type]} x      检测点的 x\n * @param {[type]} y      监测点的 y\n */\n\nexport function inBox(minX, minY, width, height, x, y) {\n  return x >= minX && x <= minX + width && y >= minY && y <= minY + height;\n}\nexport function intersectRect(box1, box2) {\n  return !(box2.minX > box1.maxX || box2.maxX < box1.minX || box2.minY > box1.maxY || box2.maxY < box1.minY);\n} // 合并两个区域\n\nexport function mergeRegion(region1, region2) {\n  if (!region1 || !region2) {\n    return region1 || region2;\n  }\n\n  return {\n    minX: Math.min(region1.minX, region2.minX),\n    minY: Math.min(region1.minY, region2.minY),\n    maxX: Math.max(region1.maxX, region2.maxX),\n    maxY: Math.max(region1.maxY, region2.maxY)\n  };\n}\n/**\n * 判断两个点是否重合，点坐标的格式为 [x, y]\n * @param {Array} point1 第一个点\n * @param {Array} point2 第二个点\n */\n\nexport function isSamePoint(point1, point2) {\n  return point1[0] === point2[0] && point1[1] === point2[1];\n}\nexport { isNil, isString, isFunction, isArray, each, toRadian, mod, isNumberEqual, requestAnimationFrame, clearAnimationFrame } from '@antv/util';","map":{"version":3,"sources":["../../src/util/util.ts"],"names":[],"mappings":"AAAA,OAAM,SAAU,aAAV,GAAuB;AAC3B,SAAO,MAAM,GAAG,MAAM,CAAC,gBAAV,GAA6B,CAA1C;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,QAAV,CAAmB,EAAnB,EAA+B,EAA/B,EAA2C,EAA3C,EAAuD,EAAvD,EAAiE;AACrE,MAAM,EAAE,GAAG,EAAE,GAAG,EAAhB;AACA,MAAM,EAAE,GAAG,EAAE,GAAG,EAAhB;AACA,SAAO,IAAI,CAAC,IAAL,CAAU,EAAE,GAAG,EAAL,GAAU,EAAE,GAAG,EAAzB,CAAP;AACD;AAED;;;;;;;;AAQG;;AACH,OAAM,SAAU,KAAV,CAAgB,IAAhB,EAA8B,IAA9B,EAA4C,KAA5C,EAA2D,MAA3D,EAA2E,CAA3E,EAA8E,CAA9E,EAA+E;AACnF,SAAO,CAAC,IAAI,IAAL,IAAa,CAAC,IAAI,IAAI,GAAG,KAAzB,IAAkC,CAAC,IAAI,IAAvC,IAA+C,CAAC,IAAI,IAAI,GAAG,MAAlE;AACD;AAED,OAAM,SAAU,aAAV,CAAwB,IAAxB,EAA8B,IAA9B,EAAkC;AACtC,SAAO,EAAE,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAAjB,IAAyB,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAA1C,IAAkD,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAAnE,IAA2E,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAA9F,CAAP;AACD,C,CAED;;AACA,OAAM,SAAU,WAAV,CAAsB,OAAtB,EAA+B,OAA/B,EAAsC;AAC1C,MAAI,CAAC,OAAD,IAAY,CAAC,OAAjB,EAA0B;AACxB,WAAO,OAAO,IAAI,OAAlB;AACD;;AACD,SAAO;AACL,IAAA,IAAI,EAAE,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,IAAjB,EAAuB,OAAO,CAAC,IAA/B,CADD;AAEL,IAAA,IAAI,EAAE,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,IAAjB,EAAuB,OAAO,CAAC,IAA/B,CAFD;AAGL,IAAA,IAAI,EAAE,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,IAAjB,EAAuB,OAAO,CAAC,IAA/B,CAHD;AAIL,IAAA,IAAI,EAAE,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,IAAjB,EAAuB,OAAO,CAAC,IAA/B;AAJD,GAAP;AAMD;AAED;;;;AAIG;;AACH,OAAM,SAAU,WAAV,CAAsB,MAAtB,EAA8B,MAA9B,EAAoC;AACxC,SAAO,MAAM,CAAC,CAAD,CAAN,KAAc,MAAM,CAAC,CAAD,CAApB,IAA2B,MAAM,CAAC,CAAD,CAAN,KAAc,MAAM,CAAC,CAAD,CAAtD;AACD;AAED,SACE,KADF,EAEE,QAFF,EAGE,UAHF,EAIE,OAJF,EAKE,IALF,EAME,QANF,EAOE,GAPF,EAQE,aARF,EASE,qBATF,EAUE,mBAVF,QAWO,YAXP","sourceRoot":"","sourcesContent":["export function getPixelRatio() {\n    return window ? window.devicePixelRatio : 1;\n}\n/**\n * 两点之间的距离\n * @param {number} x1 起始点 x\n * @param {number} y1 起始点 y\n * @param {number} x2 结束点 x\n * @param {number} y2 结束点 y\n */\nexport function distance(x1, y1, x2, y2) {\n    var dx = x1 - x2;\n    var dy = y1 - y2;\n    return Math.sqrt(dx * dx + dy * dy);\n}\n/**\n * 是否在包围盒内\n * @param {number} minX   包围盒开始的点 x\n * @param {number} minY   包围盒开始的点 y\n * @param {number} width  宽度\n * @param {number} height 高度\n * @param {[type]} x      检测点的 x\n * @param {[type]} y      监测点的 y\n */\nexport function inBox(minX, minY, width, height, x, y) {\n    return x >= minX && x <= minX + width && y >= minY && y <= minY + height;\n}\nexport function intersectRect(box1, box2) {\n    return !(box2.minX > box1.maxX || box2.maxX < box1.minX || box2.minY > box1.maxY || box2.maxY < box1.minY);\n}\n// 合并两个区域\nexport function mergeRegion(region1, region2) {\n    if (!region1 || !region2) {\n        return region1 || region2;\n    }\n    return {\n        minX: Math.min(region1.minX, region2.minX),\n        minY: Math.min(region1.minY, region2.minY),\n        maxX: Math.max(region1.maxX, region2.maxX),\n        maxY: Math.max(region1.maxY, region2.maxY),\n    };\n}\n/**\n * 判断两个点是否重合，点坐标的格式为 [x, y]\n * @param {Array} point1 第一个点\n * @param {Array} point2 第二个点\n */\nexport function isSamePoint(point1, point2) {\n    return point1[0] === point2[0] && point1[1] === point2[1];\n}\nexport { isNil, isString, isFunction, isArray, each, toRadian, mod, isNumberEqual, requestAnimationFrame, clearAnimationFrame, } from '@antv/util';\n//# sourceMappingURL=util.js.map"]},"metadata":{},"sourceType":"module"}