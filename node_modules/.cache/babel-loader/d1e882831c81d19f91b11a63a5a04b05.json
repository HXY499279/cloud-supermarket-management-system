{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Element from './element';\nimport { multiplyVec2 } from '../util/matrix';\n\nvar AbstractShape =\n/** @class */\nfunction (_super) {\n  __extends(AbstractShape, _super);\n\n  function AbstractShape(cfg) {\n    return _super.call(this, cfg) || this;\n  } // 是否在包围盒内\n\n\n  AbstractShape.prototype._isInBBox = function (refX, refY) {\n    var bbox = this.getBBox();\n    return bbox.minX <= refX && bbox.maxX >= refX && bbox.minY <= refY && bbox.maxY >= refY;\n  };\n  /**\n   * 属性更改后需要做的事情\n   * @protected\n   * @param {ShapeAttrs} targetAttrs 渲染的图像属性\n   */\n\n\n  AbstractShape.prototype.afterAttrsChange = function (targetAttrs) {\n    _super.prototype.afterAttrsChange.call(this, targetAttrs);\n\n    this.clearCacheBBox();\n  }; // 计算包围盒时，需要缓存，这是一个高频的操作\n\n\n  AbstractShape.prototype.getBBox = function () {\n    var bbox = this.cfg.bbox;\n\n    if (!bbox) {\n      bbox = this.calculateBBox();\n      this.set('bbox', bbox);\n    }\n\n    return bbox;\n  }; // 计算相对于画布的包围盒\n\n\n  AbstractShape.prototype.getCanvasBBox = function () {\n    var canvasBBox = this.cfg.canvasBBox;\n\n    if (!canvasBBox) {\n      canvasBBox = this.calculateCanvasBBox();\n      this.set('canvasBBox', canvasBBox);\n    }\n\n    return canvasBBox;\n  };\n\n  AbstractShape.prototype.applyMatrix = function (matrix) {\n    _super.prototype.applyMatrix.call(this, matrix); // 清理掉缓存的包围盒\n\n\n    this.set('canvasBBox', null);\n  };\n  /**\n   * 计算相对于画布的包围盒，默认等同于 bbox\n   * @return {BBox} 包围盒\n   */\n\n\n  AbstractShape.prototype.calculateCanvasBBox = function () {\n    var bbox = this.getBBox();\n    var totalMatrix = this.getTotalMatrix();\n    var minX = bbox.minX,\n        minY = bbox.minY,\n        maxX = bbox.maxX,\n        maxY = bbox.maxY;\n\n    if (totalMatrix) {\n      var topLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.minY]);\n      var topRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.minY]);\n      var bottomLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.maxY]);\n      var bottomRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.maxY]);\n      minX = Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n      maxX = Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n      minY = Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n      maxY = Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n    }\n\n    var attrs = this.attrs; // 如果存在 shadow 则计算 shadow\n\n    if (attrs.shadowColor) {\n      var _a = attrs.shadowBlur,\n          shadowBlur = _a === void 0 ? 0 : _a,\n          _b = attrs.shadowOffsetX,\n          shadowOffsetX = _b === void 0 ? 0 : _b,\n          _c = attrs.shadowOffsetY,\n          shadowOffsetY = _c === void 0 ? 0 : _c;\n      var shadowLeft = minX - shadowBlur + shadowOffsetX;\n      var shadowRight = maxX + shadowBlur + shadowOffsetX;\n      var shadowTop = minY - shadowBlur + shadowOffsetY;\n      var shadowBottom = maxY + shadowBlur + shadowOffsetY;\n      minX = Math.min(minX, shadowLeft);\n      maxX = Math.max(maxX, shadowRight);\n      minY = Math.min(minY, shadowTop);\n      maxY = Math.max(maxY, shadowBottom);\n    }\n\n    return {\n      x: minX,\n      y: minY,\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  };\n  /**\n   * @protected\n   * 清理缓存的 bbox\n   */\n\n\n  AbstractShape.prototype.clearCacheBBox = function () {\n    this.set('bbox', null);\n    this.set('canvasBBox', null);\n  }; // 实现接口\n\n\n  AbstractShape.prototype.isClipShape = function () {\n    return this.get('isClipShape');\n  };\n  /**\n   * @protected\n   * 不同的图形自己实现是否在图形内部的逻辑，要判断边和填充区域\n   * @param  {number}  refX 相对于图形的坐标 x\n   * @param  {number}  refY 相对于图形的坐标 Y\n   * @return {boolean} 点是否在图形内部\n   */\n\n\n  AbstractShape.prototype.isInShape = function (refX, refY) {\n    return false;\n  };\n  /**\n   * 是否仅仅使用 BBox 检测就可以判定拾取到图形\n   * 默认是 false，但是有些图形例如 image、marker 等都可直接使用 BBox 的检测而不需要使用图形拾取\n   * @return {Boolean} 仅仅使用 BBox 进行拾取\n   */\n\n\n  AbstractShape.prototype.isOnlyHitBox = function () {\n    return false;\n  }; // 不同的 Shape 各自实现\n\n\n  AbstractShape.prototype.isHit = function (x, y) {\n    var startArrowShape = this.get('startArrowShape');\n    var endArrowShape = this.get('endArrowShape');\n    var vec = [x, y, 1];\n    vec = this.invertFromMatrix(vec);\n    var refX = vec[0],\n        refY = vec[1];\n\n    var inBBox = this._isInBBox(refX, refY); // 跳过图形的拾取，在某些图形中可以省略一倍的检测成本\n\n\n    if (this.isOnlyHitBox()) {\n      return inBBox;\n    } // 被裁减掉的和不在包围盒内的不进行计算\n\n\n    if (inBBox && !this.isClipped(refX, refY)) {\n      // 对图形进行拾取判断\n      if (this.isInShape(refX, refY)) {\n        return true;\n      } // 对起始箭头进行拾取判断\n\n\n      if (startArrowShape && startArrowShape.isHit(refX, refY)) {\n        return true;\n      } // 对结束箭头进行拾取判断\n\n\n      if (endArrowShape && endArrowShape.isHit(refX, refY)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  return AbstractShape;\n}(Element);\n\nexport default AbstractShape;","map":{"version":3,"sources":["../../src/abstract/shape.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport Element from './element';\nimport { multiplyVec2 } from '../util/matrix';\nvar AbstractShape = /** @class */ (function (_super) {\n    __extends(AbstractShape, _super);\n    function AbstractShape(cfg) {\n        return _super.call(this, cfg) || this;\n    }\n    // 是否在包围盒内\n    AbstractShape.prototype._isInBBox = function (refX, refY) {\n        var bbox = this.getBBox();\n        return bbox.minX <= refX && bbox.maxX >= refX && bbox.minY <= refY && bbox.maxY >= refY;\n    };\n    /**\n     * 属性更改后需要做的事情\n     * @protected\n     * @param {ShapeAttrs} targetAttrs 渲染的图像属性\n     */\n    AbstractShape.prototype.afterAttrsChange = function (targetAttrs) {\n        _super.prototype.afterAttrsChange.call(this, targetAttrs);\n        this.clearCacheBBox();\n    };\n    // 计算包围盒时，需要缓存，这是一个高频的操作\n    AbstractShape.prototype.getBBox = function () {\n        var bbox = this.cfg.bbox;\n        if (!bbox) {\n            bbox = this.calculateBBox();\n            this.set('bbox', bbox);\n        }\n        return bbox;\n    };\n    // 计算相对于画布的包围盒\n    AbstractShape.prototype.getCanvasBBox = function () {\n        var canvasBBox = this.cfg.canvasBBox;\n        if (!canvasBBox) {\n            canvasBBox = this.calculateCanvasBBox();\n            this.set('canvasBBox', canvasBBox);\n        }\n        return canvasBBox;\n    };\n    AbstractShape.prototype.applyMatrix = function (matrix) {\n        _super.prototype.applyMatrix.call(this, matrix);\n        // 清理掉缓存的包围盒\n        this.set('canvasBBox', null);\n    };\n    /**\n     * 计算相对于画布的包围盒，默认等同于 bbox\n     * @return {BBox} 包围盒\n     */\n    AbstractShape.prototype.calculateCanvasBBox = function () {\n        var bbox = this.getBBox();\n        var totalMatrix = this.getTotalMatrix();\n        var minX = bbox.minX, minY = bbox.minY, maxX = bbox.maxX, maxY = bbox.maxY;\n        if (totalMatrix) {\n            var topLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.minY]);\n            var topRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.minY]);\n            var bottomLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.maxY]);\n            var bottomRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.maxY]);\n            minX = Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n            maxX = Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n            minY = Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n            maxY = Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n        }\n        var attrs = this.attrs;\n        // 如果存在 shadow 则计算 shadow\n        if (attrs.shadowColor) {\n            var _a = attrs.shadowBlur, shadowBlur = _a === void 0 ? 0 : _a, _b = attrs.shadowOffsetX, shadowOffsetX = _b === void 0 ? 0 : _b, _c = attrs.shadowOffsetY, shadowOffsetY = _c === void 0 ? 0 : _c;\n            var shadowLeft = minX - shadowBlur + shadowOffsetX;\n            var shadowRight = maxX + shadowBlur + shadowOffsetX;\n            var shadowTop = minY - shadowBlur + shadowOffsetY;\n            var shadowBottom = maxY + shadowBlur + shadowOffsetY;\n            minX = Math.min(minX, shadowLeft);\n            maxX = Math.max(maxX, shadowRight);\n            minY = Math.min(minY, shadowTop);\n            maxY = Math.max(maxY, shadowBottom);\n        }\n        return {\n            x: minX,\n            y: minY,\n            minX: minX,\n            minY: minY,\n            maxX: maxX,\n            maxY: maxY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n    };\n    /**\n     * @protected\n     * 清理缓存的 bbox\n     */\n    AbstractShape.prototype.clearCacheBBox = function () {\n        this.set('bbox', null);\n        this.set('canvasBBox', null);\n    };\n    // 实现接口\n    AbstractShape.prototype.isClipShape = function () {\n        return this.get('isClipShape');\n    };\n    /**\n     * @protected\n     * 不同的图形自己实现是否在图形内部的逻辑，要判断边和填充区域\n     * @param  {number}  refX 相对于图形的坐标 x\n     * @param  {number}  refY 相对于图形的坐标 Y\n     * @return {boolean} 点是否在图形内部\n     */\n    AbstractShape.prototype.isInShape = function (refX, refY) {\n        return false;\n    };\n    /**\n     * 是否仅仅使用 BBox 检测就可以判定拾取到图形\n     * 默认是 false，但是有些图形例如 image、marker 等都可直接使用 BBox 的检测而不需要使用图形拾取\n     * @return {Boolean} 仅仅使用 BBox 进行拾取\n     */\n    AbstractShape.prototype.isOnlyHitBox = function () {\n        return false;\n    };\n    // 不同的 Shape 各自实现\n    AbstractShape.prototype.isHit = function (x, y) {\n        var startArrowShape = this.get('startArrowShape');\n        var endArrowShape = this.get('endArrowShape');\n        var vec = [x, y, 1];\n        vec = this.invertFromMatrix(vec);\n        var refX = vec[0], refY = vec[1];\n        var inBBox = this._isInBBox(refX, refY);\n        // 跳过图形的拾取，在某些图形中可以省略一倍的检测成本\n        if (this.isOnlyHitBox()) {\n            return inBBox;\n        }\n        // 被裁减掉的和不在包围盒内的不进行计算\n        if (inBBox && !this.isClipped(refX, refY)) {\n            // 对图形进行拾取判断\n            if (this.isInShape(refX, refY)) {\n                return true;\n            }\n            // 对起始箭头进行拾取判断\n            if (startArrowShape && startArrowShape.isHit(refX, refY)) {\n                return true;\n            }\n            // 对结束箭头进行拾取判断\n            if (endArrowShape && endArrowShape.isHit(refX, refY)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    return AbstractShape;\n}(Element));\nexport default AbstractShape;\n//# sourceMappingURL=shape.js.map"]},"metadata":{},"sourceType":"module"}