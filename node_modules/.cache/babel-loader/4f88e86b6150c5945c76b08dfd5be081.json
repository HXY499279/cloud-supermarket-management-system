{"ast":null,"code":"import { assign, isEmpty, isFunction, isNil, isNumber, isObject, isString, map } from '@antv/util';\nimport { getTickMethod } from './tick-method/register';\n\nvar Scale =\n/** @class */\nfunction () {\n  function Scale(cfg) {\n    /**\n     * 度量的类型\n     */\n    this.type = 'base';\n    /**\n     * 是否分类类型的度量\n     */\n\n    this.isCategory = false;\n    /**\n     * 是否线性度量，有linear, time 度量\n     */\n\n    this.isLinear = false;\n    /**\n     * 是否连续类型的度量，linear,time,log, pow, quantile, quantize 都支持\n     */\n\n    this.isContinuous = false;\n    /**\n     * 是否是常量的度量，传入和传出一致\n     */\n\n    this.isIdentity = false;\n    this.values = [];\n    this.range = [0, 1];\n    this.ticks = [];\n    this.__cfg__ = cfg;\n    this.initCfg();\n    this.init();\n  } // 对于原始值的必要转换，如分类、时间字段需转换成数值，用transform/map命名可能更好\n\n\n  Scale.prototype.translate = function (v) {\n    return v;\n  };\n  /** 重新初始化 */\n\n\n  Scale.prototype.change = function (cfg) {\n    // 覆盖配置项，而不替代\n    assign(this.__cfg__, cfg);\n    this.init();\n  };\n\n  Scale.prototype.clone = function () {\n    return this.constructor(this.__cfg__);\n  };\n  /** 获取坐标轴需要的ticks */\n\n\n  Scale.prototype.getTicks = function () {\n    var _this = this;\n\n    return map(this.ticks, function (tick, idx) {\n      if (isObject(tick)) {\n        // 仅当符合Tick类型时才有意义\n        return tick;\n      }\n\n      return {\n        text: _this.getText(tick, idx),\n        tickValue: tick,\n        value: _this.scale(tick)\n      };\n    });\n  };\n  /** 获取Tick的格式化结果 */\n\n\n  Scale.prototype.getText = function (value, key) {\n    var formatter = this.formatter;\n    var res = formatter ? formatter(value, key) : value;\n\n    if (isNil(res) || !isFunction(res.toString)) {\n      return '';\n    }\n\n    return res.toString();\n  }; // 获取配置项中的值，当前 scale 上的值可能会被修改\n\n\n  Scale.prototype.getConfig = function (key) {\n    return this.__cfg__[key];\n  }; // scale初始化\n\n\n  Scale.prototype.init = function () {\n    assign(this, this.__cfg__);\n    this.setDomain();\n\n    if (isEmpty(this.getConfig('ticks'))) {\n      this.ticks = this.calculateTicks();\n    }\n  }; // 子类上覆盖某些属性，不能直接在类上声明，否则会被覆盖\n\n\n  Scale.prototype.initCfg = function () {};\n\n  Scale.prototype.setDomain = function () {};\n\n  Scale.prototype.calculateTicks = function () {\n    var tickMethod = this.tickMethod;\n    var ticks = [];\n\n    if (isString(tickMethod)) {\n      var method = getTickMethod(tickMethod);\n\n      if (!method) {\n        throw new Error('There is no method to to calculate ticks!');\n      }\n\n      ticks = method(this);\n    } else if (isFunction(tickMethod)) {\n      ticks = tickMethod(this);\n    }\n\n    return ticks;\n  }; // range 的最小值\n\n\n  Scale.prototype.rangeMin = function () {\n    return this.range[0];\n  }; // range 的最大值\n\n\n  Scale.prototype.rangeMax = function () {\n    return this.range[1];\n  };\n  /** 定义域转 0~1 */\n\n\n  Scale.prototype.calcPercent = function (value, min, max) {\n    if (isNumber(value)) {\n      return (value - min) / (max - min);\n    }\n\n    return NaN;\n  };\n  /** 0~1转定义域 */\n\n\n  Scale.prototype.calcValue = function (percent, min, max) {\n    return min + percent * (max - min);\n  };\n\n  return Scale;\n}();\n\nexport default Scale;","map":{"version":3,"sources":["../src/base.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,EAAiB,OAAjB,EAA0B,UAA1B,EAAsC,KAAtC,EAA6C,QAA7C,EAAuD,QAAvD,EAAiE,QAAjE,EAA2E,GAA3E,QAAsF,YAAtF;AACA,SAAS,aAAT,QAA8B,wBAA9B;;AAEA,IAAA,KAAA;AAAA;AAAA,YAAA;AAqCE,WAAA,KAAA,CAAY,GAAZ,EAA4B;AApC5B;;AAEG;AACI,SAAA,IAAA,GAAe,MAAf;AACP;;AAEG;;AACI,SAAA,UAAA,GAAuB,KAAvB;AACP;;AAEG;;AACI,SAAA,QAAA,GAAqB,KAArB;AACP;;AAEG;;AACI,SAAA,YAAA,GAAyB,KAAzB;AACP;;AAEG;;AACI,SAAA,UAAA,GAAsB,KAAtB;AAIA,SAAA,MAAA,GAAgC,EAAhC;AAKA,SAAA,KAAA,GAA8B,CAAC,CAAD,EAAI,CAAJ,CAA9B;AACA,SAAA,KAAA,GAA8B,EAA9B;AAQL,SAAK,OAAL,GAAe,GAAf;AACA,SAAK,OAAL;AACA,SAAK,IAAL;AACD,GAzCH,CA2CE;;;AACO,EAAA,KAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,CAAjB,EAAuB;AACrB,WAAO,CAAP;AACD,GAFM;AAUP;;;AACO,EAAA,KAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,GAAd,EAA8B;AAC5B;AACA,IAAA,MAAM,CAAC,KAAK,OAAN,EAAe,GAAf,CAAN;AACA,SAAK,IAAL;AACD,GAJM;;AAMA,EAAA,KAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACE,WAAO,KAAK,WAAL,CAAiB,KAAK,OAAtB,CAAP;AACD,GAFM;AAIP;;;AACO,EAAA,KAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO,GAAG,CAAC,KAAK,KAAN,EAAa,UAAC,IAAD,EAAY,GAAZ,EAAuB;AAC5C,UAAI,QAAQ,CAAC,IAAD,CAAZ,EAAoB;AAClB;AACA,eAAO,IAAP;AACD;;AACD,aAAO;AACL,QAAA,IAAI,EAAE,KAAI,CAAC,OAAL,CAAa,IAAb,EAAmB,GAAnB,CADD;AAEL,QAAA,SAAS,EAAE,IAFN;AAGL,QAAA,KAAK,EAAE,KAAI,CAAC,KAAL,CAAW,IAAX;AAHF,OAAP;AAKD,KAVS,CAAV;AAWD,GAZM;AAcP;;;AACO,EAAA,KAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,KAAf,EAA2B,GAA3B,EAAuC;AACrC,QAAM,SAAS,GAAG,KAAK,SAAvB;AACA,QAAM,GAAG,GAAG,SAAS,GAAG,SAAS,CAAC,KAAD,EAAQ,GAAR,CAAZ,GAA2B,KAAhD;;AACA,QAAI,KAAK,CAAC,GAAD,CAAL,IAAc,CAAC,UAAU,CAAC,GAAG,CAAC,QAAL,CAA7B,EAA6C;AAC3C,aAAO,EAAP;AACD;;AACD,WAAO,GAAG,CAAC,QAAJ,EAAP;AACD,GAPM,CAjFT,CA0FE;;;AACU,EAAA,KAAA,CAAA,SAAA,CAAA,SAAA,GAAV,UAAoB,GAApB,EAAuB;AACrB,WAAO,KAAK,OAAL,CAAa,GAAb,CAAP;AACD,GAFS,CA3FZ,CA+FE;;;AACU,EAAA,KAAA,CAAA,SAAA,CAAA,IAAA,GAAV,YAAA;AACE,IAAA,MAAM,CAAC,IAAD,EAAO,KAAK,OAAZ,CAAN;AACA,SAAK,SAAL;;AACA,QAAI,OAAO,CAAC,KAAK,SAAL,CAAe,OAAf,CAAD,CAAX,EAAsC;AACpC,WAAK,KAAL,GAAa,KAAK,cAAL,EAAb;AACD;AACF,GANS,CAhGZ,CAwGE;;;AACU,EAAA,KAAA,CAAA,SAAA,CAAA,OAAA,GAAV,YAAA,CAAsB,CAAZ;;AAEA,EAAA,KAAA,CAAA,SAAA,CAAA,SAAA,GAAV,YAAA,CAA8B,CAApB;;AAEA,EAAA,KAAA,CAAA,SAAA,CAAA,cAAA,GAAV,YAAA;AACE,QAAM,UAAU,GAAG,KAAK,UAAxB;AACA,QAAI,KAAK,GAAG,EAAZ;;AACA,QAAI,QAAQ,CAAC,UAAD,CAAZ,EAA0B;AACxB,UAAM,MAAM,GAAG,aAAa,CAAC,UAAD,CAA5B;;AACA,UAAI,CAAC,MAAL,EAAa;AACX,cAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN;AACD;;AACD,MAAA,KAAK,GAAG,MAAM,CAAC,IAAD,CAAd;AACD,KAND,MAMO,IAAI,UAAU,CAAC,UAAD,CAAd,EAA4B;AACjC,MAAA,KAAK,GAAG,UAAU,CAAC,IAAD,CAAlB;AACD;;AACD,WAAO,KAAP;AACD,GAbS,CA7GZ,CA4HE;;;AACU,EAAA,KAAA,CAAA,SAAA,CAAA,QAAA,GAAV,YAAA;AACE,WAAO,KAAK,KAAL,CAAW,CAAX,CAAP;AACD,GAFS,CA7HZ,CAiIE;;;AACU,EAAA,KAAA,CAAA,SAAA,CAAA,QAAA,GAAV,YAAA;AACE,WAAO,KAAK,KAAL,CAAW,CAAX,CAAP;AACD,GAFS;AAIV;;;AACU,EAAA,KAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,KAAtB,EAAkC,GAAlC,EAA+C,GAA/C,EAA0D;AACxD,QAAI,QAAQ,CAAC,KAAD,CAAZ,EAAqB;AACnB,aAAO,CAAC,KAAK,GAAG,GAAT,KAAiB,GAAG,GAAG,GAAvB,CAAP;AACD;;AACD,WAAO,GAAP;AACD,GALS;AAOV;;;AACU,EAAA,KAAA,CAAA,SAAA,CAAA,SAAA,GAAV,UAAoB,OAApB,EAAqC,GAArC,EAAkD,GAAlD,EAA6D;AAC3D,WAAO,GAAG,GAAG,OAAO,IAAI,GAAG,GAAG,GAAV,CAApB;AACD,GAFS;;AAGZ,SAAA,KAAA;AAAC,CAlJD,EAAA","sourceRoot":"","sourcesContent":["import { assign, isEmpty, isFunction, isNil, isNumber, isObject, isString, map } from '@antv/util';\nimport { getTickMethod } from './tick-method/register';\nvar Scale = /** @class */ (function () {\n    function Scale(cfg) {\n        /**\n         * 度量的类型\n         */\n        this.type = 'base';\n        /**\n         * 是否分类类型的度量\n         */\n        this.isCategory = false;\n        /**\n         * 是否线性度量，有linear, time 度量\n         */\n        this.isLinear = false;\n        /**\n         * 是否连续类型的度量，linear,time,log, pow, quantile, quantize 都支持\n         */\n        this.isContinuous = false;\n        /**\n         * 是否是常量的度量，传入和传出一致\n         */\n        this.isIdentity = false;\n        this.values = [];\n        this.range = [0, 1];\n        this.ticks = [];\n        this.__cfg__ = cfg;\n        this.initCfg();\n        this.init();\n    }\n    // 对于原始值的必要转换，如分类、时间字段需转换成数值，用transform/map命名可能更好\n    Scale.prototype.translate = function (v) {\n        return v;\n    };\n    /** 重新初始化 */\n    Scale.prototype.change = function (cfg) {\n        // 覆盖配置项，而不替代\n        assign(this.__cfg__, cfg);\n        this.init();\n    };\n    Scale.prototype.clone = function () {\n        return this.constructor(this.__cfg__);\n    };\n    /** 获取坐标轴需要的ticks */\n    Scale.prototype.getTicks = function () {\n        var _this = this;\n        return map(this.ticks, function (tick, idx) {\n            if (isObject(tick)) {\n                // 仅当符合Tick类型时才有意义\n                return tick;\n            }\n            return {\n                text: _this.getText(tick, idx),\n                tickValue: tick,\n                value: _this.scale(tick),\n            };\n        });\n    };\n    /** 获取Tick的格式化结果 */\n    Scale.prototype.getText = function (value, key) {\n        var formatter = this.formatter;\n        var res = formatter ? formatter(value, key) : value;\n        if (isNil(res) || !isFunction(res.toString)) {\n            return '';\n        }\n        return res.toString();\n    };\n    // 获取配置项中的值，当前 scale 上的值可能会被修改\n    Scale.prototype.getConfig = function (key) {\n        return this.__cfg__[key];\n    };\n    // scale初始化\n    Scale.prototype.init = function () {\n        assign(this, this.__cfg__);\n        this.setDomain();\n        if (isEmpty(this.getConfig('ticks'))) {\n            this.ticks = this.calculateTicks();\n        }\n    };\n    // 子类上覆盖某些属性，不能直接在类上声明，否则会被覆盖\n    Scale.prototype.initCfg = function () { };\n    Scale.prototype.setDomain = function () { };\n    Scale.prototype.calculateTicks = function () {\n        var tickMethod = this.tickMethod;\n        var ticks = [];\n        if (isString(tickMethod)) {\n            var method = getTickMethod(tickMethod);\n            if (!method) {\n                throw new Error('There is no method to to calculate ticks!');\n            }\n            ticks = method(this);\n        }\n        else if (isFunction(tickMethod)) {\n            ticks = tickMethod(this);\n        }\n        return ticks;\n    };\n    // range 的最小值\n    Scale.prototype.rangeMin = function () {\n        return this.range[0];\n    };\n    // range 的最大值\n    Scale.prototype.rangeMax = function () {\n        return this.range[1];\n    };\n    /** 定义域转 0~1 */\n    Scale.prototype.calcPercent = function (value, min, max) {\n        if (isNumber(value)) {\n            return (value - min) / (max - min);\n        }\n        return NaN;\n    };\n    /** 0~1转定义域 */\n    Scale.prototype.calcValue = function (percent, min, max) {\n        return min + percent * (max - min);\n    };\n    return Scale;\n}());\nexport default Scale;\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"module"}