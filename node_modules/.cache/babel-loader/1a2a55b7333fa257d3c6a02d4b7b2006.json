{"ast":null,"code":"import { deepMix, get, isBoolean } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { getName } from './scale';\nimport { vec2 } from '@antv/matrix-util';\n/**\n * @ignore\n * get axis relative region ( 0 ~ 1) by direction when coordinate is rect\n * @param direction\n * @returns axis coordinate region\n */\n\nexport function getLineAxisRelativeRegion(direction) {\n  var start;\n  var end;\n\n  switch (direction) {\n    case DIRECTION.TOP:\n      start = {\n        x: 0,\n        y: 1\n      };\n      end = {\n        x: 1,\n        y: 1\n      };\n      break;\n\n    case DIRECTION.RIGHT:\n      start = {\n        x: 1,\n        y: 0\n      };\n      end = {\n        x: 1,\n        y: 1\n      };\n      break;\n\n    case DIRECTION.BOTTOM:\n      start = {\n        x: 0,\n        y: 0\n      };\n      end = {\n        x: 1,\n        y: 0\n      };\n      break;\n\n    case DIRECTION.LEFT:\n      start = {\n        x: 0,\n        y: 0\n      };\n      end = {\n        x: 0,\n        y: 1\n      };\n      break;\n\n    default:\n      start = end = {\n        x: 0,\n        y: 0\n      };\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n}\n/**\n * @ignore\n * get axis relative region ( 0 ~ 1) by direction when coordinate is polar\n * @param coordinate\n * @returns axis coordinate region\n */\n\nexport function getCircleAxisRelativeRegion(coordinate) {\n  var start;\n  var end;\n\n  if (coordinate.isTransposed) {\n    start = {\n      x: 0,\n      y: 0\n    };\n    end = {\n      x: 1,\n      y: 0\n    };\n  } else {\n    start = {\n      x: 0,\n      y: 0\n    };\n    end = {\n      x: 0,\n      y: 1\n    };\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n}\n/**\n * @ignore\n * get the axis region from coordinate\n * @param coordinate\n * @param direction\n * @returns the axis region (start point, end point)\n */\n\nexport function getAxisRegion(coordinate, direction) {\n  var region = {\n    start: {\n      x: 0,\n      y: 0\n    },\n    end: {\n      x: 0,\n      y: 0\n    }\n  };\n\n  if (coordinate.isRect) {\n    region = getLineAxisRelativeRegion(direction);\n  } else if (coordinate.isPolar) {\n    region = getCircleAxisRelativeRegion(coordinate);\n  }\n\n  var start = region.start,\n      end = region.end;\n  return {\n    start: coordinate.convert(start),\n    end: coordinate.convert(end)\n  };\n}\n/**\n * @ignore\n * get axis factor\n * @param coordinate\n * @param direction\n * @returns factor\n */\n\nexport function getAxisFactor(coordinate, direction) {\n  // rect coordinate, by direction\n  if (coordinate.isRect) {\n    return coordinate.isTransposed ? [DIRECTION.RIGHT, DIRECTION.BOTTOM].includes(direction) ? 1 : -1 : [DIRECTION.BOTTOM, DIRECTION.RIGHT].includes(direction) ? -1 : 1;\n  } // polar y axis, by angle\n\n\n  if (coordinate.isPolar) {\n    var startAngle = coordinate.x.start;\n    return startAngle < 0 ? -1 : 1;\n  }\n\n  return 1;\n}\n/**\n * @ignore\n * whether the axis isVertical\n * @param region\n * @returns isVertical\n */\n\nexport function isVertical(region) {\n  var start = region.start,\n      end = region.end;\n  return start.x === end.x;\n}\n/**\n * @ignore\n * get factor by region (real position)\n * @param region\n * @param center\n * @returns factor\n */\n\nexport function getAxisFactorByRegion(region, center) {\n  var start = region.start,\n      end = region.end;\n  var isAxisVertical = isVertical(region); // 垂直\n\n  if (isAxisVertical) {\n    // 左方,从下到上、右方,从上到下\n    if ((start.y - end.y) * (center.x - start.x) > 0) {\n      return 1;\n    } else {\n      return -1;\n    }\n  } else {\n    // 下方,从左到右、上方,从右到做\n    if ((end.x - start.x) * (start.y - center.y) > 0) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n}\n/**\n * @ignore\n * get the axis cfg from theme, will mix the common cfg of legend theme\n *\n * @param theme view theme object\n * @param direction axis direction\n * @returns axis theme cfg\n */\n\nexport function getAxisThemeCfg(theme, direction) {\n  var axisTheme = get(theme, ['components', 'axis'], {});\n  return deepMix({}, get(axisTheme, ['common'], {}), deepMix({}, get(axisTheme, [direction], {})));\n}\n/**\n * get the options of axis title，mix the cfg from theme, avoid common themeCfg not work\n * @param theme\n * @param direction\n * @param axisOptions\n * @returns axis title options\n */\n\nexport function getAxisTitleOptions(theme, direction, axisOptions) {\n  var axisTheme = get(theme, ['components', 'axis'], {});\n  return deepMix({}, get(axisTheme, ['common', 'title'], {}), deepMix({}, get(axisTheme, [direction, 'title'], {})), axisOptions);\n}\n/**\n * @ignore\n * get circle axis center and radius\n * @param coordinate\n */\n\nexport function getCircleAxisCenterRadius(coordinate) {\n  // @ts-ignore\n  var x = coordinate.x,\n      y = coordinate.y,\n      center = coordinate.circleCenter;\n  var isReflectY = y.start > y.end;\n  var start = coordinate.isTransposed ? coordinate.convert({\n    x: isReflectY ? 0 : 1,\n    y: 0\n  }) : coordinate.convert({\n    x: 0,\n    y: isReflectY ? 0 : 1\n  });\n  var startVector = [start.x - center.x, start.y - center.y];\n  var normalVector = [1, 0];\n  var startAngle = start.y > center.y ? vec2.angle(startVector, normalVector) : vec2.angle(startVector, normalVector) * -1;\n  var endAngle = startAngle + (x.end - x.start);\n  var radius = Math.sqrt(Math.pow(start.x - center.x, 2) + Math.pow(start.y - center.y, 2));\n  return {\n    center: center,\n    radius: radius,\n    startAngle: startAngle,\n    endAngle: endAngle\n  };\n}\n/**\n * @ignore\n * 从配置中获取单个字段的 axis 配置\n * @param axes\n * @param field\n * @returns the axis option of field\n */\n\nexport function getAxisOption(axes, field) {\n  if (isBoolean(axes)) {\n    return axes === false ? false : {};\n  }\n\n  return get(axes, [field]);\n}\n/**\n * @ignore\n * 如果配置了 position，则使用配置\n * @param axisOption\n * @param def\n */\n\nexport function getAxisDirection(axisOption, def) {\n  return get(axisOption, 'position', def);\n}\n/**\n * 获取 axis 的 title 文本\n * @param scale\n * @param axisOption\n */\n\nexport function getAxisTitleText(scale, axisOption) {\n  return get(axisOption, ['title', 'text'], getName(scale));\n}","map":{"version":3,"sources":["../../src/util/axis.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, get, isBoolean } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { Coordinate, Scale } from '../dependents';\nimport { AxisCfg, AxisOption, Point, Region } from '../interface';\nimport { getName } from './scale';\nimport { vec2 } from '@antv/matrix-util';\n\n/**\n * @ignore\n * get axis relative region ( 0 ~ 1) by direction when coordinate is rect\n * @param direction\n * @returns axis coordinate region\n */\nexport function getLineAxisRelativeRegion(direction: DIRECTION): Region {\n  let start;\n  let end;\n\n  switch (direction) {\n    case DIRECTION.TOP:\n      start = { x: 0, y: 1 };\n      end = { x: 1, y: 1 };\n      break;\n    case DIRECTION.RIGHT:\n      start = { x: 1, y: 0 };\n      end = { x: 1, y: 1 };\n      break;\n    case DIRECTION.BOTTOM:\n      start = { x: 0, y: 0 };\n      end = { x: 1, y: 0 };\n      break;\n    case DIRECTION.LEFT:\n      start = { x: 0, y: 0 };\n      end = { x: 0, y: 1 };\n      break;\n    default:\n      start = end = { x: 0, y: 0 };\n  }\n\n  return { start, end };\n}\n\n/**\n * @ignore\n * get axis relative region ( 0 ~ 1) by direction when coordinate is polar\n * @param coordinate\n * @returns axis coordinate region\n */\nexport function getCircleAxisRelativeRegion(coordinate: Coordinate) {\n  let start;\n  let end;\n  if (coordinate.isTransposed) {\n    start = {\n      x: 0,\n      y: 0,\n    };\n    end = {\n      x: 1,\n      y: 0,\n    };\n  } else {\n    start = {\n      x: 0,\n      y: 0,\n    };\n    end = {\n      x: 0,\n      y: 1,\n    };\n  }\n\n  return { start, end };\n}\n\n/**\n * @ignore\n * get the axis region from coordinate\n * @param coordinate\n * @param direction\n * @returns the axis region (start point, end point)\n */\nexport function getAxisRegion(coordinate: Coordinate, direction: DIRECTION): Region {\n  let region = { start: { x: 0, y: 0 }, end: { x: 0, y: 0 } };\n  if (coordinate.isRect) {\n    region = getLineAxisRelativeRegion(direction);\n  } else if (coordinate.isPolar) {\n    region = getCircleAxisRelativeRegion(coordinate);\n  }\n\n  const { start, end } = region;\n  return {\n    start: coordinate.convert(start),\n    end: coordinate.convert(end),\n  };\n}\n\n/**\n * @ignore\n * get axis factor\n * @param coordinate\n * @param direction\n * @returns factor\n */\nexport function getAxisFactor(coordinate: Coordinate, direction: DIRECTION): number {\n  // rect coordinate, by direction\n  if (coordinate.isRect) {\n    return coordinate.isTransposed\n      ? [DIRECTION.RIGHT, DIRECTION.BOTTOM].includes(direction)\n        ? 1\n        : -1\n      : [DIRECTION.BOTTOM, DIRECTION.RIGHT].includes(direction)\n      ? -1\n      : 1;\n  }\n\n  // polar y axis, by angle\n  if (coordinate.isPolar) {\n    const startAngle = coordinate.x.start;\n    return startAngle < 0 ? -1 : 1;\n  }\n\n  return 1;\n}\n\n/**\n * @ignore\n * whether the axis isVertical\n * @param region\n * @returns isVertical\n */\nexport function isVertical(region: Region): boolean {\n  const { start, end } = region;\n\n  return start.x === end.x;\n}\n\n/**\n * @ignore\n * get factor by region (real position)\n * @param region\n * @param center\n * @returns factor\n */\nexport function getAxisFactorByRegion(region: Region, center: Point): number {\n  const { start, end } = region;\n\n  const isAxisVertical = isVertical(region);\n\n  // 垂直\n  if (isAxisVertical) {\n    // 左方,从下到上、右方,从上到下\n    if ((start.y - end.y) * (center.x - start.x) > 0) {\n      return 1;\n    } else {\n      return -1;\n    }\n  } else {\n    // 下方,从左到右、上方,从右到做\n    if ((end.x - start.x) * (start.y - center.y) > 0) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n}\n\n/**\n * @ignore\n * get the axis cfg from theme, will mix the common cfg of legend theme\n *\n * @param theme view theme object\n * @param direction axis direction\n * @returns axis theme cfg\n */\nexport function getAxisThemeCfg(theme: object, direction: string): object {\n  const axisTheme = get(theme, ['components', 'axis'], {});\n  return deepMix({}, get(axisTheme, ['common'], {}), deepMix({}, get(axisTheme, [direction], {})));\n}\n\n/**\n * get the options of axis title，mix the cfg from theme, avoid common themeCfg not work\n * @param theme \n * @param direction \n * @param axisOptions \n * @returns axis title options\n */\nexport function getAxisTitleOptions(theme: object, direction: string, axisOptions?: object): object {\n  const axisTheme = get(theme, ['components', 'axis'], {});\n  return deepMix({}, get(axisTheme, ['common', 'title'], {}), deepMix({}, get(axisTheme, [direction, 'title'], {})), axisOptions);\n}\n\n/**\n * @ignore\n * get circle axis center and radius\n * @param coordinate\n */\nexport function getCircleAxisCenterRadius(coordinate: Coordinate) {\n  // @ts-ignore\n  const { x, y, circleCenter: center } = coordinate;\n  const isReflectY = y.start > y.end;\n  const start = coordinate.isTransposed\n    ? coordinate.convert({\n        x: isReflectY ? 0 : 1,\n        y: 0,\n      })\n    : coordinate.convert({\n        x: 0,\n        y: isReflectY ? 0 : 1,\n      });\n\n  const startVector: [number, number] = [start.x - center.x, start.y - center.y];\n  const normalVector: [number, number] = [1, 0];\n  const startAngle =\n    start.y > center.y ? vec2.angle(startVector, normalVector) : vec2.angle(startVector, normalVector) * -1;\n  const endAngle = startAngle + (x.end - x.start);\n  const radius = Math.sqrt((start.x - center.x) ** 2 + (start.y - center.y) ** 2);\n\n  return {\n    center,\n    radius,\n    startAngle,\n    endAngle,\n  };\n}\n\n/**\n * @ignore\n * 从配置中获取单个字段的 axis 配置\n * @param axes\n * @param field\n * @returns the axis option of field\n */\nexport function getAxisOption(axes: Record<string, AxisOption> | boolean, field: string) {\n  if (isBoolean(axes)) {\n    return axes === false ? false : {};\n  }\n  return get(axes, [field]);\n}\n\n/**\n * @ignore\n * 如果配置了 position，则使用配置\n * @param axisOption\n * @param def\n */\nexport function getAxisDirection(axisOption: AxisOption, def: DIRECTION): DIRECTION {\n  return get(axisOption, 'position', def);\n}\n\n/**\n * 获取 axis 的 title 文本\n * @param scale\n * @param axisOption\n */\nexport function getAxisTitleText(scale: Scale, axisOption: AxisCfg): string {\n  return get(axisOption, ['title', 'text'], getName(scale));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}