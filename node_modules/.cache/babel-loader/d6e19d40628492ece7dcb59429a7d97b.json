{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { isNil } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { getMatrixByAngle } from '../util/matrix';\nimport Theme from '../util/theme';\nimport { formatPadding } from '../util/util';\n\nvar CrosshairBase =\n/** @class */\nfunction (_super) {\n  __extends(CrosshairBase, _super);\n\n  function CrosshairBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CrosshairBase.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n\n    return __assign(__assign({}, cfg), {\n      name: 'crosshair',\n      type: 'base',\n      line: {},\n      text: null,\n      textBackground: {},\n      capture: false,\n      defaultCfg: {\n        line: {\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor\n          }\n        },\n        text: {\n          position: 'start',\n          offset: 10,\n          autoRotate: false,\n          content: null,\n          style: {\n            fill: Theme.textColor,\n            textAlign: 'center',\n            textBaseline: 'middle',\n            fontFamily: Theme.fontFamily\n          }\n        },\n        textBackground: {\n          padding: 5,\n          style: {\n            stroke: Theme.lineColor\n          }\n        }\n      }\n    });\n  };\n\n  CrosshairBase.prototype.renderInner = function (group) {\n    if (this.get('line')) {\n      this.renderLine(group);\n    }\n\n    if (this.get('text')) {\n      this.renderText(group);\n      this.renderBackground(group);\n    }\n  };\n\n  CrosshairBase.prototype.renderText = function (group) {\n    var text = this.get('text');\n    var style = text.style,\n        autoRotate = text.autoRotate,\n        content = text.content;\n\n    if (!isNil(content)) {\n      var textPoint = this.getTextPoint();\n      var matrix = null;\n\n      if (autoRotate) {\n        var angle = this.getRotateAngle();\n        matrix = getMatrixByAngle(textPoint, angle);\n      }\n\n      this.addShape(group, {\n        type: 'text',\n        name: 'crosshair-text',\n        id: this.getElementId('text'),\n        attrs: __assign(__assign(__assign({}, textPoint), {\n          text: content,\n          matrix: matrix\n        }), style)\n      });\n    }\n  };\n\n  CrosshairBase.prototype.renderLine = function (group) {\n    var path = this.getLinePath();\n    var line = this.get('line');\n    var style = line.style;\n    this.addShape(group, {\n      type: 'path',\n      name: 'crosshair-line',\n      id: this.getElementId('line'),\n      attrs: __assign({\n        path: path\n      }, style)\n    });\n  }; // 绘制文本的背景\n\n\n  CrosshairBase.prototype.renderBackground = function (group) {\n    var textId = this.getElementId('text');\n    var textShape = group.findById(textId); // 查找文本\n\n    var textBackground = this.get('textBackground');\n\n    if (textBackground && textShape) {\n      var textBBox = textShape.getBBox();\n      var padding = formatPadding(textBackground.padding); // 用户传入的 padding 格式不定\n\n      var style = textBackground.style;\n      var backgroundShape = this.addShape(group, {\n        type: 'rect',\n        name: 'crosshair-text-background',\n        id: this.getElementId('text-background'),\n        attrs: __assign({\n          x: textBBox.x - padding[3],\n          y: textBBox.y - padding[0],\n          width: textBBox.width + padding[1] + padding[3],\n          height: textBBox.height + padding[0] + padding[2],\n          matrix: textShape.attr('matrix')\n        }, style)\n      });\n      backgroundShape.toBack();\n    }\n  };\n\n  return CrosshairBase;\n}(GroupComponent);\n\nexport default CrosshairBase;","map":{"version":3,"sources":["../../src/crosshair/base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { isNil } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { getMatrixByAngle } from '../util/matrix';\nimport Theme from '../util/theme';\nimport { formatPadding } from '../util/util';\nvar CrosshairBase = /** @class */ (function (_super) {\n    __extends(CrosshairBase, _super);\n    function CrosshairBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CrosshairBase.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        return __assign(__assign({}, cfg), { name: 'crosshair', type: 'base', line: {}, text: null, textBackground: {}, capture: false, defaultCfg: {\n                line: {\n                    style: {\n                        lineWidth: 1,\n                        stroke: Theme.lineColor,\n                    },\n                },\n                text: {\n                    position: 'start',\n                    offset: 10,\n                    autoRotate: false,\n                    content: null,\n                    style: {\n                        fill: Theme.textColor,\n                        textAlign: 'center',\n                        textBaseline: 'middle',\n                        fontFamily: Theme.fontFamily,\n                    },\n                },\n                textBackground: {\n                    padding: 5,\n                    style: {\n                        stroke: Theme.lineColor,\n                    },\n                },\n            } });\n    };\n    CrosshairBase.prototype.renderInner = function (group) {\n        if (this.get('line')) {\n            this.renderLine(group);\n        }\n        if (this.get('text')) {\n            this.renderText(group);\n            this.renderBackground(group);\n        }\n    };\n    CrosshairBase.prototype.renderText = function (group) {\n        var text = this.get('text');\n        var style = text.style, autoRotate = text.autoRotate, content = text.content;\n        if (!isNil(content)) {\n            var textPoint = this.getTextPoint();\n            var matrix = null;\n            if (autoRotate) {\n                var angle = this.getRotateAngle();\n                matrix = getMatrixByAngle(textPoint, angle);\n            }\n            this.addShape(group, {\n                type: 'text',\n                name: 'crosshair-text',\n                id: this.getElementId('text'),\n                attrs: __assign(__assign(__assign({}, textPoint), { text: content, matrix: matrix }), style),\n            });\n        }\n    };\n    CrosshairBase.prototype.renderLine = function (group) {\n        var path = this.getLinePath();\n        var line = this.get('line');\n        var style = line.style;\n        this.addShape(group, {\n            type: 'path',\n            name: 'crosshair-line',\n            id: this.getElementId('line'),\n            attrs: __assign({ path: path }, style),\n        });\n    };\n    // 绘制文本的背景\n    CrosshairBase.prototype.renderBackground = function (group) {\n        var textId = this.getElementId('text');\n        var textShape = group.findById(textId); // 查找文本\n        var textBackground = this.get('textBackground');\n        if (textBackground && textShape) {\n            var textBBox = textShape.getBBox();\n            var padding = formatPadding(textBackground.padding); // 用户传入的 padding 格式不定\n            var style = textBackground.style;\n            var backgroundShape = this.addShape(group, {\n                type: 'rect',\n                name: 'crosshair-text-background',\n                id: this.getElementId('text-background'),\n                attrs: __assign({ x: textBBox.x - padding[3], y: textBBox.y - padding[0], width: textBBox.width + padding[1] + padding[3], height: textBBox.height + padding[0] + padding[2], matrix: textShape.attr('matrix') }, style),\n            });\n            backgroundShape.toBack();\n        }\n    };\n    return CrosshairBase;\n}(GroupComponent));\nexport default CrosshairBase;\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"module"}