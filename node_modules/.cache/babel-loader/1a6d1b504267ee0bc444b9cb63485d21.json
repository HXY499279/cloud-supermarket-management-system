{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { clamp, deepMix, each, get, isArray, isNil, size } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { Trend } from '../trend/trend';\nimport { DEFAULT_HANDLER_STYLE, Handler } from './handler';\nimport { BACKGROUND_STYLE, DEFAULT_HANDLER_WIDTH, FOREGROUND_STYLE, HANDLER_STYLE, SLIDER_CHANGE, TEXT_STYLE } from './constant';\n\nvar Slider =\n/** @class */\nfunction (_super) {\n  __extends(Slider, _super);\n\n  function Slider() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.onMouseDown = function (target) {\n      return function (e) {\n        _this.currentTarget = target; // 取出原生事件\n\n        var event = e.originalEvent; // 2. 存储当前点击位置\n\n        event.stopPropagation();\n        event.preventDefault(); // 兼容移动端获取数据\n\n        _this.prevX = get(event, 'touches.0.pageX', event.pageX);\n        _this.prevY = get(event, 'touches.0.pageY', event.pageY); // 3. 开始滑动的时候，绑定 move 和 up 事件\n\n        var containerDOM = _this.getContainerDOM();\n\n        containerDOM.addEventListener('mousemove', _this.onMouseMove);\n        containerDOM.addEventListener('mouseup', _this.onMouseUp);\n        containerDOM.addEventListener('mouseleave', _this.onMouseUp); // 移动端事件\n\n        containerDOM.addEventListener('touchmove', _this.onMouseMove);\n        containerDOM.addEventListener('touchend', _this.onMouseUp);\n        containerDOM.addEventListener('touchcancel', _this.onMouseUp);\n      };\n    };\n\n    _this.onMouseMove = function (event) {\n      var width = _this.cfg.width;\n      var originValue = [_this.get('start'), _this.get('end')]; // 滑动过程中，计算偏移，更新滑块，然后 emit 数据出去\n\n      event.stopPropagation();\n      event.preventDefault();\n      var x = get(event, 'touches.0.pageX', event.pageX);\n      var y = get(event, 'touches.0.pageY', event.pageY); // 横向的 slider 只处理 x\n\n      var offsetX = x - _this.prevX;\n\n      var offsetXRange = _this.adjustOffsetRange(offsetX / width); // 更新 start end range 范围\n\n\n      _this.updateStartEnd(offsetXRange); // 更新 ui\n\n\n      _this.updateUI(_this.getElementByLocalId('foreground'), _this.getElementByLocalId('minText'), _this.getElementByLocalId('maxText'));\n\n      _this.prevX = x;\n      _this.prevY = y;\n\n      _this.draw(); // 因为存储的 start、end 可能不一定是按大小存储的，所以排序一下，对外是 end >= start\n\n\n      _this.emit(SLIDER_CHANGE, [_this.get('start'), _this.get('end')].sort());\n\n      _this.delegateEmit('valuechanged', {\n        originValue: originValue,\n        value: [_this.get('start'), _this.get('end')]\n      });\n    };\n\n    _this.onMouseUp = function () {\n      // 结束之后，取消绑定的事件\n      if (_this.currentTarget) {\n        _this.currentTarget = undefined;\n      }\n\n      var containerDOM = _this.getContainerDOM();\n\n      if (containerDOM) {\n        containerDOM.removeEventListener('mousemove', _this.onMouseMove);\n        containerDOM.removeEventListener('mouseup', _this.onMouseUp); // 防止滑动到 canvas 外部之后，状态丢失\n\n        containerDOM.removeEventListener('mouseleave', _this.onMouseUp); // 移动端事件\n\n        containerDOM.removeEventListener('touchmove', _this.onMouseMove);\n        containerDOM.removeEventListener('touchend', _this.onMouseUp);\n        containerDOM.removeEventListener('touchcancel', _this.onMouseUp);\n      }\n    };\n\n    return _this;\n  }\n\n  Slider.prototype.setRange = function (min, max) {\n    this.set('minLimit', min);\n    this.set('maxLimit', max);\n    var oldStart = this.get('start');\n    var oldEnd = this.get('end');\n    var newStart = clamp(oldStart, min, max);\n    var newEnd = clamp(oldEnd, min, max);\n\n    if (!this.get('isInit') && (oldStart !== newStart || oldEnd !== newEnd)) {\n      this.setValue([newStart, newEnd]);\n    }\n  };\n\n  Slider.prototype.getRange = function () {\n    return {\n      min: this.get('minLimit') || 0,\n      max: this.get('maxLimit') || 1\n    };\n  };\n\n  Slider.prototype.setValue = function (value) {\n    var range = this.getRange();\n\n    if (isArray(value) && value.length === 2) {\n      var originValue = [this.get('start'), this.get('end')];\n      this.update({\n        start: clamp(value[0], range.min, range.max),\n        end: clamp(value[1], range.min, range.max)\n      });\n\n      if (!this.get('updateAutoRender')) {\n        this.render();\n      }\n\n      this.delegateEmit('valuechanged', {\n        originValue: originValue,\n        value: value\n      });\n    }\n  };\n\n  Slider.prototype.getValue = function () {\n    return [this.get('start'), this.get('end')];\n  };\n\n  Slider.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n\n    return __assign(__assign({}, cfg), {\n      name: 'slider',\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 16,\n      backgroundStyle: {},\n      foregroundStyle: {},\n      handlerStyle: {},\n      textStyle: {},\n      defaultCfg: {\n        backgroundStyle: BACKGROUND_STYLE,\n        foregroundStyle: FOREGROUND_STYLE,\n        handlerStyle: HANDLER_STYLE,\n        textStyle: TEXT_STYLE\n      }\n    });\n  };\n\n  Slider.prototype.update = function (cfg) {\n    var start = cfg.start,\n        end = cfg.end;\n\n    var validCfg = __assign({}, cfg);\n\n    if (!isNil(start)) {\n      validCfg.start = clamp(start, 0, 1);\n    }\n\n    if (!isNil(end)) {\n      validCfg.end = clamp(end, 0, 1);\n    }\n\n    _super.prototype.update.call(this, validCfg);\n\n    this.minHandler = this.getChildComponentById(this.getElementId('minHandler'));\n    this.maxHandler = this.getChildComponentById(this.getElementId('maxHandler'));\n    this.trend = this.getChildComponentById(this.getElementId('trend'));\n  };\n\n  Slider.prototype.init = function () {\n    this.set('start', clamp(this.get('start'), 0, 1));\n    this.set('end', clamp(this.get('end'), 0, 1));\n\n    _super.prototype.init.call(this);\n  };\n\n  Slider.prototype.render = function () {\n    _super.prototype.render.call(this);\n\n    this.updateUI(this.getElementByLocalId('foreground'), this.getElementByLocalId('minText'), this.getElementByLocalId('maxText'));\n  };\n\n  Slider.prototype.renderInner = function (group) {\n    var _a = this.cfg,\n        start = _a.start,\n        end = _a.end,\n        width = _a.width,\n        height = _a.height,\n        _b = _a.trendCfg,\n        trendCfg = _b === void 0 ? {} : _b,\n        minText = _a.minText,\n        maxText = _a.maxText,\n        _c = _a.backgroundStyle,\n        backgroundStyle = _c === void 0 ? {} : _c,\n        _d = _a.foregroundStyle,\n        foregroundStyle = _d === void 0 ? {} : _d,\n        _e = _a.textStyle,\n        textStyle = _e === void 0 ? {} : _e;\n    var handlerStyle = deepMix({}, DEFAULT_HANDLER_STYLE, this.cfg.handlerStyle);\n    var min = start * width;\n    var max = end * width; // 趋势图数据\n\n    if (size(get(trendCfg, 'data'))) {\n      this.trend = this.addComponent(group, __assign({\n        component: Trend,\n        id: this.getElementId('trend'),\n        x: 0,\n        y: 0,\n        width: width,\n        height: height\n      }, trendCfg));\n    } // 1. 背景\n\n\n    this.addShape(group, {\n      id: this.getElementId('background'),\n      type: 'rect',\n      attrs: __assign({\n        x: 0,\n        y: 0,\n        width: width,\n        height: height\n      }, backgroundStyle)\n    }); // 2. 左右文字\n\n    var minTextShape = this.addShape(group, {\n      id: this.getElementId('minText'),\n      type: 'text',\n      attrs: __assign({\n        // x: 0,\n        y: height / 2,\n        textAlign: 'right',\n        text: minText,\n        silent: false\n      }, textStyle)\n    });\n    var maxTextShape = this.addShape(group, {\n      id: this.getElementId('maxText'),\n      type: 'text',\n      attrs: __assign({\n        // x: 0,\n        y: height / 2,\n        textAlign: 'left',\n        text: maxText,\n        silent: false\n      }, textStyle)\n    }); // 3. 前景 选中背景框\n\n    var foregroundShape = this.addShape(group, {\n      id: this.getElementId('foreground'),\n      name: 'foreground',\n      type: 'rect',\n      attrs: __assign({\n        // x: 0,\n        y: 0,\n        // width: 0,\n        height: height\n      }, foregroundStyle)\n    }); // 滑块相关的大小信息\n\n    var handlerWidth = get(handlerStyle, 'width', DEFAULT_HANDLER_WIDTH);\n    var handlerHeight = get(handlerStyle, 'height', 24); // 4. 左右滑块\n\n    this.minHandler = this.addComponent(group, {\n      component: Handler,\n      id: this.getElementId('minHandler'),\n      name: 'handler-min',\n      x: 0,\n      y: (height - handlerHeight) / 2,\n      width: handlerWidth,\n      height: handlerHeight,\n      cursor: 'ew-resize',\n      style: handlerStyle\n    });\n    this.maxHandler = this.addComponent(group, {\n      component: Handler,\n      id: this.getElementId('maxHandler'),\n      name: 'handler-max',\n      x: 0,\n      y: (height - handlerHeight) / 2,\n      width: handlerWidth,\n      height: handlerHeight,\n      cursor: 'ew-resize',\n      style: handlerStyle\n    });\n  };\n\n  Slider.prototype.applyOffset = function () {\n    this.moveElementTo(this.get('group'), {\n      x: this.get('x'),\n      y: this.get('y')\n    });\n  };\n\n  Slider.prototype.initEvent = function () {\n    this.bindEvents();\n  };\n\n  Slider.prototype.updateUI = function (foregroundShape, minTextShape, maxTextShape) {\n    var _a = this.cfg,\n        start = _a.start,\n        end = _a.end,\n        width = _a.width,\n        minText = _a.minText,\n        maxText = _a.maxText,\n        handlerStyle = _a.handlerStyle,\n        height = _a.height;\n    var min = start * width;\n    var max = end * width;\n\n    if (this.trend) {\n      this.trend.update({\n        width: width,\n        height: height\n      });\n\n      if (!this.get('updateAutoRender')) {\n        this.trend.render();\n      }\n    } // 1. foreground\n\n\n    foregroundShape.attr('x', min);\n    foregroundShape.attr('width', max - min); // 滑块相关的大小信息\n\n    var handlerWidth = get(handlerStyle, 'width', DEFAULT_HANDLER_WIDTH); // 设置文本\n\n    minTextShape.attr('text', minText);\n    maxTextShape.attr('text', maxText);\n\n    var _b = this._dodgeText([min, max], minTextShape, maxTextShape),\n        minAttrs = _b[0],\n        maxAttrs = _b[1]; // 2. 左侧滑块和文字位置\n\n\n    if (this.minHandler) {\n      this.minHandler.update({\n        x: min - handlerWidth / 2\n      });\n\n      if (!this.get('updateAutoRender')) {\n        this.minHandler.render();\n      }\n    }\n\n    each(minAttrs, function (v, k) {\n      return minTextShape.attr(k, v);\n    }); // 3. 右侧滑块和文字位置\n\n    if (this.maxHandler) {\n      this.maxHandler.update({\n        x: max - handlerWidth / 2\n      });\n\n      if (!this.get('updateAutoRender')) {\n        this.maxHandler.render();\n      }\n    }\n\n    each(maxAttrs, function (v, k) {\n      return maxTextShape.attr(k, v);\n    });\n  };\n\n  Slider.prototype.bindEvents = function () {\n    var group = this.get('group');\n    group.on('handler-min:mousedown', this.onMouseDown('minHandler'));\n    group.on('handler-min:touchstart', this.onMouseDown('minHandler')); // 2. 右滑块的滑动\n\n    group.on('handler-max:mousedown', this.onMouseDown('maxHandler'));\n    group.on('handler-max:touchstart', this.onMouseDown('maxHandler')); // 3. 前景选中区域\n\n    var foreground = group.findById(this.getElementId('foreground'));\n    foreground.on('mousedown', this.onMouseDown('foreground'));\n    foreground.on('touchstart', this.onMouseDown('foreground'));\n  };\n  /**\n   * 调整 offsetRange，因为一些范围的限制\n   * @param offsetRange\n   */\n\n\n  Slider.prototype.adjustOffsetRange = function (offsetRange) {\n    var _a = this.cfg,\n        start = _a.start,\n        end = _a.end; // 针对不同的滑动组件，处理的方式不同\n\n    switch (this.currentTarget) {\n      case 'minHandler':\n        {\n          var min = 0 - start;\n          var max = 1 - start;\n          return Math.min(max, Math.max(min, offsetRange));\n        }\n\n      case 'maxHandler':\n        {\n          var min = 0 - end;\n          var max = 1 - end;\n          return Math.min(max, Math.max(min, offsetRange));\n        }\n\n      case 'foreground':\n        {\n          var min = 0 - start;\n          var max = 1 - end;\n          return Math.min(max, Math.max(min, offsetRange));\n        }\n    }\n  };\n\n  Slider.prototype.updateStartEnd = function (offsetRange) {\n    var _a = this.cfg,\n        start = _a.start,\n        end = _a.end; // 操作不同的组件，反馈不一样\n\n    switch (this.currentTarget) {\n      case 'minHandler':\n        start += offsetRange;\n        break;\n\n      case 'maxHandler':\n        end += offsetRange;\n        break;\n\n      case 'foreground':\n        start += offsetRange;\n        end += offsetRange;\n        break;\n    }\n\n    this.set('start', start);\n    this.set('end', end);\n  };\n  /**\n   * 调整 text 的位置，自动躲避\n   * 根据位置，调整返回新的位置\n   * @param range\n   */\n\n\n  Slider.prototype._dodgeText = function (range, minTextShape, maxTextShape) {\n    var _a, _b;\n\n    var _c = this.cfg,\n        handlerStyle = _c.handlerStyle,\n        width = _c.width;\n    var PADDING = 2;\n    var handlerWidth = get(handlerStyle, 'width', DEFAULT_HANDLER_WIDTH);\n    var min = range[0],\n        max = range[1];\n    var sorted = false; // 如果交换了位置，则对应的 min max 也交互\n\n    if (min > max) {\n      _a = [max, min], min = _a[0], max = _a[1];\n      _b = [maxTextShape, minTextShape], minTextShape = _b[0], maxTextShape = _b[1];\n      sorted = true;\n    } // 避让规则，优先显示在两侧，只有显示不下的时候，才显示在中间\n\n\n    var minBBox = minTextShape.getBBox();\n    var maxBBox = maxTextShape.getBBox();\n    var minAttrs = minBBox.width > min - PADDING ? {\n      x: min + handlerWidth / 2 + PADDING,\n      textAlign: 'left'\n    } : {\n      x: min - handlerWidth / 2 - PADDING,\n      textAlign: 'right'\n    };\n    var maxAttrs = maxBBox.width > width - max - PADDING ? {\n      x: max - handlerWidth / 2 - PADDING,\n      textAlign: 'right'\n    } : {\n      x: max + handlerWidth / 2 + PADDING,\n      textAlign: 'left'\n    };\n    return !sorted ? [minAttrs, maxAttrs] : [maxAttrs, minAttrs];\n  };\n\n  Slider.prototype.draw = function () {\n    var container = this.get('container');\n    var canvas = container && container.get('canvas');\n\n    if (canvas) {\n      canvas.draw();\n    }\n  };\n\n  Slider.prototype.getContainerDOM = function () {\n    var container = this.get('container');\n    var canvas = container && container.get('canvas');\n    return canvas && canvas.get('container');\n  };\n\n  return Slider;\n}(GroupComponent);\n\nexport { Slider };\nexport default Slider;","map":{"version":3,"sources":["../../src/slider/slider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { clamp, deepMix, each, get, isArray, isNil, size } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { Trend } from '../trend/trend';\nimport { DEFAULT_HANDLER_STYLE, Handler } from './handler';\nimport { BACKGROUND_STYLE, DEFAULT_HANDLER_WIDTH, FOREGROUND_STYLE, HANDLER_STYLE, SLIDER_CHANGE, TEXT_STYLE, } from './constant';\nvar Slider = /** @class */ (function (_super) {\n    __extends(Slider, _super);\n    function Slider() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.onMouseDown = function (target) { return function (e) {\n            _this.currentTarget = target;\n            // 取出原生事件\n            var event = e.originalEvent;\n            // 2. 存储当前点击位置\n            event.stopPropagation();\n            event.preventDefault();\n            // 兼容移动端获取数据\n            _this.prevX = get(event, 'touches.0.pageX', event.pageX);\n            _this.prevY = get(event, 'touches.0.pageY', event.pageY);\n            // 3. 开始滑动的时候，绑定 move 和 up 事件\n            var containerDOM = _this.getContainerDOM();\n            containerDOM.addEventListener('mousemove', _this.onMouseMove);\n            containerDOM.addEventListener('mouseup', _this.onMouseUp);\n            containerDOM.addEventListener('mouseleave', _this.onMouseUp);\n            // 移动端事件\n            containerDOM.addEventListener('touchmove', _this.onMouseMove);\n            containerDOM.addEventListener('touchend', _this.onMouseUp);\n            containerDOM.addEventListener('touchcancel', _this.onMouseUp);\n        }; };\n        _this.onMouseMove = function (event) {\n            var width = _this.cfg.width;\n            var originValue = [_this.get('start'), _this.get('end')];\n            // 滑动过程中，计算偏移，更新滑块，然后 emit 数据出去\n            event.stopPropagation();\n            event.preventDefault();\n            var x = get(event, 'touches.0.pageX', event.pageX);\n            var y = get(event, 'touches.0.pageY', event.pageY);\n            // 横向的 slider 只处理 x\n            var offsetX = x - _this.prevX;\n            var offsetXRange = _this.adjustOffsetRange(offsetX / width);\n            // 更新 start end range 范围\n            _this.updateStartEnd(offsetXRange);\n            // 更新 ui\n            _this.updateUI(_this.getElementByLocalId('foreground'), _this.getElementByLocalId('minText'), _this.getElementByLocalId('maxText'));\n            _this.prevX = x;\n            _this.prevY = y;\n            _this.draw();\n            // 因为存储的 start、end 可能不一定是按大小存储的，所以排序一下，对外是 end >= start\n            _this.emit(SLIDER_CHANGE, [_this.get('start'), _this.get('end')].sort());\n            _this.delegateEmit('valuechanged', {\n                originValue: originValue,\n                value: [_this.get('start'), _this.get('end')],\n            });\n        };\n        _this.onMouseUp = function () {\n            // 结束之后，取消绑定的事件\n            if (_this.currentTarget) {\n                _this.currentTarget = undefined;\n            }\n            var containerDOM = _this.getContainerDOM();\n            if (containerDOM) {\n                containerDOM.removeEventListener('mousemove', _this.onMouseMove);\n                containerDOM.removeEventListener('mouseup', _this.onMouseUp);\n                // 防止滑动到 canvas 外部之后，状态丢失\n                containerDOM.removeEventListener('mouseleave', _this.onMouseUp);\n                // 移动端事件\n                containerDOM.removeEventListener('touchmove', _this.onMouseMove);\n                containerDOM.removeEventListener('touchend', _this.onMouseUp);\n                containerDOM.removeEventListener('touchcancel', _this.onMouseUp);\n            }\n        };\n        return _this;\n    }\n    Slider.prototype.setRange = function (min, max) {\n        this.set('minLimit', min);\n        this.set('maxLimit', max);\n        var oldStart = this.get('start');\n        var oldEnd = this.get('end');\n        var newStart = clamp(oldStart, min, max);\n        var newEnd = clamp(oldEnd, min, max);\n        if (!this.get('isInit') && (oldStart !== newStart || oldEnd !== newEnd)) {\n            this.setValue([newStart, newEnd]);\n        }\n    };\n    Slider.prototype.getRange = function () {\n        return {\n            min: this.get('minLimit') || 0,\n            max: this.get('maxLimit') || 1,\n        };\n    };\n    Slider.prototype.setValue = function (value) {\n        var range = this.getRange();\n        if (isArray(value) && value.length === 2) {\n            var originValue = [this.get('start'), this.get('end')];\n            this.update({\n                start: clamp(value[0], range.min, range.max),\n                end: clamp(value[1], range.min, range.max),\n            });\n            if (!this.get('updateAutoRender')) {\n                this.render();\n            }\n            this.delegateEmit('valuechanged', {\n                originValue: originValue,\n                value: value,\n            });\n        }\n    };\n    Slider.prototype.getValue = function () {\n        return [this.get('start'), this.get('end')];\n    };\n    Slider.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        return __assign(__assign({}, cfg), { name: 'slider', x: 0, y: 0, width: 100, height: 16, backgroundStyle: {}, foregroundStyle: {}, handlerStyle: {}, textStyle: {}, defaultCfg: {\n                backgroundStyle: BACKGROUND_STYLE,\n                foregroundStyle: FOREGROUND_STYLE,\n                handlerStyle: HANDLER_STYLE,\n                textStyle: TEXT_STYLE,\n            } });\n    };\n    Slider.prototype.update = function (cfg) {\n        var start = cfg.start, end = cfg.end;\n        var validCfg = __assign({}, cfg);\n        if (!isNil(start)) {\n            validCfg.start = clamp(start, 0, 1);\n        }\n        if (!isNil(end)) {\n            validCfg.end = clamp(end, 0, 1);\n        }\n        _super.prototype.update.call(this, validCfg);\n        this.minHandler = this.getChildComponentById(this.getElementId('minHandler'));\n        this.maxHandler = this.getChildComponentById(this.getElementId('maxHandler'));\n        this.trend = this.getChildComponentById(this.getElementId('trend'));\n    };\n    Slider.prototype.init = function () {\n        this.set('start', clamp(this.get('start'), 0, 1));\n        this.set('end', clamp(this.get('end'), 0, 1));\n        _super.prototype.init.call(this);\n    };\n    Slider.prototype.render = function () {\n        _super.prototype.render.call(this);\n        this.updateUI(this.getElementByLocalId('foreground'), this.getElementByLocalId('minText'), this.getElementByLocalId('maxText'));\n    };\n    Slider.prototype.renderInner = function (group) {\n        var _a = this.cfg, start = _a.start, end = _a.end, width = _a.width, height = _a.height, _b = _a.trendCfg, trendCfg = _b === void 0 ? {} : _b, minText = _a.minText, maxText = _a.maxText, _c = _a.backgroundStyle, backgroundStyle = _c === void 0 ? {} : _c, _d = _a.foregroundStyle, foregroundStyle = _d === void 0 ? {} : _d, _e = _a.textStyle, textStyle = _e === void 0 ? {} : _e;\n        var handlerStyle = deepMix({}, DEFAULT_HANDLER_STYLE, this.cfg.handlerStyle);\n        var min = start * width;\n        var max = end * width;\n        // 趋势图数据\n        if (size(get(trendCfg, 'data'))) {\n            this.trend = this.addComponent(group, __assign({ component: Trend, id: this.getElementId('trend'), x: 0, y: 0, width: width,\n                height: height }, trendCfg));\n        }\n        // 1. 背景\n        this.addShape(group, {\n            id: this.getElementId('background'),\n            type: 'rect',\n            attrs: __assign({ x: 0, y: 0, width: width,\n                height: height }, backgroundStyle),\n        });\n        // 2. 左右文字\n        var minTextShape = this.addShape(group, {\n            id: this.getElementId('minText'),\n            type: 'text',\n            attrs: __assign({ \n                // x: 0,\n                y: height / 2, textAlign: 'right', text: minText, silent: false }, textStyle),\n        });\n        var maxTextShape = this.addShape(group, {\n            id: this.getElementId('maxText'),\n            type: 'text',\n            attrs: __assign({ \n                // x: 0,\n                y: height / 2, textAlign: 'left', text: maxText, silent: false }, textStyle),\n        });\n        // 3. 前景 选中背景框\n        var foregroundShape = this.addShape(group, {\n            id: this.getElementId('foreground'),\n            name: 'foreground',\n            type: 'rect',\n            attrs: __assign({ \n                // x: 0,\n                y: 0, \n                // width: 0,\n                height: height }, foregroundStyle),\n        });\n        // 滑块相关的大小信息\n        var handlerWidth = get(handlerStyle, 'width', DEFAULT_HANDLER_WIDTH);\n        var handlerHeight = get(handlerStyle, 'height', 24);\n        // 4. 左右滑块\n        this.minHandler = this.addComponent(group, {\n            component: Handler,\n            id: this.getElementId('minHandler'),\n            name: 'handler-min',\n            x: 0,\n            y: (height - handlerHeight) / 2,\n            width: handlerWidth,\n            height: handlerHeight,\n            cursor: 'ew-resize',\n            style: handlerStyle,\n        });\n        this.maxHandler = this.addComponent(group, {\n            component: Handler,\n            id: this.getElementId('maxHandler'),\n            name: 'handler-max',\n            x: 0,\n            y: (height - handlerHeight) / 2,\n            width: handlerWidth,\n            height: handlerHeight,\n            cursor: 'ew-resize',\n            style: handlerStyle,\n        });\n    };\n    Slider.prototype.applyOffset = function () {\n        this.moveElementTo(this.get('group'), {\n            x: this.get('x'),\n            y: this.get('y'),\n        });\n    };\n    Slider.prototype.initEvent = function () {\n        this.bindEvents();\n    };\n    Slider.prototype.updateUI = function (foregroundShape, minTextShape, maxTextShape) {\n        var _a = this.cfg, start = _a.start, end = _a.end, width = _a.width, minText = _a.minText, maxText = _a.maxText, handlerStyle = _a.handlerStyle, height = _a.height;\n        var min = start * width;\n        var max = end * width;\n        if (this.trend) {\n            this.trend.update({\n                width: width,\n                height: height,\n            });\n            if (!this.get('updateAutoRender')) {\n                this.trend.render();\n            }\n        }\n        // 1. foreground\n        foregroundShape.attr('x', min);\n        foregroundShape.attr('width', max - min);\n        // 滑块相关的大小信息\n        var handlerWidth = get(handlerStyle, 'width', DEFAULT_HANDLER_WIDTH);\n        // 设置文本\n        minTextShape.attr('text', minText);\n        maxTextShape.attr('text', maxText);\n        var _b = this._dodgeText([min, max], minTextShape, maxTextShape), minAttrs = _b[0], maxAttrs = _b[1];\n        // 2. 左侧滑块和文字位置\n        if (this.minHandler) {\n            this.minHandler.update({\n                x: min - handlerWidth / 2,\n            });\n            if (!this.get('updateAutoRender')) {\n                this.minHandler.render();\n            }\n        }\n        each(minAttrs, function (v, k) { return minTextShape.attr(k, v); });\n        // 3. 右侧滑块和文字位置\n        if (this.maxHandler) {\n            this.maxHandler.update({\n                x: max - handlerWidth / 2,\n            });\n            if (!this.get('updateAutoRender')) {\n                this.maxHandler.render();\n            }\n        }\n        each(maxAttrs, function (v, k) { return maxTextShape.attr(k, v); });\n    };\n    Slider.prototype.bindEvents = function () {\n        var group = this.get('group');\n        group.on('handler-min:mousedown', this.onMouseDown('minHandler'));\n        group.on('handler-min:touchstart', this.onMouseDown('minHandler'));\n        // 2. 右滑块的滑动\n        group.on('handler-max:mousedown', this.onMouseDown('maxHandler'));\n        group.on('handler-max:touchstart', this.onMouseDown('maxHandler'));\n        // 3. 前景选中区域\n        var foreground = group.findById(this.getElementId('foreground'));\n        foreground.on('mousedown', this.onMouseDown('foreground'));\n        foreground.on('touchstart', this.onMouseDown('foreground'));\n    };\n    /**\n     * 调整 offsetRange，因为一些范围的限制\n     * @param offsetRange\n     */\n    Slider.prototype.adjustOffsetRange = function (offsetRange) {\n        var _a = this.cfg, start = _a.start, end = _a.end;\n        // 针对不同的滑动组件，处理的方式不同\n        switch (this.currentTarget) {\n            case 'minHandler': {\n                var min = 0 - start;\n                var max = 1 - start;\n                return Math.min(max, Math.max(min, offsetRange));\n            }\n            case 'maxHandler': {\n                var min = 0 - end;\n                var max = 1 - end;\n                return Math.min(max, Math.max(min, offsetRange));\n            }\n            case 'foreground': {\n                var min = 0 - start;\n                var max = 1 - end;\n                return Math.min(max, Math.max(min, offsetRange));\n            }\n        }\n    };\n    Slider.prototype.updateStartEnd = function (offsetRange) {\n        var _a = this.cfg, start = _a.start, end = _a.end;\n        // 操作不同的组件，反馈不一样\n        switch (this.currentTarget) {\n            case 'minHandler':\n                start += offsetRange;\n                break;\n            case 'maxHandler':\n                end += offsetRange;\n                break;\n            case 'foreground':\n                start += offsetRange;\n                end += offsetRange;\n                break;\n        }\n        this.set('start', start);\n        this.set('end', end);\n    };\n    /**\n     * 调整 text 的位置，自动躲避\n     * 根据位置，调整返回新的位置\n     * @param range\n     */\n    Slider.prototype._dodgeText = function (range, minTextShape, maxTextShape) {\n        var _a, _b;\n        var _c = this.cfg, handlerStyle = _c.handlerStyle, width = _c.width;\n        var PADDING = 2;\n        var handlerWidth = get(handlerStyle, 'width', DEFAULT_HANDLER_WIDTH);\n        var min = range[0], max = range[1];\n        var sorted = false;\n        // 如果交换了位置，则对应的 min max 也交互\n        if (min > max) {\n            _a = [max, min], min = _a[0], max = _a[1];\n            _b = [maxTextShape, minTextShape], minTextShape = _b[0], maxTextShape = _b[1];\n            sorted = true;\n        }\n        // 避让规则，优先显示在两侧，只有显示不下的时候，才显示在中间\n        var minBBox = minTextShape.getBBox();\n        var maxBBox = maxTextShape.getBBox();\n        var minAttrs = minBBox.width > min - PADDING\n            ? { x: min + handlerWidth / 2 + PADDING, textAlign: 'left' }\n            : { x: min - handlerWidth / 2 - PADDING, textAlign: 'right' };\n        var maxAttrs = maxBBox.width > width - max - PADDING\n            ? { x: max - handlerWidth / 2 - PADDING, textAlign: 'right' }\n            : { x: max + handlerWidth / 2 + PADDING, textAlign: 'left' };\n        return !sorted ? [minAttrs, maxAttrs] : [maxAttrs, minAttrs];\n    };\n    Slider.prototype.draw = function () {\n        var container = this.get('container');\n        var canvas = container && container.get('canvas');\n        if (canvas) {\n            canvas.draw();\n        }\n    };\n    Slider.prototype.getContainerDOM = function () {\n        var container = this.get('container');\n        var canvas = container && container.get('canvas');\n        return canvas && canvas.get('container');\n    };\n    return Slider;\n}(GroupComponent));\nexport { Slider };\nexport default Slider;\n//# sourceMappingURL=slider.js.map"]},"metadata":{},"sourceType":"module"}