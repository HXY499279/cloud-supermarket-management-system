{"ast":null,"code":"import { MIN_CHART_HEIGHT, MIN_CHART_WIDTH } from '../constant';\n/**\n * get the element's bounding size\n * @param ele dom element\n * @returns the element width and height\n */\n\nfunction getElementSize(ele) {\n  var style = getComputedStyle(ele);\n  return {\n    width: (ele.clientWidth || parseInt(style.width, 10)) - parseInt(style.paddingLeft, 10) - parseInt(style.paddingRight, 10),\n    height: (ele.clientHeight || parseInt(style.height, 10)) - parseInt(style.paddingTop, 10) - parseInt(style.paddingBottom, 10)\n  };\n}\n/**\n * is value a valid number\n * @param v the input value\n * @returns whether it is a number\n */\n\n\nfunction isNumber(v) {\n  return typeof v === 'number' && !isNaN(v);\n}\n/**\n * @ignore\n * calculate the chart size\n * @param ele DOM element\n * @param autoFit should auto fit\n * @param width chart width which is set by user\n * @param height chart height which is set by user\n * @returns the chart width and height\n */\n\n\nexport function getChartSize(ele, autoFit, width, height) {\n  var w = width;\n  var h = height;\n\n  if (autoFit) {\n    var size = getElementSize(ele);\n    w = size.width ? size.width : w;\n    h = size.height ? size.height : h;\n  }\n\n  return {\n    width: Math.max(isNumber(w) ? w : MIN_CHART_WIDTH, MIN_CHART_WIDTH),\n    height: Math.max(isNumber(h) ? h : MIN_CHART_HEIGHT, MIN_CHART_HEIGHT)\n  };\n}\n/**\n * @ignore\n * remove html element from its parent\n * @param dom\n */\n\nexport function removeDom(dom) {\n  var parent = dom.parentNode;\n\n  if (parent) {\n    parent.removeChild(dom);\n  }\n}\n/** @ignore */\n\nexport { createDom, modifyCSS } from '@antv/dom-util';","map":{"version":3,"sources":["../../src/util/dom.ts"],"names":[],"mappings":"AAAA,SAAS,gBAAT,EAA2B,eAA3B,QAAkD,aAAlD;AAGA;;;;AAIG;;AACH,SAAS,cAAT,CAAwB,GAAxB,EAAwC;AACtC,MAAM,KAAK,GAAG,gBAAgB,CAAC,GAAD,CAA9B;AAEA,SAAO;AACL,IAAA,KAAK,EACH,CAAC,GAAG,CAAC,WAAJ,IAAmB,QAAQ,CAAC,KAAK,CAAC,KAAP,EAAc,EAAd,CAA5B,IACA,QAAQ,CAAC,KAAK,CAAC,WAAP,EAAoB,EAApB,CADR,GAEA,QAAQ,CAAC,KAAK,CAAC,YAAP,EAAqB,EAArB,CAJL;AAKL,IAAA,MAAM,EACJ,CAAC,GAAG,CAAC,YAAJ,IAAoB,QAAQ,CAAC,KAAK,CAAC,MAAP,EAAe,EAAf,CAA7B,IACA,QAAQ,CAAC,KAAK,CAAC,UAAP,EAAmB,EAAnB,CADR,GAEA,QAAQ,CAAC,KAAK,CAAC,aAAP,EAAsB,EAAtB;AARL,GAAP;AAUD;AAED;;;;AAIG;;;AACH,SAAS,QAAT,CAAkB,CAAlB,EAAwB;AACtB,SAAO,OAAO,CAAP,KAAa,QAAb,IAAyB,CAAC,KAAK,CAAC,CAAD,CAAtC;AACD;AAED;;;;;;;;AAQG;;;AACH,OAAM,SAAU,YAAV,CAAuB,GAAvB,EAAyC,OAAzC,EAA2D,KAA3D,EAA0E,MAA1E,EAAwF;AAC5F,MAAI,CAAC,GAAG,KAAR;AACA,MAAI,CAAC,GAAG,MAAR;;AAEA,MAAI,OAAJ,EAAa;AACX,QAAM,IAAI,GAAG,cAAc,CAAC,GAAD,CAA3B;AAEA,IAAA,CAAC,GAAG,IAAI,CAAC,KAAL,GAAa,IAAI,CAAC,KAAlB,GAA0B,CAA9B;AACA,IAAA,CAAC,GAAG,IAAI,CAAC,MAAL,GAAc,IAAI,CAAC,MAAnB,GAA4B,CAAhC;AACD;;AAED,SAAO;AACL,IAAA,KAAK,EAAE,IAAI,CAAC,GAAL,CAAS,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAd,GAAkB,eAA3B,EAA4C,eAA5C,CADF;AAEL,IAAA,MAAM,EAAE,IAAI,CAAC,GAAL,CAAS,QAAQ,CAAC,CAAD,CAAR,GAAc,CAAd,GAAkB,gBAA3B,EAA6C,gBAA7C;AAFH,GAAP;AAID;AAED;;;;AAIG;;AACH,OAAM,SAAU,SAAV,CAAoB,GAApB,EAAoC;AACxC,MAAM,MAAM,GAAG,GAAG,CAAC,UAAnB;;AAEA,MAAI,MAAJ,EAAY;AACV,IAAA,MAAM,CAAC,WAAP,CAAmB,GAAnB;AACD;AACF;AAED;;AACA,SAAS,SAAT,EAAoB,SAApB,QAAqC,gBAArC","sourcesContent":["import { MIN_CHART_HEIGHT, MIN_CHART_WIDTH } from '../constant';\nimport { Size } from '../interface';\n\n/**\n * get the element's bounding size\n * @param ele dom element\n * @returns the element width and height\n */\nfunction getElementSize(ele: HTMLElement): Size {\n  const style = getComputedStyle(ele);\n\n  return {\n    width:\n      (ele.clientWidth || parseInt(style.width, 10)) -\n      parseInt(style.paddingLeft, 10) -\n      parseInt(style.paddingRight, 10),\n    height:\n      (ele.clientHeight || parseInt(style.height, 10)) -\n      parseInt(style.paddingTop, 10) -\n      parseInt(style.paddingBottom, 10),\n  };\n}\n\n/**\n * is value a valid number\n * @param v the input value\n * @returns whether it is a number\n */\nfunction isNumber(v: any): boolean {\n  return typeof v === 'number' && !isNaN(v);\n}\n\n/**\n * @ignore\n * calculate the chart size\n * @param ele DOM element\n * @param autoFit should auto fit\n * @param width chart width which is set by user\n * @param height chart height which is set by user\n * @returns the chart width and height\n */\nexport function getChartSize(ele: HTMLElement, autoFit: boolean, width: number, height: number): Size {\n  let w = width;\n  let h = height;\n\n  if (autoFit) {\n    const size = getElementSize(ele);\n\n    w = size.width ? size.width : w;\n    h = size.height ? size.height : h;\n  }\n\n  return {\n    width: Math.max(isNumber(w) ? w : MIN_CHART_WIDTH, MIN_CHART_WIDTH),\n    height: Math.max(isNumber(h) ? h : MIN_CHART_HEIGHT, MIN_CHART_HEIGHT),\n  };\n}\n\n/**\n * @ignore\n * remove html element from its parent\n * @param dom\n */\nexport function removeDom(dom: HTMLElement) {\n  const parent = dom.parentNode;\n\n  if (parent) {\n    parent.removeChild(dom);\n  }\n}\n\n/** @ignore */\nexport { createDom, modifyCSS } from '@antv/dom-util';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}