{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { getCurrentElement, isElementChange } from '../util';\nimport StateBase from './state-base';\n/**\n * 单状态量的 Action 基类\n * @class\n * @ignore\n */\n\nvar ElementSingleState =\n/** @class */\nfunction (_super) {\n  __extends(ElementSingleState, _super);\n\n  function ElementSingleState() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ElementSingleState.prototype.setStateEnable = function (enable) {\n    var element = getCurrentElement(this.context);\n\n    if (element) {\n      // 在同一个 element 内部移动，忽视 label 和 shape 之间\n      if (!isElementChange(this.context)) {\n        return;\n      } // 仅支持单个状态量的元素，只能由 element 触发\n\n\n      if (enable) {\n        this.clear();\n        this.setElementState(element, true);\n      } else if (this.hasState(element)) {\n        this.setElementState(element, false);\n      }\n    }\n  };\n  /**\n   * 切换选中，只允许选中一个\n   */\n\n\n  ElementSingleState.prototype.toggle = function () {\n    var element = getCurrentElement(this.context);\n\n    if (element) {\n      var hasState = this.hasState(element); // 提前获取状态\n\n      if (!hasState) {\n        this.clear();\n      }\n\n      this.setElementState(element, !hasState);\n    }\n  };\n  /**\n   * 取消当前时间影响的状态\n   */\n\n\n  ElementSingleState.prototype.reset = function () {\n    this.setStateEnable(false);\n  };\n\n  return ElementSingleState;\n}(StateBase);\n\nexport default ElementSingleState;","map":{"version":3,"sources":["../../../../src/interaction/action/element/single-state.ts"],"names":[],"mappings":";AAAA,SAAS,iBAAT,EAA4B,eAA5B,QAAmD,SAAnD;AACA,OAAO,SAAP,MAAsB,cAAtB;AAEA;;;;AAIG;;AACH,IAAA,kBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiC,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;;AAAjC,WAAA,kBAAA,GAAA;;AAsCC;;AArCW,EAAA,kBAAA,CAAA,SAAA,CAAA,cAAA,GAAV,UAAyB,MAAzB,EAAwC;AACtC,QAAM,OAAO,GAAG,iBAAiB,CAAC,KAAK,OAAN,CAAjC;;AACA,QAAI,OAAJ,EAAa;AACX;AACA,UAAI,CAAC,eAAe,CAAC,KAAK,OAAN,CAApB,EAAoC;AAClC;AACD,OAJU,CAKX;;;AACA,UAAI,MAAJ,EAAY;AACV,aAAK,KAAL;AACA,aAAK,eAAL,CAAqB,OAArB,EAA8B,IAA9B;AACD,OAHD,MAGO,IAAI,KAAK,QAAL,CAAc,OAAd,CAAJ,EAA4B;AACjC,aAAK,eAAL,CAAqB,OAArB,EAA8B,KAA9B;AACD;AACF;AACF,GAfS;AAiBV;;AAEG;;;AACI,EAAA,kBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACE,QAAM,OAAO,GAAG,iBAAiB,CAAC,KAAK,OAAN,CAAjC;;AACA,QAAI,OAAJ,EAAa;AACX,UAAM,QAAQ,GAAG,KAAK,QAAL,CAAc,OAAd,CAAjB,CADW,CAC8B;;AACzC,UAAI,CAAC,QAAL,EAAe;AACb,aAAK,KAAL;AACD;;AACD,WAAK,eAAL,CAAqB,OAArB,EAA8B,CAAC,QAA/B;AACD;AACF,GATM;AAWP;;AAEG;;;AACI,EAAA,kBAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACE,SAAK,cAAL,CAAoB,KAApB;AACD,GAFM;;AAGT,SAAA,kBAAA;AAAC,CAtCD,CAAiC,SAAjC,CAAA;;AAwCA,eAAe,kBAAf","sourcesContent":["import { getCurrentElement, isElementChange } from '../util';\nimport StateBase from './state-base';\n\n/**\n * 单状态量的 Action 基类\n * @class\n * @ignore\n */\nclass ElementSingleState extends StateBase {\n  protected setStateEnable(enable: boolean) {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      // 在同一个 element 内部移动，忽视 label 和 shape 之间\n      if (!isElementChange(this.context)) {\n        return;\n      }\n      // 仅支持单个状态量的元素，只能由 element 触发\n      if (enable) {\n        this.clear();\n        this.setElementState(element, true);\n      } else if (this.hasState(element)) {\n        this.setElementState(element, false);\n      }\n    }\n  }\n\n  /**\n   * 切换选中，只允许选中一个\n   */\n  public toggle() {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      const hasState = this.hasState(element); // 提前获取状态\n      if (!hasState) {\n        this.clear();\n      }\n      this.setElementState(element, !hasState);\n    }\n  }\n\n  /**\n   * 取消当前时间影响的状态\n   */\n  public reset() {\n    this.setStateEnable(false);\n  }\n}\n\nexport default ElementSingleState;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}