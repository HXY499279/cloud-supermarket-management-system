{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, some } from '@antv/util';\nimport ListState from './list-state';\nvar STATUS_UNCHECKED = 'unchecked';\nvar STATUS_CHECKED = 'checked';\n/**\n * checked Action\n * 提供三个对外方法\n * 1. toggle 切换状态\n * 2. checked 选中\n * 3. reset 清除重置\n */\n\nvar ListChecked =\n/** @class */\nfunction (_super) {\n  __extends(ListChecked, _super);\n\n  function ListChecked() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.stateName = STATUS_CHECKED;\n    return _this;\n  } // 单个 item 设置状态\n\n\n  ListChecked.prototype.setItemState = function (list, item, enable) {\n    this.setCheckedBy(list, function (el) {\n      return el === item;\n    }, enable);\n  }; // 根据条件设置 checked\n\n\n  ListChecked.prototype.setCheckedBy = function (list, callback, enable) {\n    var items = list.getItems();\n\n    if (enable) {\n      // 设置 checked 时，保留之前已经 checked 的项\n      each(items, function (item) {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNCHECKED)) {\n            list.setItemState(item, STATUS_UNCHECKED, false);\n          }\n\n          list.setItemState(item, STATUS_CHECKED, true);\n        } else if (!list.hasState(item, STATUS_CHECKED)) {\n          list.setItemState(item, STATUS_UNCHECKED, true);\n        }\n      });\n    }\n  };\n  /**\n   * 切换状态.\n   * 1. 当全部选中的时候 或者 当前 item 未选中时，进行激活操作\n   * 2. 否则，重置\n   * @override\n   */\n\n\n  ListChecked.prototype.toggle = function () {\n    var triggerInfo = this.getTriggerListInfo();\n\n    if (triggerInfo && triggerInfo.item) {\n      var list_1 = triggerInfo.list,\n          item = triggerInfo.item; // 不知道 🤷‍♀️ 只认 unchecked status\n\n      var allChecked = !some(list_1.getItems(), function (t) {\n        return list_1.hasState(t, STATUS_UNCHECKED);\n      }); // \n\n      if (allChecked || list_1.hasState(item, STATUS_UNCHECKED)) {\n        this.setItemState(list_1, item, true);\n      } else {\n        this.reset();\n      }\n    }\n  };\n  /**\n   * checked 图例项\n   */\n\n\n  ListChecked.prototype.checked = function () {\n    this.setState();\n  };\n  /**\n   * 重置，需要全部清理 checked 和 unchecked\n   */\n\n\n  ListChecked.prototype.reset = function () {\n    var components = this.getAllowComponents();\n    each(components, function (component) {\n      component.clearItemsState(STATUS_CHECKED);\n      component.clearItemsState(STATUS_UNCHECKED);\n    });\n  };\n\n  return ListChecked;\n}(ListState);\n\nexport default ListChecked;","map":{"version":3,"sources":["../../../../src/interaction/action/component/list-checked.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, some } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport ListState from './list-state';\n\nconst STATUS_UNCHECKED = 'unchecked';\nconst STATUS_CHECKED = 'checked';\ntype MatchCallback = (item: ListItem) => boolean;\n\n/**\n * checked Action\n * 提供三个对外方法\n * 1. toggle 切换状态\n * 2. checked 选中\n * 3. reset 清除重置\n */\nclass ListChecked extends ListState {\n  protected stateName: string = STATUS_CHECKED;\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    this.setCheckedBy(list, (el) => el === item, enable);\n  }\n\n  // 根据条件设置 checked\n  private setCheckedBy(list: IList, callback: MatchCallback, enable: boolean) {\n    const items = list.getItems();\n    if (enable) {\n      // 设置 checked 时，保留之前已经 checked 的项\n      each(items, (item) => {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNCHECKED)) {\n            list.setItemState(item, STATUS_UNCHECKED, false);\n          }\n          list.setItemState(item, STATUS_CHECKED, true);\n        } else if (!list.hasState(item, STATUS_CHECKED)) {\n          list.setItemState(item, STATUS_UNCHECKED, true);\n        }\n      });\n    }\n  }\n\n  /**\n   * 切换状态.\n   * 1. 当全部选中的时候 或者 当前 item 未选中时，进行激活操作\n   * 2. 否则，重置\n   * @override\n   */\n  public toggle() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      const { list, item } = triggerInfo;\n\n      // 不知道 🤷‍♀️ 只认 unchecked status\n      const allChecked = !some(list.getItems(), (t) => list.hasState(t, STATUS_UNCHECKED));\n\n      // \n      if (allChecked || list.hasState(item, STATUS_UNCHECKED)) {\n        this.setItemState(list, item, true);\n      } else {\n        this.reset();\n      }\n    }\n  }\n\n  /**\n   * checked 图例项\n   */\n  public checked() {\n    this.setState();\n  }\n\n  /**\n   * 重置，需要全部清理 checked 和 unchecked\n   */\n  public reset() {\n    const components = this.getAllowComponents();\n    each(components, (component) => {\n      component.clearItemsState(STATUS_CHECKED);\n      component.clearItemsState(STATUS_UNCHECKED);\n    });\n  }\n}\n\nexport default ListChecked;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}