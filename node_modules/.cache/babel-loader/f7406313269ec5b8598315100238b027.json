{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport Action from '../base';\nimport { getComponents } from '../util';\nimport { getCurrentElement, getDelegationObject, getElementValue, isList, getScaleByField } from '../util';\n/**\n * 列表项状态 Action 的基础类\n * @class\n * @ignore\n */\n\nvar ListState =\n/** @class */\nfunction (_super) {\n  __extends(ListState, _super);\n\n  function ListState() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.stateName = '';\n    _this.ignoreItemStates = [];\n    return _this;\n  }\n  /** 获取触发的列表组件 */\n\n\n  ListState.prototype.getTriggerListInfo = function () {\n    var delegateObject = getDelegationObject(this.context);\n    var info = null;\n\n    if (isList(delegateObject)) {\n      info = {\n        item: delegateObject.item,\n        list: delegateObject.component\n      };\n    }\n\n    return info;\n  }; // 获取所有允许执行 Action 的组件\n\n\n  ListState.prototype.getAllowComponents = function () {\n    var _this = this;\n\n    var view = this.context.view;\n    var components = getComponents(view);\n    var rst = [];\n    each(components, function (component) {\n      if (component.isList() && _this.allowSetStateByElement(component)) {\n        rst.push(component);\n      }\n    });\n    return rst;\n  };\n  /** 是否存在指定的状态 */\n\n\n  ListState.prototype.hasState = function (list, item) {\n    return list.hasState(item, this.stateName);\n  };\n  /** 清理组件的状态 */\n\n\n  ListState.prototype.clearAllComponentsState = function () {\n    var _this = this;\n\n    var components = this.getAllowComponents();\n    each(components, function (component) {\n      component.clearItemsState(_this.stateName);\n    });\n  }; // 不是所有的 component 都能进行 active，目前仅支持分类 scale 对应的组件\n\n\n  ListState.prototype.allowSetStateByElement = function (component) {\n    var field = component.get('field');\n\n    if (!field) {\n      return false;\n    }\n\n    if (this.cfg && this.cfg.componentNames) {\n      var name_1 = component.get('name'); // 如果配置了限制的 component name，则要进行检测\n\n      if (this.cfg.componentNames.indexOf(name_1) === -1) {\n        return false;\n      }\n    }\n\n    var view = this.context.view;\n    var scale = getScaleByField(view, field);\n    return scale && scale.isCategory;\n  }; // 检测是否允许触发对应的状态改变事件\n\n\n  ListState.prototype.allowSetStateByItem = function (item, list) {\n    var ignoreStates = this.ignoreItemStates;\n\n    if (ignoreStates.length) {\n      var filterStates = ignoreStates.filter(function (state) {\n        return list.hasState(item, state);\n      });\n      return filterStates.length === 0;\n    }\n\n    return true; // 没有定义忽略的状态时，允许\n  }; // 设置组件的 item active\n\n\n  ListState.prototype.setStateByElement = function (component, element, enable) {\n    var field = component.get('field');\n    var view = this.context.view;\n    var scale = getScaleByField(view, field);\n    var value = getElementValue(element, field);\n    var text = scale.getText(value);\n    this.setItemsState(component, text, enable);\n  }; // 设置状态\n\n\n  ListState.prototype.setStateEnable = function (enable) {\n    var _this = this;\n\n    var element = getCurrentElement(this.context);\n\n    if (element) {\n      // trigger by element\n      var components = this.getAllowComponents();\n      each(components, function (component) {\n        _this.setStateByElement(component, element, enable);\n      });\n    } else {\n      // 被组件触发\n      var delegateObject = getDelegationObject(this.context);\n\n      if (isList(delegateObject)) {\n        var item = delegateObject.item,\n            component = delegateObject.component;\n\n        if (this.allowSetStateByElement(component) && this.allowSetStateByItem(item, component)) {\n          this.setItemState(component, item, enable);\n        }\n      }\n    }\n  }; // 多个 item 设置状态\n\n\n  ListState.prototype.setItemsState = function (list, name, enable) {\n    var _this = this;\n\n    var items = list.getItems();\n    each(items, function (item) {\n      if (item.name === name) {\n        _this.setItemState(list, item, enable);\n      }\n    });\n  }; // 单个 item 设置状态\n\n\n  ListState.prototype.setItemState = function (list, item, enable) {\n    list.setItemState(item, this.stateName, enable);\n  };\n  /**\n   * 设置状态\n   */\n\n\n  ListState.prototype.setState = function () {\n    this.setStateEnable(true);\n  };\n  /**\n   * 取消状态\n   */\n\n\n  ListState.prototype.reset = function () {\n    this.setStateEnable(false);\n  };\n  /**\n   * 切换状态\n   */\n\n\n  ListState.prototype.toggle = function () {\n    var triggerInfo = this.getTriggerListInfo();\n\n    if (triggerInfo && triggerInfo.item) {\n      var list = triggerInfo.list,\n          item = triggerInfo.item;\n      var enable = this.hasState(list, item);\n      this.setItemState(list, item, !enable);\n    }\n  };\n  /**\n   * 取消状态\n   */\n\n\n  ListState.prototype.clear = function () {\n    var triggerInfo = this.getTriggerListInfo();\n\n    if (triggerInfo) {\n      triggerInfo.list.clearItemsState(this.stateName);\n    } else {\n      this.clearAllComponentsState();\n    }\n  };\n\n  return ListState;\n}(Action);\n\nexport default ListState;","map":{"version":3,"sources":["../../../../src/interaction/action/component/list-state.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport Element from '../../../geometry/element';\nimport { LooseObject } from '../../../interface';\nimport Action from '../base';\nimport { getComponents } from '../util';\nimport { getCurrentElement, getDelegationObject, getElementValue, isList, getScaleByField } from '../util';\n\n/** @ignore */\ninterface ListStateCfg {\n  componentNames: string[];\n}\n\n/**\n * 列表项状态 Action 的基础类\n * @class\n * @ignore\n */\nclass ListState extends Action<ListStateCfg> {\n  protected stateName: string = '';\n  protected ignoreItemStates = [];\n\n  /** 获取触发的列表组件 */\n  protected getTriggerListInfo() {\n    const delegateObject = getDelegationObject(this.context);\n    let info: LooseObject = null;\n    if (isList(delegateObject)) {\n      info = {\n        item: delegateObject.item,\n        list: delegateObject.component,\n      };\n    }\n    return info;\n  }\n  // 获取所有允许执行 Action 的组件\n  protected getAllowComponents() {\n    const view = this.context.view;\n    const components = getComponents(view);\n    const rst = [];\n    each(components, (component) => {\n      if (component.isList() && this.allowSetStateByElement(component)) {\n        rst.push(component);\n      }\n    });\n    return rst;\n  }\n\n  /** 是否存在指定的状态 */\n  protected hasState(list: IList, item: ListItem) {\n    return list.hasState(item, this.stateName);\n  }\n\n  /** 清理组件的状态 */\n  protected clearAllComponentsState() {\n    const components = this.getAllowComponents();\n    each(components, (component) => {\n      component.clearItemsState(this.stateName);\n    });\n  }\n\n  // 不是所有的 component 都能进行 active，目前仅支持分类 scale 对应的组件\n  protected allowSetStateByElement(component): boolean {\n    const field = component.get('field');\n    if (!field) {\n      return false;\n    }\n    if (this.cfg && this.cfg.componentNames) {\n      const name = component.get('name');\n      // 如果配置了限制的 component name，则要进行检测\n      if (this.cfg.componentNames.indexOf(name) === -1) {\n        return false;\n      }\n    }\n    const view = this.context.view;\n    const scale = getScaleByField(view, field);\n    return scale && scale.isCategory;\n  }\n  // 检测是否允许触发对应的状态改变事件\n  private allowSetStateByItem(item: ListItem, list: IList) {\n    const ignoreStates = this.ignoreItemStates;\n    if (ignoreStates.length) {\n      const filterStates = ignoreStates.filter((state) => {\n        return list.hasState(item, state);\n      });\n      return filterStates.length === 0;\n    }\n    return true; // 没有定义忽略的状态时，允许\n  }\n\n  // 设置组件的 item active\n  private setStateByElement(component, element: Element, enable: boolean) {\n    const field = component.get('field');\n    const view = this.context.view;\n    const scale = getScaleByField(view, field);\n    const value = getElementValue(element, field);\n    const text = scale.getText(value);\n    this.setItemsState(component, text, enable);\n  }\n\n  // 设置状态\n  protected setStateEnable(enable: boolean) {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      // trigger by element\n      const components = this.getAllowComponents();\n      each(components, (component) => {\n        this.setStateByElement(component, element, enable);\n      });\n    } else {\n      // 被组件触发\n      const delegateObject = getDelegationObject(this.context);\n      if (isList(delegateObject)) {\n        const { item, component } = delegateObject;\n        if (this.allowSetStateByElement(component) && this.allowSetStateByItem(item, component)) {\n          this.setItemState(component, item, enable);\n        }\n      }\n    }\n  }\n\n  // 多个 item 设置状态\n  protected setItemsState(list: IList, name: string, enable: boolean) {\n    const items = list.getItems();\n    each(items, (item) => {\n      if (item.name === name) {\n        this.setItemState(list, item, enable);\n      }\n    });\n  }\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    list.setItemState(item, this.stateName, enable);\n  }\n\n  /**\n   * 设置状态\n   */\n  public setState() {\n    this.setStateEnable(true);\n  }\n\n  /**\n   * 取消状态\n   */\n  public reset() {\n    this.setStateEnable(false);\n  }\n\n  /**\n   * 切换状态\n   */\n  public toggle() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      const { list, item } = triggerInfo;\n      const enable = this.hasState(list, item);\n      this.setItemState(list, item, !enable);\n    }\n  }\n\n  /**\n   * 取消状态\n   */\n  public clear() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      triggerInfo.list.clearItemsState(this.stateName);\n    } else {\n      this.clearAllComponentsState();\n    }\n  }\n}\n\nexport default ListState;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}