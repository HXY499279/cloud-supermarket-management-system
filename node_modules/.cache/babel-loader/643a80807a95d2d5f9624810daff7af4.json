{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { ext } from '@antv/matrix-util';\nimport { each, filter, get, isFunction, isNil, isNumberEqual, mix, size } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { getMatrixByAngle } from '../util/matrix';\nimport { getStatesStyle } from '../util/state';\nimport Theme from '../util/theme';\n\nvar AxisBase =\n/** @class */\nfunction (_super) {\n  __extends(AxisBase, _super);\n\n  function AxisBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AxisBase.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n\n    return __assign(__assign({}, cfg), {\n      name: 'axis',\n      ticks: [],\n      line: {},\n      tickLine: {},\n      subTickLine: null,\n      title: null,\n\n      /**\n       * 文本标签的配置项\n       */\n      label: {},\n\n      /**\n       * 垂直于坐标轴方向的因子，决定文本、title、tickLine 在坐标轴的哪一侧\n       */\n      verticalFactor: 1,\n      // 垂直方向限制的长度，对文本自适应有很大影响\n      verticalLimitLength: null,\n      overlapOrder: ['autoRotate', 'autoEllipsis', 'autoHide'],\n      tickStates: {},\n      optimize: {},\n      defaultCfg: {\n        line: {\n          // @type {Attrs} 坐标轴线的图形属性,如果设置成null，则不显示轴线\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor\n          }\n        },\n        tickLine: {\n          // @type {Attrs} 标注坐标线的图形属性\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor\n          },\n          alignTick: true,\n          length: 5,\n          displayWithLabel: true\n        },\n        subTickLine: {\n          // @type {Attrs} 标注坐标线的图形属性\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor\n          },\n          count: 4,\n          length: 2\n        },\n        label: {\n          autoRotate: true,\n          autoHide: false,\n          autoEllipsis: false,\n          style: {\n            fontSize: 12,\n            fill: Theme.textColor,\n            fontFamily: Theme.fontFamily,\n            fontWeight: 'normal'\n          },\n          offset: 10\n        },\n        title: {\n          autoRotate: true,\n          spacing: 5,\n          position: 'center',\n          style: {\n            fontSize: 12,\n            fill: Theme.textColor,\n            textBaseline: 'middle',\n            fontFamily: Theme.fontFamily,\n            textAlign: 'center'\n          }\n        },\n        tickStates: {\n          active: {\n            labelStyle: {\n              fontWeight: 500\n            },\n            tickLineStyle: {\n              lineWidth: 2\n            }\n          },\n          inactive: {\n            labelStyle: {\n              fill: Theme.uncheckedColor\n            }\n          }\n        },\n        // 针对大数据量进行优化配置\n        optimize: {\n          enable: true,\n          threshold: 400\n        }\n      },\n      theme: {}\n    });\n  };\n  /**\n   * 绘制组件\n   */\n\n\n  AxisBase.prototype.renderInner = function (group) {\n    if (this.get('line')) {\n      this.drawLine(group);\n    } // drawTicks 包括 drawLabels 和 drawTickLines\n\n\n    this.drawTicks(group);\n\n    if (this.get('title')) {\n      this.drawTitle(group);\n    }\n  }; // 实现 IList 接口\n\n\n  AxisBase.prototype.isList = function () {\n    return true;\n  };\n  /**\n   * 获取图例项\n   * @return {ListItem[]} 列表项集合\n   */\n\n\n  AxisBase.prototype.getItems = function () {\n    return this.get('ticks');\n  };\n  /**\n   * 设置列表项\n   * @param {ListItem[]} items 列表项集合\n   */\n\n\n  AxisBase.prototype.setItems = function (items) {\n    this.update({\n      ticks: items\n    });\n  };\n  /**\n   * 更新列表项\n   * @param {ListItem} item 列表项\n   * @param {object}   cfg  列表项\n   */\n\n\n  AxisBase.prototype.updateItem = function (item, cfg) {\n    mix(item, cfg);\n    this.clear(); // 由于单个图例项变化，会引起全局变化，所以全部更新\n\n    this.render();\n  };\n  /**\n   * 清空列表\n   */\n\n\n  AxisBase.prototype.clearItems = function () {\n    var itemGroup = this.getElementByLocalId('label-group');\n    itemGroup && itemGroup.clear();\n  };\n  /**\n   * 设置列表项的状态\n   * @param {ListItem} item  列表项\n   * @param {string}   state 状态名\n   * @param {boolean}  value 状态值, true, false\n   */\n\n\n  AxisBase.prototype.setItemState = function (item, state, value) {\n    item[state] = value;\n    this.updateTickStates(item); // 应用状态样式\n  };\n  /**\n   * 是否存在指定的状态\n   * @param {ListItem} item  列表项\n   * @param {boolean} state 状态名\n   */\n\n\n  AxisBase.prototype.hasState = function (item, state) {\n    return !!item[state];\n  };\n\n  AxisBase.prototype.getItemStates = function (item) {\n    var tickStates = this.get('tickStates');\n    var rst = [];\n    each(tickStates, function (v, k) {\n      if (item[k]) {\n        // item.selected\n        rst.push(k);\n      }\n    });\n    return rst;\n  };\n  /**\n   * 清楚所有列表项的状态\n   * @param {string} state 状态值\n   */\n\n\n  AxisBase.prototype.clearItemsState = function (state) {\n    var _this = this;\n\n    var items = this.getItemsByState(state);\n    each(items, function (item) {\n      _this.setItemState(item, state, false);\n    });\n  };\n  /**\n   * 根据状态获取图例项\n   * @param  {string}     state [description]\n   * @return {ListItem[]}       [description]\n   */\n\n\n  AxisBase.prototype.getItemsByState = function (state) {\n    var _this = this;\n\n    var items = this.getItems();\n    return filter(items, function (item) {\n      return _this.hasState(item, state);\n    });\n  };\n\n  AxisBase.prototype.getSidePoint = function (point, offset) {\n    var self = this;\n    var vector = self.getSideVector(offset, point);\n    return {\n      x: point.x + vector[0],\n      y: point.y + vector[1]\n    };\n  };\n\n  AxisBase.prototype.getTextAnchor = function (vector) {\n    var align;\n\n    if (isNumberEqual(vector[0], 0)) {\n      align = 'center';\n    } else if (vector[0] > 0) {\n      align = 'start';\n    } else if (vector[0] < 0) {\n      align = 'end';\n    }\n\n    return align;\n  };\n\n  AxisBase.prototype.getTextBaseline = function (vector) {\n    var base;\n\n    if (isNumberEqual(vector[1], 0)) {\n      base = 'middle';\n    } else if (vector[1] > 0) {\n      base = 'top';\n    } else if (vector[1] < 0) {\n      base = 'bottom';\n    }\n\n    return base;\n  };\n\n  AxisBase.prototype.processOverlap = function (labelGroup) {}; // 绘制坐标轴线\n\n\n  AxisBase.prototype.drawLine = function (group) {\n    var path = this.getLinePath();\n    var line = this.get('line'); // line 的判空在调用 drawLine 之前，不在这里判定\n\n    this.addShape(group, {\n      type: 'path',\n      id: this.getElementId('line'),\n      name: 'axis-line',\n      attrs: mix({\n        path: path\n      }, line.style)\n    });\n  };\n\n  AxisBase.prototype.getTickLineItems = function (ticks) {\n    var _this = this;\n\n    var tickLineItems = [];\n    var tickLine = this.get('tickLine');\n    var alignTick = tickLine.alignTick;\n    var tickLineLength = tickLine.length;\n    var tickSegment = 1;\n    var tickCount = ticks.length;\n\n    if (tickCount >= 2) {\n      tickSegment = ticks[1].value - ticks[0].value;\n    }\n\n    each(ticks, function (tick) {\n      var point = tick.point;\n\n      if (!alignTick) {\n        // tickLine 不同 tick 对齐时需要调整 point\n        point = _this.getTickPoint(tick.value - tickSegment / 2);\n      }\n\n      var endPoint = _this.getSidePoint(point, tickLineLength);\n\n      tickLineItems.push({\n        startPoint: point,\n        tickValue: tick.value,\n        endPoint: endPoint,\n        tickId: tick.id,\n        id: \"tickline-\" + tick.id\n      });\n    }); // 如果 tickLine 不居中对齐，则需要在最后面补充一个 tickLine\n    // if (!alignTick && tickCount > 0) {\n    //   const tick = ticks[tickCount - 1];\n    //   const point = this.getTickPoint(tick.value + tickSegment / 2);\n    // }\n\n    return tickLineItems;\n  };\n\n  AxisBase.prototype.getSubTickLineItems = function (tickLineItems) {\n    var subTickLineItems = [];\n    var subTickLine = this.get('subTickLine');\n    var subCount = subTickLine.count;\n    var tickLineCount = tickLineItems.length; // 刻度线的数量大于 2 时，才绘制子刻度\n\n    if (tickLineCount >= 2) {\n      for (var i = 0; i < tickLineCount - 1; i++) {\n        var pre = tickLineItems[i];\n        var next = tickLineItems[i + 1];\n\n        for (var j = 0; j < subCount; j++) {\n          var percent = (j + 1) / (subCount + 1);\n          var tickValue = (1 - percent) * pre.tickValue + percent * next.tickValue;\n          var point = this.getTickPoint(tickValue);\n          var endPoint = this.getSidePoint(point, subTickLine.length);\n          subTickLineItems.push({\n            startPoint: point,\n            endPoint: endPoint,\n            tickValue: tickValue,\n            id: \"sub-\" + pre.id + \"-\" + j\n          });\n        }\n      }\n    }\n\n    return subTickLineItems;\n  };\n\n  AxisBase.prototype.getTickLineAttrs = function (tickItem, type, index, tickItems) {\n    var style = this.get(type).style; // 保持和 grid 相同的数据结构\n\n    var item = {\n      points: [tickItem.startPoint, tickItem.endPoint]\n    };\n    var defaultTickLineStyle = get(this.get('theme'), ['tickLine', 'style'], {});\n    style = isFunction(style) ? mix({}, defaultTickLineStyle, style(item, index, tickItems)) : style;\n    var startPoint = tickItem.startPoint,\n        endPoint = tickItem.endPoint;\n    return __assign({\n      x1: startPoint.x,\n      y1: startPoint.y,\n      x2: endPoint.x,\n      y2: endPoint.y\n    }, style);\n  }; // 绘制坐标轴刻度线\n\n\n  AxisBase.prototype.drawTick = function (tickItem, tickLineGroup, type, index, tickItems) {\n    this.addShape(tickLineGroup, {\n      type: 'line',\n      id: this.getElementId(tickItem.id),\n      name: \"axis-\" + type,\n      attrs: this.getTickLineAttrs(tickItem, type, index, tickItems)\n    });\n  }; // 绘制坐标轴刻度线，包括子刻度线\n\n\n  AxisBase.prototype.drawTickLines = function (group) {\n    var _this = this;\n\n    var ticks = this.get('ticks');\n    var subTickLine = this.get('subTickLine');\n    var tickLineItems = this.getTickLineItems(ticks);\n    var tickLineGroup = this.addGroup(group, {\n      name: 'axis-tickline-group',\n      id: this.getElementId('tickline-group')\n    });\n    var tickCfg = this.get('tickLine');\n    each(tickLineItems, function (item, index) {\n      if (tickCfg.displayWithLabel) {\n        // 如果跟随 label 显示，则检测是否存在对应的 label\n        var labelId = _this.getElementId(\"label-\" + item.tickId);\n\n        if (group.findById(labelId)) {\n          _this.drawTick(item, tickLineGroup, 'tickLine', index, tickLineItems);\n        }\n      } else {\n        _this.drawTick(item, tickLineGroup, 'tickLine', index, tickLineItems);\n      }\n    });\n\n    if (subTickLine) {\n      var subTickLineItems_1 = this.getSubTickLineItems(tickLineItems);\n      each(subTickLineItems_1, function (item, index) {\n        _this.drawTick(item, tickLineGroup, 'subTickLine', index, subTickLineItems_1);\n      });\n    }\n  }; // 预处理 ticks 确定位置和补充 id\n\n\n  AxisBase.prototype.processTicks = function () {\n    var _this = this;\n\n    var ticks = this.get('ticks');\n    each(ticks, function (tick) {\n      tick.point = _this.getTickPoint(tick.value); // 补充 tick 的 id，为动画和更新做准备\n\n      if (isNil(tick.id)) {\n        // 默认使用 tick.name 作为id\n        tick.id = tick.name;\n      }\n    });\n  }; // 绘制 ticks 包括文本和 tickLine\n\n\n  AxisBase.prototype.drawTicks = function (group) {\n    var _this = this;\n\n    this.optimizeTicks();\n    this.processTicks();\n\n    if (this.get('label')) {\n      this.drawLabels(group);\n    }\n\n    if (this.get('tickLine')) {\n      this.drawTickLines(group);\n    }\n\n    var ticks = this.get('ticks');\n    each(ticks, function (tick) {\n      _this.applyTickStates(tick, group);\n    });\n  };\n  /**\n   * 根据 optimize 配置对 ticks 进行抽样，对抽样过后的 ticks 才进行真实的渲染\n   */\n\n\n  AxisBase.prototype.optimizeTicks = function () {\n    var optimize = this.get('optimize');\n    var ticks = this.get('ticks');\n\n    if (optimize && optimize.enable && optimize.threshold > 0) {\n      var len = size(ticks);\n\n      if (len > optimize.threshold) {\n        var page_1 = Math.ceil(len / optimize.threshold);\n        var optimizedTicks = ticks.filter(function (tick, idx) {\n          return idx % page_1 === 0;\n        });\n        this.set('ticks', optimizedTicks);\n        this.set('originalTicks', ticks);\n      }\n    }\n  }; // 获取 label 的配置项\n\n\n  AxisBase.prototype.getLabelAttrs = function (tick, index, ticks) {\n    var labelCfg = this.get('label');\n    var offset = labelCfg.offset,\n        rotate = labelCfg.rotate,\n        formatter = labelCfg.formatter;\n    var point = this.getSidePoint(tick.point, offset);\n    var vector = this.getSideVector(offset, point);\n    var text = formatter ? formatter(tick.name, tick, index) : tick.name;\n    var style = labelCfg.style;\n    style = isFunction(style) ? get(this.get('theme'), ['label', 'style'], {}) : style;\n    var attrs = mix({\n      x: point.x,\n      y: point.y,\n      text: text,\n      textAlign: this.getTextAnchor(vector),\n      textBaseline: this.getTextBaseline(vector)\n    }, style);\n\n    if (rotate) {\n      attrs.matrix = getMatrixByAngle(point, rotate);\n    }\n\n    return attrs;\n  }; // 绘制文本\n\n\n  AxisBase.prototype.drawLabels = function (group) {\n    var _this = this;\n\n    var ticks = this.get('ticks');\n    var labelGroup = this.addGroup(group, {\n      name: 'axis-label-group',\n      id: this.getElementId('label-group')\n    });\n    each(ticks, function (tick, index) {\n      _this.addShape(labelGroup, {\n        type: 'text',\n        name: 'axis-label',\n        id: _this.getElementId(\"label-\" + tick.id),\n        attrs: _this.getLabelAttrs(tick, index, ticks),\n        delegateObject: {\n          tick: tick,\n          item: tick,\n          index: index\n        }\n      });\n    });\n    this.processOverlap(labelGroup); // 处理完后再进行 style 回调处理\n\n    var labels = labelGroup.getChildren();\n    var defaultLabelStyle = get(this.get('theme'), ['label', 'style'], {});\n\n    var _a = this.get('label'),\n        style = _a.style,\n        formatter = _a.formatter;\n\n    if (isFunction(style)) {\n      var afterProcessTicks_1 = labels.map(function (label) {\n        return get(label.get('delegateObject'), 'tick');\n      });\n      each(labels, function (label, index) {\n        var tick = label.get('delegateObject').tick;\n        var text = formatter ? formatter(tick.name, tick, index) : tick.name;\n        var newStyle = mix({}, defaultLabelStyle, style(text, index, afterProcessTicks_1));\n        label.attr(newStyle);\n      });\n    }\n  }; // 标题的属性\n\n\n  AxisBase.prototype.getTitleAttrs = function () {\n    var titleCfg = this.get('title');\n    var style = titleCfg.style,\n        position = titleCfg.position,\n        offset = titleCfg.offset,\n        _a = titleCfg.spacing,\n        spacing = _a === void 0 ? 0 : _a,\n        autoRotate = titleCfg.autoRotate;\n    var titleHeight = style.fontSize;\n    var percent = 0.5;\n\n    if (position === 'start') {\n      percent = 0;\n    } else if (position === 'end') {\n      percent = 1;\n    }\n\n    var point = this.getTickPoint(percent); // 标题对应的坐标轴上的点\n    // 如果没有指定 titleOffset 也没有渲染 label，这里需要自动计算 offset\n\n    var titlePoint = this.getSidePoint(point, offset || spacing + titleHeight / 2); // 标题的点\n\n    var attrs = mix({\n      x: titlePoint.x,\n      y: titlePoint.y,\n      text: titleCfg.text\n    }, style);\n    var rotate = titleCfg.rotate; // rotate 是角度值\n\n    var angle = rotate;\n\n    if (isNil(rotate) && autoRotate) {\n      // 用户没有设定旋转角度，同时设置自动旋转\n      var vector = this.getAxisVector(point);\n      var v1 = [1, 0]; // 水平方向的向量\n\n      angle = ext.angleTo(vector, v1, true);\n    }\n\n    if (angle) {\n      var matrix = getMatrixByAngle(titlePoint, angle);\n      attrs.matrix = matrix;\n    }\n\n    return attrs;\n  }; // 绘制标题\n\n\n  AxisBase.prototype.drawTitle = function (group) {\n    this.addShape(group, {\n      type: 'text',\n      id: this.getElementId('title'),\n      name: 'axis-title',\n      attrs: this.getTitleAttrs()\n    });\n  };\n\n  AxisBase.prototype.applyTickStates = function (tick, group) {\n    var states = this.getItemStates(tick);\n\n    if (states.length) {\n      var tickStates = this.get('tickStates'); // 分别更新 label 和 tickLine\n\n      var labelId = this.getElementId(\"label-\" + tick.id);\n      var labelShape = group.findById(labelId);\n\n      if (labelShape) {\n        var labelStateStyle = getStatesStyle(tick, 'label', tickStates);\n        labelStateStyle && labelShape.attr(labelStateStyle);\n      }\n\n      var tickLineId = this.getElementId(\"tickline-\" + tick.id);\n      var tickLineShape = group.findById(tickLineId);\n\n      if (tickLineShape) {\n        var tickLineStateStyle = getStatesStyle(tick, 'tickLine', tickStates);\n        tickLineStateStyle && tickLineShape.attr(tickLineStateStyle);\n      }\n    }\n  };\n\n  AxisBase.prototype.updateTickStates = function (tick) {\n    var states = this.getItemStates(tick);\n    var tickStates = this.get('tickStates');\n    var labelCfg = this.get('label');\n    var labelShape = this.getElementByLocalId(\"label-\" + tick.id);\n    var tickLineCfg = this.get('tickLine');\n    var tickLineShape = this.getElementByLocalId(\"tickline-\" + tick.id);\n\n    if (states.length) {\n      if (labelShape) {\n        var labelStateStyle = getStatesStyle(tick, 'label', tickStates);\n        labelStateStyle && labelShape.attr(labelStateStyle);\n      }\n\n      if (tickLineShape) {\n        var tickLineStateStyle = getStatesStyle(tick, 'tickLine', tickStates);\n        tickLineStateStyle && tickLineShape.attr(tickLineStateStyle);\n      }\n    } else {\n      if (labelShape) {\n        labelShape.attr(labelCfg.style);\n      }\n\n      if (tickLineShape) {\n        tickLineShape.attr(tickLineCfg.style);\n      }\n    }\n  };\n\n  return AxisBase;\n}(GroupComponent);\n\nexport default AxisBase;","map":{"version":3,"sources":["../../src/axis/base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { ext } from '@antv/matrix-util';\nimport { each, filter, get, isFunction, isNil, isNumberEqual, mix, size } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { getMatrixByAngle } from '../util/matrix';\nimport { getStatesStyle } from '../util/state';\nimport Theme from '../util/theme';\nvar AxisBase = /** @class */ (function (_super) {\n    __extends(AxisBase, _super);\n    function AxisBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AxisBase.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        return __assign(__assign({}, cfg), { name: 'axis', ticks: [], line: {}, tickLine: {}, subTickLine: null, title: null, \n            /**\n             * 文本标签的配置项\n             */\n            label: {}, \n            /**\n             * 垂直于坐标轴方向的因子，决定文本、title、tickLine 在坐标轴的哪一侧\n             */\n            verticalFactor: 1, \n            // 垂直方向限制的长度，对文本自适应有很大影响\n            verticalLimitLength: null, overlapOrder: ['autoRotate', 'autoEllipsis', 'autoHide'], tickStates: {}, optimize: {}, defaultCfg: {\n                line: {\n                    // @type {Attrs} 坐标轴线的图形属性,如果设置成null，则不显示轴线\n                    style: {\n                        lineWidth: 1,\n                        stroke: Theme.lineColor,\n                    },\n                },\n                tickLine: {\n                    // @type {Attrs} 标注坐标线的图形属性\n                    style: {\n                        lineWidth: 1,\n                        stroke: Theme.lineColor,\n                    },\n                    alignTick: true,\n                    length: 5,\n                    displayWithLabel: true,\n                },\n                subTickLine: {\n                    // @type {Attrs} 标注坐标线的图形属性\n                    style: {\n                        lineWidth: 1,\n                        stroke: Theme.lineColor,\n                    },\n                    count: 4,\n                    length: 2,\n                },\n                label: {\n                    autoRotate: true,\n                    autoHide: false,\n                    autoEllipsis: false,\n                    style: {\n                        fontSize: 12,\n                        fill: Theme.textColor,\n                        fontFamily: Theme.fontFamily,\n                        fontWeight: 'normal',\n                    },\n                    offset: 10,\n                },\n                title: {\n                    autoRotate: true,\n                    spacing: 5,\n                    position: 'center',\n                    style: {\n                        fontSize: 12,\n                        fill: Theme.textColor,\n                        textBaseline: 'middle',\n                        fontFamily: Theme.fontFamily,\n                        textAlign: 'center',\n                    },\n                },\n                tickStates: {\n                    active: {\n                        labelStyle: {\n                            fontWeight: 500,\n                        },\n                        tickLineStyle: {\n                            lineWidth: 2,\n                        },\n                    },\n                    inactive: {\n                        labelStyle: {\n                            fill: Theme.uncheckedColor,\n                        },\n                    },\n                },\n                // 针对大数据量进行优化配置\n                optimize: {\n                    enable: true,\n                    threshold: 400,\n                },\n            }, theme: {} });\n    };\n    /**\n     * 绘制组件\n     */\n    AxisBase.prototype.renderInner = function (group) {\n        if (this.get('line')) {\n            this.drawLine(group);\n        }\n        // drawTicks 包括 drawLabels 和 drawTickLines\n        this.drawTicks(group);\n        if (this.get('title')) {\n            this.drawTitle(group);\n        }\n    };\n    // 实现 IList 接口\n    AxisBase.prototype.isList = function () {\n        return true;\n    };\n    /**\n     * 获取图例项\n     * @return {ListItem[]} 列表项集合\n     */\n    AxisBase.prototype.getItems = function () {\n        return this.get('ticks');\n    };\n    /**\n     * 设置列表项\n     * @param {ListItem[]} items 列表项集合\n     */\n    AxisBase.prototype.setItems = function (items) {\n        this.update({\n            ticks: items,\n        });\n    };\n    /**\n     * 更新列表项\n     * @param {ListItem} item 列表项\n     * @param {object}   cfg  列表项\n     */\n    AxisBase.prototype.updateItem = function (item, cfg) {\n        mix(item, cfg);\n        this.clear(); // 由于单个图例项变化，会引起全局变化，所以全部更新\n        this.render();\n    };\n    /**\n     * 清空列表\n     */\n    AxisBase.prototype.clearItems = function () {\n        var itemGroup = this.getElementByLocalId('label-group');\n        itemGroup && itemGroup.clear();\n    };\n    /**\n     * 设置列表项的状态\n     * @param {ListItem} item  列表项\n     * @param {string}   state 状态名\n     * @param {boolean}  value 状态值, true, false\n     */\n    AxisBase.prototype.setItemState = function (item, state, value) {\n        item[state] = value;\n        this.updateTickStates(item); // 应用状态样式\n    };\n    /**\n     * 是否存在指定的状态\n     * @param {ListItem} item  列表项\n     * @param {boolean} state 状态名\n     */\n    AxisBase.prototype.hasState = function (item, state) {\n        return !!item[state];\n    };\n    AxisBase.prototype.getItemStates = function (item) {\n        var tickStates = this.get('tickStates');\n        var rst = [];\n        each(tickStates, function (v, k) {\n            if (item[k]) {\n                // item.selected\n                rst.push(k);\n            }\n        });\n        return rst;\n    };\n    /**\n     * 清楚所有列表项的状态\n     * @param {string} state 状态值\n     */\n    AxisBase.prototype.clearItemsState = function (state) {\n        var _this = this;\n        var items = this.getItemsByState(state);\n        each(items, function (item) {\n            _this.setItemState(item, state, false);\n        });\n    };\n    /**\n     * 根据状态获取图例项\n     * @param  {string}     state [description]\n     * @return {ListItem[]}       [description]\n     */\n    AxisBase.prototype.getItemsByState = function (state) {\n        var _this = this;\n        var items = this.getItems();\n        return filter(items, function (item) {\n            return _this.hasState(item, state);\n        });\n    };\n    AxisBase.prototype.getSidePoint = function (point, offset) {\n        var self = this;\n        var vector = self.getSideVector(offset, point);\n        return {\n            x: point.x + vector[0],\n            y: point.y + vector[1],\n        };\n    };\n    AxisBase.prototype.getTextAnchor = function (vector) {\n        var align;\n        if (isNumberEqual(vector[0], 0)) {\n            align = 'center';\n        }\n        else if (vector[0] > 0) {\n            align = 'start';\n        }\n        else if (vector[0] < 0) {\n            align = 'end';\n        }\n        return align;\n    };\n    AxisBase.prototype.getTextBaseline = function (vector) {\n        var base;\n        if (isNumberEqual(vector[1], 0)) {\n            base = 'middle';\n        }\n        else if (vector[1] > 0) {\n            base = 'top';\n        }\n        else if (vector[1] < 0) {\n            base = 'bottom';\n        }\n        return base;\n    };\n    AxisBase.prototype.processOverlap = function (labelGroup) { };\n    // 绘制坐标轴线\n    AxisBase.prototype.drawLine = function (group) {\n        var path = this.getLinePath();\n        var line = this.get('line'); // line 的判空在调用 drawLine 之前，不在这里判定\n        this.addShape(group, {\n            type: 'path',\n            id: this.getElementId('line'),\n            name: 'axis-line',\n            attrs: mix({\n                path: path,\n            }, line.style),\n        });\n    };\n    AxisBase.prototype.getTickLineItems = function (ticks) {\n        var _this = this;\n        var tickLineItems = [];\n        var tickLine = this.get('tickLine');\n        var alignTick = tickLine.alignTick;\n        var tickLineLength = tickLine.length;\n        var tickSegment = 1;\n        var tickCount = ticks.length;\n        if (tickCount >= 2) {\n            tickSegment = ticks[1].value - ticks[0].value;\n        }\n        each(ticks, function (tick) {\n            var point = tick.point;\n            if (!alignTick) {\n                // tickLine 不同 tick 对齐时需要调整 point\n                point = _this.getTickPoint(tick.value - tickSegment / 2);\n            }\n            var endPoint = _this.getSidePoint(point, tickLineLength);\n            tickLineItems.push({\n                startPoint: point,\n                tickValue: tick.value,\n                endPoint: endPoint,\n                tickId: tick.id,\n                id: \"tickline-\" + tick.id,\n            });\n        });\n        // 如果 tickLine 不居中对齐，则需要在最后面补充一个 tickLine\n        // if (!alignTick && tickCount > 0) {\n        //   const tick = ticks[tickCount - 1];\n        //   const point = this.getTickPoint(tick.value + tickSegment / 2);\n        // }\n        return tickLineItems;\n    };\n    AxisBase.prototype.getSubTickLineItems = function (tickLineItems) {\n        var subTickLineItems = [];\n        var subTickLine = this.get('subTickLine');\n        var subCount = subTickLine.count;\n        var tickLineCount = tickLineItems.length;\n        // 刻度线的数量大于 2 时，才绘制子刻度\n        if (tickLineCount >= 2) {\n            for (var i = 0; i < tickLineCount - 1; i++) {\n                var pre = tickLineItems[i];\n                var next = tickLineItems[i + 1];\n                for (var j = 0; j < subCount; j++) {\n                    var percent = (j + 1) / (subCount + 1);\n                    var tickValue = (1 - percent) * pre.tickValue + percent * next.tickValue;\n                    var point = this.getTickPoint(tickValue);\n                    var endPoint = this.getSidePoint(point, subTickLine.length);\n                    subTickLineItems.push({\n                        startPoint: point,\n                        endPoint: endPoint,\n                        tickValue: tickValue,\n                        id: \"sub-\" + pre.id + \"-\" + j,\n                    });\n                }\n            }\n        }\n        return subTickLineItems;\n    };\n    AxisBase.prototype.getTickLineAttrs = function (tickItem, type, index, tickItems) {\n        var style = this.get(type).style;\n        // 保持和 grid 相同的数据结构\n        var item = {\n            points: [tickItem.startPoint, tickItem.endPoint],\n        };\n        var defaultTickLineStyle = get(this.get('theme'), ['tickLine', 'style'], {});\n        style = isFunction(style) ? mix({}, defaultTickLineStyle, style(item, index, tickItems)) : style;\n        var startPoint = tickItem.startPoint, endPoint = tickItem.endPoint;\n        return __assign({ x1: startPoint.x, y1: startPoint.y, x2: endPoint.x, y2: endPoint.y }, style);\n    };\n    // 绘制坐标轴刻度线\n    AxisBase.prototype.drawTick = function (tickItem, tickLineGroup, type, index, tickItems) {\n        this.addShape(tickLineGroup, {\n            type: 'line',\n            id: this.getElementId(tickItem.id),\n            name: \"axis-\" + type,\n            attrs: this.getTickLineAttrs(tickItem, type, index, tickItems),\n        });\n    };\n    // 绘制坐标轴刻度线，包括子刻度线\n    AxisBase.prototype.drawTickLines = function (group) {\n        var _this = this;\n        var ticks = this.get('ticks');\n        var subTickLine = this.get('subTickLine');\n        var tickLineItems = this.getTickLineItems(ticks);\n        var tickLineGroup = this.addGroup(group, {\n            name: 'axis-tickline-group',\n            id: this.getElementId('tickline-group'),\n        });\n        var tickCfg = this.get('tickLine');\n        each(tickLineItems, function (item, index) {\n            if (tickCfg.displayWithLabel) {\n                // 如果跟随 label 显示，则检测是否存在对应的 label\n                var labelId = _this.getElementId(\"label-\" + item.tickId);\n                if (group.findById(labelId)) {\n                    _this.drawTick(item, tickLineGroup, 'tickLine', index, tickLineItems);\n                }\n            }\n            else {\n                _this.drawTick(item, tickLineGroup, 'tickLine', index, tickLineItems);\n            }\n        });\n        if (subTickLine) {\n            var subTickLineItems_1 = this.getSubTickLineItems(tickLineItems);\n            each(subTickLineItems_1, function (item, index) {\n                _this.drawTick(item, tickLineGroup, 'subTickLine', index, subTickLineItems_1);\n            });\n        }\n    };\n    // 预处理 ticks 确定位置和补充 id\n    AxisBase.prototype.processTicks = function () {\n        var _this = this;\n        var ticks = this.get('ticks');\n        each(ticks, function (tick) {\n            tick.point = _this.getTickPoint(tick.value);\n            // 补充 tick 的 id，为动画和更新做准备\n            if (isNil(tick.id)) {\n                // 默认使用 tick.name 作为id\n                tick.id = tick.name;\n            }\n        });\n    };\n    // 绘制 ticks 包括文本和 tickLine\n    AxisBase.prototype.drawTicks = function (group) {\n        var _this = this;\n        this.optimizeTicks();\n        this.processTicks();\n        if (this.get('label')) {\n            this.drawLabels(group);\n        }\n        if (this.get('tickLine')) {\n            this.drawTickLines(group);\n        }\n        var ticks = this.get('ticks');\n        each(ticks, function (tick) {\n            _this.applyTickStates(tick, group);\n        });\n    };\n    /**\n     * 根据 optimize 配置对 ticks 进行抽样，对抽样过后的 ticks 才进行真实的渲染\n     */\n    AxisBase.prototype.optimizeTicks = function () {\n        var optimize = this.get('optimize');\n        var ticks = this.get('ticks');\n        if (optimize && optimize.enable && optimize.threshold > 0) {\n            var len = size(ticks);\n            if (len > optimize.threshold) {\n                var page_1 = Math.ceil(len / optimize.threshold);\n                var optimizedTicks = ticks.filter(function (tick, idx) { return idx % page_1 === 0; });\n                this.set('ticks', optimizedTicks);\n                this.set('originalTicks', ticks);\n            }\n        }\n    };\n    // 获取 label 的配置项\n    AxisBase.prototype.getLabelAttrs = function (tick, index, ticks) {\n        var labelCfg = this.get('label');\n        var offset = labelCfg.offset, rotate = labelCfg.rotate, formatter = labelCfg.formatter;\n        var point = this.getSidePoint(tick.point, offset);\n        var vector = this.getSideVector(offset, point);\n        var text = formatter ? formatter(tick.name, tick, index) : tick.name;\n        var style = labelCfg.style;\n        style = isFunction(style) ? get(this.get('theme'), ['label', 'style'], {}) : style;\n        var attrs = mix({\n            x: point.x,\n            y: point.y,\n            text: text,\n            textAlign: this.getTextAnchor(vector),\n            textBaseline: this.getTextBaseline(vector),\n        }, style);\n        if (rotate) {\n            attrs.matrix = getMatrixByAngle(point, rotate);\n        }\n        return attrs;\n    };\n    // 绘制文本\n    AxisBase.prototype.drawLabels = function (group) {\n        var _this = this;\n        var ticks = this.get('ticks');\n        var labelGroup = this.addGroup(group, {\n            name: 'axis-label-group',\n            id: this.getElementId('label-group'),\n        });\n        each(ticks, function (tick, index) {\n            _this.addShape(labelGroup, {\n                type: 'text',\n                name: 'axis-label',\n                id: _this.getElementId(\"label-\" + tick.id),\n                attrs: _this.getLabelAttrs(tick, index, ticks),\n                delegateObject: {\n                    tick: tick,\n                    item: tick,\n                    index: index,\n                },\n            });\n        });\n        this.processOverlap(labelGroup);\n        // 处理完后再进行 style 回调处理\n        var labels = labelGroup.getChildren();\n        var defaultLabelStyle = get(this.get('theme'), ['label', 'style'], {});\n        var _a = this.get('label'), style = _a.style, formatter = _a.formatter;\n        if (isFunction(style)) {\n            var afterProcessTicks_1 = labels.map(function (label) { return get(label.get('delegateObject'), 'tick'); });\n            each(labels, function (label, index) {\n                var tick = label.get('delegateObject').tick;\n                var text = formatter ? formatter(tick.name, tick, index) : tick.name;\n                var newStyle = mix({}, defaultLabelStyle, style(text, index, afterProcessTicks_1));\n                label.attr(newStyle);\n            });\n        }\n    };\n    // 标题的属性\n    AxisBase.prototype.getTitleAttrs = function () {\n        var titleCfg = this.get('title');\n        var style = titleCfg.style, position = titleCfg.position, offset = titleCfg.offset, _a = titleCfg.spacing, spacing = _a === void 0 ? 0 : _a, autoRotate = titleCfg.autoRotate;\n        var titleHeight = style.fontSize;\n        var percent = 0.5;\n        if (position === 'start') {\n            percent = 0;\n        }\n        else if (position === 'end') {\n            percent = 1;\n        }\n        var point = this.getTickPoint(percent); // 标题对应的坐标轴上的点\n        // 如果没有指定 titleOffset 也没有渲染 label，这里需要自动计算 offset\n        var titlePoint = this.getSidePoint(point, offset || spacing + titleHeight / 2); // 标题的点\n        var attrs = mix({\n            x: titlePoint.x,\n            y: titlePoint.y,\n            text: titleCfg.text,\n        }, style);\n        var rotate = titleCfg.rotate; // rotate 是角度值\n        var angle = rotate;\n        if (isNil(rotate) && autoRotate) {\n            // 用户没有设定旋转角度，同时设置自动旋转\n            var vector = this.getAxisVector(point);\n            var v1 = [1, 0]; // 水平方向的向量\n            angle = ext.angleTo(vector, v1, true);\n        }\n        if (angle) {\n            var matrix = getMatrixByAngle(titlePoint, angle);\n            attrs.matrix = matrix;\n        }\n        return attrs;\n    };\n    // 绘制标题\n    AxisBase.prototype.drawTitle = function (group) {\n        this.addShape(group, {\n            type: 'text',\n            id: this.getElementId('title'),\n            name: 'axis-title',\n            attrs: this.getTitleAttrs(),\n        });\n    };\n    AxisBase.prototype.applyTickStates = function (tick, group) {\n        var states = this.getItemStates(tick);\n        if (states.length) {\n            var tickStates = this.get('tickStates');\n            // 分别更新 label 和 tickLine\n            var labelId = this.getElementId(\"label-\" + tick.id);\n            var labelShape = group.findById(labelId);\n            if (labelShape) {\n                var labelStateStyle = getStatesStyle(tick, 'label', tickStates);\n                labelStateStyle && labelShape.attr(labelStateStyle);\n            }\n            var tickLineId = this.getElementId(\"tickline-\" + tick.id);\n            var tickLineShape = group.findById(tickLineId);\n            if (tickLineShape) {\n                var tickLineStateStyle = getStatesStyle(tick, 'tickLine', tickStates);\n                tickLineStateStyle && tickLineShape.attr(tickLineStateStyle);\n            }\n        }\n    };\n    AxisBase.prototype.updateTickStates = function (tick) {\n        var states = this.getItemStates(tick);\n        var tickStates = this.get('tickStates');\n        var labelCfg = this.get('label');\n        var labelShape = this.getElementByLocalId(\"label-\" + tick.id);\n        var tickLineCfg = this.get('tickLine');\n        var tickLineShape = this.getElementByLocalId(\"tickline-\" + tick.id);\n        if (states.length) {\n            if (labelShape) {\n                var labelStateStyle = getStatesStyle(tick, 'label', tickStates);\n                labelStateStyle && labelShape.attr(labelStateStyle);\n            }\n            if (tickLineShape) {\n                var tickLineStateStyle = getStatesStyle(tick, 'tickLine', tickStates);\n                tickLineStateStyle && tickLineShape.attr(tickLineStateStyle);\n            }\n        }\n        else {\n            if (labelShape) {\n                labelShape.attr(labelCfg.style);\n            }\n            if (tickLineShape) {\n                tickLineShape.attr(tickLineCfg.style);\n            }\n        }\n    };\n    return AxisBase;\n}(GroupComponent));\nexport default AxisBase;\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"module"}