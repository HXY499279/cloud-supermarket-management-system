{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each } from '@antv/util';\nimport { registerShape } from '../base';\nimport { getPathPoints } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nimport { getLineMarker } from './util';\n\nvar interpolateCallback = function (point, nextPoint, shapeType) {\n  var x = point.x;\n  var y = point.y;\n  var nextX = nextPoint.x;\n  var nextY = nextPoint.y;\n  var result;\n\n  switch (shapeType) {\n    case 'hv':\n      result = [{\n        x: nextX,\n        y: y\n      }];\n      break;\n\n    case 'vh':\n      result = [{\n        x: x,\n        y: nextY\n      }];\n      break;\n\n    case 'hvh':\n      var middleX = (nextX + x) / 2;\n      result = [{\n        x: middleX,\n        y: y\n      }, {\n        x: middleX,\n        y: nextY\n      }];\n      break;\n\n    case 'vhv':\n      var middleY = (y + nextY) / 2;\n      result = [{\n        x: x,\n        y: middleY\n      }, {\n        x: nextX,\n        y: middleY\n      }];\n      break;\n\n    default:\n      break;\n  }\n\n  return result;\n};\n\nfunction getInterpolatePoints(points, shapeType) {\n  var result = [];\n  each(points, function (point, index) {\n    var nextPoint = points[index + 1];\n    result.push(point);\n\n    if (nextPoint) {\n      var interpolatePoint = interpolateCallback(point, nextPoint, shapeType);\n      result = result.concat(interpolatePoint);\n    }\n  });\n  return result;\n} // 插值的图形path，不考虑null\n\n\nfunction getInterpolatePath(points) {\n  return points.map(function (point, index) {\n    return index === 0 ? ['M', point.x, point.y] : ['L', point.x, point.y];\n  });\n} // 插值的图形\n\n\nfunction getInterpolateShapeAttrs(cfg, shapeType) {\n  var points = getPathPoints(cfg.points, cfg.connectNulls, cfg.showSinglePoint); // 根据 connectNulls 值处理 points\n\n  var path = [];\n  each(points, function (eachLinePoints) {\n    var interpolatePoints = getInterpolatePoints(eachLinePoints, shapeType);\n    path = path.concat(getInterpolatePath(interpolatePoints));\n  });\n  return __assign(__assign({}, getStyle(cfg, true, false, 'lineWidth')), {\n    path: path\n  });\n} // step line\n\n\neach(['hv', 'vh', 'hvh', 'vhv'], function (shapeType) {\n  registerShape('line', shapeType, {\n    draw: function (cfg, container) {\n      var attrs = getInterpolateShapeAttrs(cfg, shapeType);\n      var shape = container.addShape({\n        type: 'path',\n        attrs: attrs,\n        name: 'line'\n      });\n      return shape;\n    },\n    getMarker: function (markerCfg) {\n      return getLineMarker(markerCfg, shapeType);\n    }\n  });\n});","map":{"version":3,"sources":["../../../../src/geometry/shape/line/step.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg } from '../../../interface';\n\nimport { registerShape } from '../base';\nimport { getPathPoints } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nimport { getLineMarker } from './util';\n\nconst interpolateCallback = (point: Point, nextPoint: Point, shapeType: string) => {\n  const x = point.x as number;\n  const y = point.y as number;\n  const nextX = nextPoint.x as number;\n  const nextY = nextPoint.y as number;\n  let result;\n\n  switch (shapeType) {\n    case 'hv':\n      result = [{ x: nextX, y }];\n      break;\n    case 'vh':\n      result = [{ x, y: nextY }];\n      break;\n    case 'hvh':\n      const middleX = (nextX + x) / 2;\n      result = [\n        { x: middleX, y },\n        { x: middleX, y: nextY },\n      ];\n      break;\n    case 'vhv':\n      const middleY = (y + nextY) / 2;\n      result = [\n        { x, y: middleY },\n        { x: nextX, y: middleY },\n      ];\n      break;\n    default:\n      break;\n  }\n\n  return result;\n};\n\nfunction getInterpolatePoints(points: Point[], shapeType: string) {\n  let result = [];\n  each(points, (point: Point, index) => {\n    const nextPoint = points[index + 1];\n    result.push(point);\n    if (nextPoint) {\n      const interpolatePoint = interpolateCallback(point, nextPoint, shapeType);\n      result = result.concat(interpolatePoint);\n    }\n  });\n  return result;\n}\n\n// 插值的图形path，不考虑null\nfunction getInterpolatePath(points: Point[]) {\n  return points.map((point, index) => {\n    return index === 0 ? ['M', point.x, point.y] : ['L', point.x, point.y];\n  });\n}\n\n// 插值的图形\nfunction getInterpolateShapeAttrs(cfg: ShapeInfo, shapeType: string) {\n  const points = getPathPoints(cfg.points, cfg.connectNulls, cfg.showSinglePoint); // 根据 connectNulls 值处理 points\n  let path = [];\n  each(points, (eachLinePoints) => {\n    const interpolatePoints = getInterpolatePoints(eachLinePoints, shapeType);\n    path = path.concat(getInterpolatePath(interpolatePoints));\n  });\n\n  return {\n    ...getStyle(cfg, true, false, 'lineWidth'),\n    path,\n  };\n}\n\n// step line\neach(['hv', 'vh', 'hvh', 'vhv'], (shapeType) => {\n  registerShape('line', shapeType, {\n    draw(cfg: ShapeInfo, container: IGroup) {\n      const attrs = getInterpolateShapeAttrs(cfg, shapeType);\n      const shape = container.addShape({\n        type: 'path',\n        attrs,\n        name: 'line',\n      });\n\n      return shape;\n    },\n    getMarker(markerCfg: ShapeMarkerCfg) {\n      return getLineMarker(markerCfg, shapeType);\n    },\n  });\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}