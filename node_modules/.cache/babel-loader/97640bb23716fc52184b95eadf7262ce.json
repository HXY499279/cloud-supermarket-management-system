{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport { clearList } from './list-highlight-util';\nimport ListState from './list-state';\nvar STATUS_UNACTIVE = 'inactive';\nvar STATUS_ACTIVE = 'active';\n/**\n * highlight Action 的效果是 active 和 inactive 两个状态的组合\n * @class\n * @ignore\n */\n\nvar ListHighlight =\n/** @class */\nfunction (_super) {\n  __extends(ListHighlight, _super);\n\n  function ListHighlight() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.stateName = STATUS_ACTIVE;\n    _this.ignoreItemStates = ['unchecked']; // 当存在 unchecked 状态时不触发\n\n    return _this;\n  } // 如果 item.name 匹配，则设置 highlight 以及取消\n\n\n  ListHighlight.prototype.setItemsState = function (list, name, enable) {\n    this.setHighlightBy(list, function (item) {\n      return item.name === name;\n    }, enable);\n  }; // 单个 item 设置状态\n\n\n  ListHighlight.prototype.setItemState = function (list, item, enable) {\n    var items = list.getItems();\n    this.setHighlightBy(list, function (el) {\n      return el === item;\n    }, enable);\n  }; // 根据条件设置 highlight\n\n\n  ListHighlight.prototype.setHighlightBy = function (list, callback, enable) {\n    var items = list.getItems();\n\n    if (enable) {\n      // 设置 highlight 时，保留之前已经 Highlight 的项\n      each(items, function (item) {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNACTIVE)) {\n            list.setItemState(item, STATUS_UNACTIVE, false);\n          }\n\n          list.setItemState(item, STATUS_ACTIVE, true);\n        } else if (!list.hasState(item, STATUS_ACTIVE)) {\n          list.setItemState(item, STATUS_UNACTIVE, true);\n        }\n      });\n    } else {\n      var activeItems = list.getItemsByState(STATUS_ACTIVE);\n      var allCancel_1 = true; // 检测 activeItems 是否要全部取消\n\n      each(activeItems, function (item) {\n        if (!callback(item)) {\n          allCancel_1 = false;\n          return false;\n        }\n      });\n\n      if (allCancel_1) {\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(items, function (item) {\n          if (callback(item)) {\n            if (list.hasState(item, STATUS_ACTIVE)) {\n              list.setItemState(item, STATUS_ACTIVE, false);\n            }\n\n            list.setItemState(item, STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  };\n  /**\n   * highlight 图例项（坐标轴文本）\n   */\n\n\n  ListHighlight.prototype.highlight = function () {\n    this.setState();\n  }; // 需要全部清理 active 和 unactive\n\n\n  ListHighlight.prototype.clear = function () {\n    var triggerInfo = this.getTriggerListInfo();\n\n    if (triggerInfo) {\n      clearList(triggerInfo.list);\n    } else {\n      // 如果不是 component 的事件触发，则所有满足触发条件的组件都清除该状态\n      var components = this.getAllowComponents();\n      each(components, function (component) {\n        component.clearItemsState(STATUS_ACTIVE);\n        component.clearItemsState(STATUS_UNACTIVE);\n      });\n    }\n  };\n\n  return ListHighlight;\n}(ListState);\n\nexport default ListHighlight;","map":{"version":3,"sources":["../../../../src/interaction/action/component/list-highlight.ts"],"names":[],"mappings":";AAAA,SAAS,IAAT,QAAqB,YAArB;AAEA,SAAS,SAAT,QAA0B,uBAA1B;AACA,OAAO,SAAP,MAAsB,cAAtB;AACA,IAAM,eAAe,GAAG,UAAxB;AACA,IAAM,aAAa,GAAG,QAAtB;AAGA;;;;AAIG;;AACH,IAAA,aAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4B,EAAA,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;;AAA5B,WAAA,aAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AACY,IAAA,KAAA,CAAA,SAAA,GAAoB,aAApB;AACA,IAAA,KAAA,CAAA,gBAAA,GAAmB,CAAC,WAAD,CAAnB,CAFZ,CAE8C;;;AA2E7C,GA7ED,CAGE;;;AACU,EAAA,aAAA,CAAA,SAAA,CAAA,aAAA,GAAV,UAAwB,IAAxB,EAAqC,IAArC,EAAmD,MAAnD,EAAkE;AAChE,SAAK,cAAL,CAAoB,IAApB,EAA0B,UAAC,IAAD,EAAK;AAAK,aAAA,IAAI,CAAC,IAAL,KAAA,IAAA;AAAkB,KAAtD,EAAwD,MAAxD;AACD,GAFS,CAJZ,CAQE;;;AACU,EAAA,aAAA,CAAA,SAAA,CAAA,YAAA,GAAV,UAAuB,IAAvB,EAAoC,IAApC,EAAoD,MAApD,EAAmE;AACjE,QAAM,KAAK,GAAG,IAAI,CAAC,QAAL,EAAd;AACA,SAAK,cAAL,CAAoB,IAApB,EAA0B,UAAC,EAAD,EAAG;AAAK,aAAA,EAAE,KAAF,IAAA;AAAW,KAA7C,EAA+C,MAA/C;AACD,GAHS,CATZ,CAcE;;;AACQ,EAAA,aAAA,CAAA,SAAA,CAAA,cAAA,GAAR,UAAuB,IAAvB,EAAoC,QAApC,EAA6D,MAA7D,EAA4E;AAC1E,QAAM,KAAK,GAAG,IAAI,CAAC,QAAL,EAAd;;AACA,QAAI,MAAJ,EAAY;AACV;AACA,MAAA,IAAI,CAAC,KAAD,EAAQ,UAAC,IAAD,EAAK;AACf,YAAI,QAAQ,CAAC,IAAD,CAAZ,EAAoB;AAClB,cAAI,IAAI,CAAC,QAAL,CAAc,IAAd,EAAoB,eAApB,CAAJ,EAA0C;AACxC,YAAA,IAAI,CAAC,YAAL,CAAkB,IAAlB,EAAwB,eAAxB,EAAyC,KAAzC;AACD;;AACD,UAAA,IAAI,CAAC,YAAL,CAAkB,IAAlB,EAAwB,aAAxB,EAAuC,IAAvC;AACD,SALD,MAKO,IAAI,CAAC,IAAI,CAAC,QAAL,CAAc,IAAd,EAAoB,aAApB,CAAL,EAAyC;AAC9C,UAAA,IAAI,CAAC,YAAL,CAAkB,IAAlB,EAAwB,eAAxB,EAAyC,IAAzC;AACD;AACF,OATG,CAAJ;AAUD,KAZD,MAYO;AACL,UAAM,WAAW,GAAG,IAAI,CAAC,eAAL,CAAqB,aAArB,CAApB;AACA,UAAI,WAAS,GAAG,IAAhB,CAFK,CAGL;;AACA,MAAA,IAAI,CAAC,WAAD,EAAc,UAAC,IAAD,EAAK;AACrB,YAAI,CAAC,QAAQ,CAAC,IAAD,CAAb,EAAqB;AACnB,UAAA,WAAS,GAAG,KAAZ;AACA,iBAAO,KAAP;AACD;AACF,OALG,CAAJ;;AAMA,UAAI,WAAJ,EAAe;AACb,aAAK,KAAL;AACD,OAFD,MAEO;AACL;AACA;AACA,QAAA,IAAI,CAAC,KAAD,EAAQ,UAAC,IAAD,EAAK;AACf,cAAI,QAAQ,CAAC,IAAD,CAAZ,EAAoB;AAClB,gBAAI,IAAI,CAAC,QAAL,CAAc,IAAd,EAAoB,aAApB,CAAJ,EAAwC;AACtC,cAAA,IAAI,CAAC,YAAL,CAAkB,IAAlB,EAAwB,aAAxB,EAAuC,KAAvC;AACD;;AACD,YAAA,IAAI,CAAC,YAAL,CAAkB,IAAlB,EAAwB,eAAxB,EAAyC,IAAzC;AACD;AACF,SAPG,CAAJ;AAQD;AACF;AACF,GAvCO;AAyCR;;AAEG;;;AACI,EAAA,aAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACE,SAAK,QAAL;AACD,GAFM,CA3DT,CA+DE;;;AACO,EAAA,aAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACE,QAAM,WAAW,GAAG,KAAK,kBAAL,EAApB;;AACA,QAAI,WAAJ,EAAiB;AACf,MAAA,SAAS,CAAC,WAAW,CAAC,IAAb,CAAT;AACD,KAFD,MAEO;AACL;AACA,UAAM,UAAU,GAAG,KAAK,kBAAL,EAAnB;AACA,MAAA,IAAI,CAAC,UAAD,EAAa,UAAC,SAAD,EAAU;AACzB,QAAA,SAAS,CAAC,eAAV,CAA0B,aAA1B;AACA,QAAA,SAAS,CAAC,eAAV,CAA0B,eAA1B;AACD,OAHG,CAAJ;AAID;AACF,GAZM;;AAaT,SAAA,aAAA;AAAC,CA7ED,CAA4B,SAA5B,CAAA;;AA+EA,eAAe,aAAf","sourcesContent":["import { each } from '@antv/util';\nimport { IList, ListItem } from '../../../dependents';\nimport { clearList } from './list-highlight-util';\nimport ListState from './list-state';\nconst STATUS_UNACTIVE = 'inactive';\nconst STATUS_ACTIVE = 'active';\ntype MatchCallback = (item: ListItem) => boolean;\n\n/**\n * highlight Action 的效果是 active 和 inactive 两个状态的组合\n * @class\n * @ignore\n */\nclass ListHighlight extends ListState {\n  protected stateName: string = STATUS_ACTIVE;\n  protected ignoreItemStates = ['unchecked']; // 当存在 unchecked 状态时不触发\n  // 如果 item.name 匹配，则设置 highlight 以及取消\n  protected setItemsState(list: IList, name: string, enable: boolean) {\n    this.setHighlightBy(list, (item) => item.name === name, enable);\n  }\n\n  // 单个 item 设置状态\n  protected setItemState(list: IList, item: ListItem, enable: boolean) {\n    const items = list.getItems();\n    this.setHighlightBy(list, (el) => el === item, enable);\n  }\n\n  // 根据条件设置 highlight\n  private setHighlightBy(list: IList, callback: MatchCallback, enable: boolean) {\n    const items = list.getItems();\n    if (enable) {\n      // 设置 highlight 时，保留之前已经 Highlight 的项\n      each(items, (item) => {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNACTIVE)) {\n            list.setItemState(item, STATUS_UNACTIVE, false);\n          }\n          list.setItemState(item, STATUS_ACTIVE, true);\n        } else if (!list.hasState(item, STATUS_ACTIVE)) {\n          list.setItemState(item, STATUS_UNACTIVE, true);\n        }\n      });\n    } else {\n      const activeItems = list.getItemsByState(STATUS_ACTIVE);\n      let allCancel = true;\n      // 检测 activeItems 是否要全部取消\n      each(activeItems, (item) => {\n        if (!callback(item)) {\n          allCancel = false;\n          return false;\n        }\n      });\n      if (allCancel) {\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(items, (item) => {\n          if (callback(item)) {\n            if (list.hasState(item, STATUS_ACTIVE)) {\n              list.setItemState(item, STATUS_ACTIVE, false);\n            }\n            list.setItemState(item, STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * highlight 图例项（坐标轴文本）\n   */\n  public highlight() {\n    this.setState();\n  }\n\n  // 需要全部清理 active 和 unactive\n  public clear() {\n    const triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      clearList(triggerInfo.list);\n    } else {\n      // 如果不是 component 的事件触发，则所有满足触发条件的组件都清除该状态\n      const components = this.getAllowComponents();\n      each(components, (component) => {\n        component.clearItemsState(STATUS_ACTIVE);\n        component.clearItemsState(STATUS_UNACTIVE);\n      });\n    }\n  }\n}\n\nexport default ListHighlight;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}