{"ast":null,"code":"import { isObject, each, find, get } from '@antv/util';\nimport { polarToCartesian } from '../../../../util/graphics';\n/** label text和line距离 4px */\n\nvar MARGIN = 4;\n\nfunction antiCollision(labelShapes, labels, lineHeight, plotRange, center, isRight) {\n  // adjust y position of labels to avoid overlapping\n  var overlapping = true;\n  var start = plotRange.start;\n  var end = plotRange.end;\n  var startY = Math.min(start.y, end.y);\n  var totalHeight = Math.abs(start.y - end.y);\n  var i;\n  var maxY = 0;\n  var minY = Number.MIN_VALUE;\n  var boxes = labels.map(function (label) {\n    if (label.y > maxY) {\n      maxY = label.y;\n    }\n\n    if (label.y < minY) {\n      minY = label.y;\n    }\n\n    return {\n      size: lineHeight,\n      targets: [label.y - startY]\n    };\n  });\n  minY -= startY;\n\n  if (maxY - startY > totalHeight) {\n    totalHeight = maxY - startY;\n  }\n\n  while (overlapping) {\n    /* eslint no-loop-func: 0 */\n    boxes.forEach(function (box) {\n      var target = (Math.min.apply(minY, box.targets) + Math.max.apply(minY, box.targets)) / 2;\n      box.pos = Math.min(Math.max(minY, target - box.size / 2), totalHeight - box.size); // box.pos = Math.max(0, target - box.size / 2);\n    }); // detect overlapping and join boxes\n\n    overlapping = false;\n    i = boxes.length;\n\n    while (i--) {\n      if (i > 0) {\n        var previousBox = boxes[i - 1];\n        var box = boxes[i];\n\n        if (previousBox.pos + previousBox.size > box.pos) {\n          // overlapping\n          previousBox.size += box.size;\n          previousBox.targets = previousBox.targets.concat(box.targets); // overflow, shift up\n\n          if (previousBox.pos + previousBox.size > totalHeight) {\n            previousBox.pos = totalHeight - previousBox.size;\n          }\n\n          boxes.splice(i, 1); // removing box\n\n          overlapping = true;\n        }\n      }\n    }\n  }\n\n  i = 0; // step 4: normalize y and adjust x\n\n  boxes.forEach(function (b) {\n    var posInCompositeBox = startY + lineHeight / 2; // middle of the label\n\n    b.targets.forEach(function () {\n      labels[i].y = b.pos + posInCompositeBox;\n      posInCompositeBox += lineHeight;\n      i++;\n    });\n  });\n  var labelsMap = {};\n\n  for (var _i = 0, labelShapes_1 = labelShapes; _i < labelShapes_1.length; _i++) {\n    var labelShape = labelShapes_1[_i];\n    labelsMap[labelShape.get('id')] = labelShape;\n  } // (x - cx)^2 + (y - cy)^2 = totalR^2\n\n\n  labels.forEach(function (label) {\n    var rPow2 = label.r * label.r;\n    var dyPow2 = Math.pow(Math.abs(label.y - center.y), 2);\n\n    if (rPow2 < dyPow2) {\n      label.x = center.x;\n    } else {\n      var dx = Math.sqrt(rPow2 - dyPow2);\n\n      if (!isRight) {\n        // left\n        label.x = center.x - dx;\n      } else {\n        // right\n        label.x = center.x + dx;\n      }\n    } // adjust labelShape\n\n\n    var labelShape = labelsMap[label.id];\n    labelShape.attr('x', label.x);\n    labelShape.attr('y', label.y); // because group could not effect text-shape, should set text-shape position manually\n\n    var textShape = find(labelShape.getChildren(), function (ele) {\n      return ele.get('type') === 'text';\n    }); // @ts-ignore\n\n    if (textShape) {\n      textShape.attr('y', label.y);\n      textShape.attr('x', label.x);\n    }\n  });\n}\n\nexport function distribute(items, labels, shapes, region) {\n  if (!items.length || !labels.length) {\n    return;\n  }\n\n  var offset = items[0] ? items[0].offset : 0;\n  var coordinate = labels[0].get('coordinate');\n  var radius = coordinate.getRadius();\n  var center = coordinate.getCenter();\n\n  if (offset > 0) {\n    // const lineHeight = get(this.geometry.theme, ['pieLabels', 'labelHeight'], 14);\n    var lineHeight_1 = 14; // TODO\n\n    var totalR = radius + offset;\n    var totalHeight_1 = totalR * 2 + lineHeight_1 * 2;\n    var plotRange_1 = {\n      start: coordinate.start,\n      end: coordinate.end\n    }; // step 1: separate labels\n\n    var halves_1 = [[], []];\n    items.forEach(function (labelItem) {\n      if (!labelItem) {\n        return;\n      }\n\n      if (labelItem.textAlign === 'right') {\n        // left\n        halves_1[0].push(labelItem);\n      } else {\n        // right or center will be put on the right side\n        halves_1[1].push(labelItem);\n      }\n    });\n    halves_1.forEach(function (half, index) {\n      // step 2: reduce labels\n      var maxLabelsCountForOneSide = totalHeight_1 / lineHeight_1;\n\n      if (half.length > maxLabelsCountForOneSide) {\n        half.sort(function (a, b) {\n          // sort by percentage DESC\n          return b['..percent'] - a['..percent'];\n        });\n        half.splice(maxLabelsCountForOneSide, half.length - maxLabelsCountForOneSide);\n      } // step 3: distribute position (x and y)\n\n\n      half.sort(function (a, b) {\n        // sort by y ASC\n        return a.y - b.y;\n      });\n      antiCollision(labels, half, lineHeight_1, plotRange_1, center, index);\n    });\n  } // 配置 labelLine\n\n\n  each(items, function (item) {\n    if (item && item.labelLine) {\n      var distance = item.offset;\n      var angle = item.angle; // 贴近圆周\n\n      var startPoint = polarToCartesian(center.x, center.y, radius, angle);\n      var innerPoint = polarToCartesian(center.x, center.y, radius + distance / 2, angle);\n      var itemX = item.x + get(item, 'offsetX', 0);\n      var itemY = item.y + get(item, 'offsetY', 0);\n      var endPoint = {\n        x: itemX - Math.cos(angle) * MARGIN,\n        y: itemY - Math.sin(angle) * MARGIN\n      };\n\n      if (!isObject(item.labelLine)) {\n        // labelLine: true\n        item.labelLine = {};\n      }\n\n      item.labelLine.path = [\"M \" + startPoint.x, startPoint.y + \" Q\" + innerPoint.x, innerPoint.y + \" \" + endPoint.x, endPoint.y].join(',');\n    }\n  });\n}","map":{"version":3,"sources":["../../../../../src/geometry/label/layout/pie/distribute.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,GAA/B,QAA0C,YAA1C;AAKA,SAAS,gBAAT,QAAiC,2BAAjC;AAGA;;AACA,IAAM,MAAM,GAAG,CAAf;;AAEA,SAAS,aAAT,CAAuB,WAAvB,EAAoC,MAApC,EAA4C,UAA5C,EAAwD,SAAxD,EAAmE,MAAnE,EAA2E,OAA3E,EAAkF;AAChF;AACA,MAAI,WAAW,GAAG,IAAlB;AACA,MAAM,KAAK,GAAG,SAAS,CAAC,KAAxB;AACA,MAAM,GAAG,GAAG,SAAS,CAAC,GAAtB;AACA,MAAM,MAAM,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,CAAf,EAAkB,GAAG,CAAC,CAAtB,CAAf;AACA,MAAI,WAAW,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,CAAN,GAAU,GAAG,CAAC,CAAvB,CAAlB;AACA,MAAI,CAAJ;AAEA,MAAI,IAAI,GAAG,CAAX;AACA,MAAI,IAAI,GAAG,MAAM,CAAC,SAAlB;AACA,MAAM,KAAK,GAAG,MAAM,CAAC,GAAP,CAAW,UAAC,KAAD,EAAM;AAC7B,QAAI,KAAK,CAAC,CAAN,GAAU,IAAd,EAAoB;AAClB,MAAA,IAAI,GAAG,KAAK,CAAC,CAAb;AACD;;AACD,QAAI,KAAK,CAAC,CAAN,GAAU,IAAd,EAAoB;AAClB,MAAA,IAAI,GAAG,KAAK,CAAC,CAAb;AACD;;AACD,WAAO;AACL,MAAA,IAAI,EAAE,UADD;AAEL,MAAA,OAAO,EAAE,CAAC,KAAK,CAAC,CAAN,GAAU,MAAX;AAFJ,KAAP;AAID,GAXa,CAAd;AAYA,EAAA,IAAI,IAAI,MAAR;;AACA,MAAI,IAAI,GAAG,MAAP,GAAgB,WAApB,EAAiC;AAC/B,IAAA,WAAW,GAAG,IAAI,GAAG,MAArB;AACD;;AAED,SAAO,WAAP,EAAoB;AAClB;AACA,IAAA,KAAK,CAAC,OAAN,CAAc,UAAC,GAAD,EAAI;AAChB,UAAM,MAAM,GAAG,CAAC,IAAI,CAAC,GAAL,CAAS,KAAT,CAAe,IAAf,EAAqB,GAAG,CAAC,OAAzB,IAAoC,IAAI,CAAC,GAAL,CAAS,KAAT,CAAe,IAAf,EAAqB,GAAG,CAAC,OAAzB,CAArC,IAA0E,CAAzF;AACA,MAAA,GAAG,CAAC,GAAJ,GAAU,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,IAAT,EAAe,MAAM,GAAG,GAAG,CAAC,IAAJ,GAAW,CAAnC,CAAT,EAAgD,WAAW,GAAG,GAAG,CAAC,IAAlE,CAAV,CAFgB,CAGhB;AACD,KAJD,EAFkB,CAQlB;;AACA,IAAA,WAAW,GAAG,KAAd;AACA,IAAA,CAAC,GAAG,KAAK,CAAC,MAAV;;AACA,WAAO,CAAC,EAAR,EAAY;AACV,UAAI,CAAC,GAAG,CAAR,EAAW;AACT,YAAM,WAAW,GAAG,KAAK,CAAC,CAAC,GAAG,CAAL,CAAzB;AACA,YAAM,GAAG,GAAG,KAAK,CAAC,CAAD,CAAjB;;AACA,YAAI,WAAW,CAAC,GAAZ,GAAkB,WAAW,CAAC,IAA9B,GAAqC,GAAG,CAAC,GAA7C,EAAkD;AAChD;AACA,UAAA,WAAW,CAAC,IAAZ,IAAoB,GAAG,CAAC,IAAxB;AACA,UAAA,WAAW,CAAC,OAAZ,GAAsB,WAAW,CAAC,OAAZ,CAAoB,MAApB,CAA2B,GAAG,CAAC,OAA/B,CAAtB,CAHgD,CAKhD;;AACA,cAAI,WAAW,CAAC,GAAZ,GAAkB,WAAW,CAAC,IAA9B,GAAqC,WAAzC,EAAsD;AACpD,YAAA,WAAW,CAAC,GAAZ,GAAkB,WAAW,GAAG,WAAW,CAAC,IAA5C;AACD;;AACD,UAAA,KAAK,CAAC,MAAN,CAAa,CAAb,EAAgB,CAAhB,EATgD,CAS5B;;AACpB,UAAA,WAAW,GAAG,IAAd;AACD;AACF;AACF;AACF;;AAED,EAAA,CAAC,GAAG,CAAJ,CA3DgF,CA4DhF;;AACA,EAAA,KAAK,CAAC,OAAN,CAAc,UAAC,CAAD,EAAE;AACd,QAAI,iBAAiB,GAAG,MAAM,GAAG,UAAU,GAAG,CAA9C,CADc,CACmC;;AACjD,IAAA,CAAC,CAAC,OAAF,CAAU,OAAV,CAAkB,YAAA;AAChB,MAAA,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,GAAc,CAAC,CAAC,GAAF,GAAQ,iBAAtB;AACA,MAAA,iBAAiB,IAAI,UAArB;AACA,MAAA,CAAC;AACF,KAJD;AAKD,GAPD;AASA,MAAM,SAAS,GAAG,EAAlB;;AACA,OAAyB,IAAA,EAAA,GAAA,CAAA,EAAA,aAAA,GAAA,WAAzB,EAAyB,EAAA,GAAA,aAAA,CAAA,MAAzB,EAAyB,EAAA,EAAzB,EAAsC;AAAjC,QAAM,UAAU,GAAA,aAAA,CAAA,EAAA,CAAhB;AACH,IAAA,SAAS,CAAC,UAAU,CAAC,GAAX,CAAe,IAAf,CAAD,CAAT,GAAkC,UAAlC;AACD,GAzE+E,CA2EhF;;;AACA,EAAA,MAAM,CAAC,OAAP,CAAe,UAAC,KAAD,EAAM;AACnB,QAAM,KAAK,GAAG,KAAK,CAAC,CAAN,GAAU,KAAK,CAAC,CAA9B;AACA,QAAM,MAAM,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,CAAN,GAAU,MAAM,CAAC,CAA1B,CAAT,EAAuC,CAAvC,CAAf;;AACA,QAAI,KAAK,GAAG,MAAZ,EAAoB;AAClB,MAAA,KAAK,CAAC,CAAN,GAAU,MAAM,CAAC,CAAjB;AACD,KAFD,MAEO;AACL,UAAM,EAAE,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,GAAG,MAAlB,CAAX;;AACA,UAAI,CAAC,OAAL,EAAc;AACZ;AACA,QAAA,KAAK,CAAC,CAAN,GAAU,MAAM,CAAC,CAAP,GAAW,EAArB;AACD,OAHD,MAGO;AACL;AACA,QAAA,KAAK,CAAC,CAAN,GAAU,MAAM,CAAC,CAAP,GAAW,EAArB;AACD;AACF,KAdkB,CAgBnB;;;AACA,QAAM,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,EAAP,CAA5B;AACA,IAAA,UAAU,CAAC,IAAX,CAAgB,GAAhB,EAAqB,KAAK,CAAC,CAA3B;AACA,IAAA,UAAU,CAAC,IAAX,CAAgB,GAAhB,EAAqB,KAAK,CAAC,CAA3B,EAnBmB,CAqBnB;;AACA,QAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,WAAX,EAAD,EAA2B,UAAC,GAAD,EAAI;AAAK,aAAA,GAAG,CAAC,GAAJ,CAAQ,MAAR,MAAA,MAAA;AAA0B,KAA9D,CAAtB,CAtBmB,CAuBnB;;AACA,QAAI,SAAJ,EAAe;AACb,MAAA,SAAS,CAAC,IAAV,CAAe,GAAf,EAAoB,KAAK,CAAC,CAA1B;AACA,MAAA,SAAS,CAAC,IAAV,CAAe,GAAf,EAAoB,KAAK,CAAC,CAA1B;AACD;AACF,GA5BD;AA6BD;;AAED,OAAM,SAAU,UAAV,CAAqB,KAArB,EAAyC,MAAzC,EAA2D,MAA3D,EAAwF,MAAxF,EAAoG;AACxG,MAAI,CAAC,KAAK,CAAC,MAAP,IAAiB,CAAC,MAAM,CAAC,MAA7B,EAAqC;AACnC;AACD;;AACD,MAAM,MAAM,GAAG,KAAK,CAAC,CAAD,CAAL,GAAW,KAAK,CAAC,CAAD,CAAL,CAAS,MAApB,GAA6B,CAA5C;AACA,MAAM,UAAU,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,GAAV,CAAc,YAAd,CAAnB;AACA,MAAM,MAAM,GAAG,UAAU,CAAC,SAAX,EAAf;AACA,MAAM,MAAM,GAAG,UAAU,CAAC,SAAX,EAAf;;AAEA,MAAI,MAAM,GAAG,CAAb,EAAgB;AACd;AACA,QAAM,YAAU,GAAG,EAAnB,CAFc,CAES;;AACvB,QAAM,MAAM,GAAG,MAAM,GAAG,MAAxB;AACA,QAAM,aAAW,GAAG,MAAM,GAAG,CAAT,GAAa,YAAU,GAAG,CAA9C;AACA,QAAM,WAAS,GAAG;AAChB,MAAA,KAAK,EAAE,UAAU,CAAC,KADF;AAEhB,MAAA,GAAG,EAAE,UAAU,CAAC;AAFA,KAAlB,CALc,CAUd;;AACA,QAAM,QAAM,GAAG,CACb,EADa,EAEb,EAFa,CAAf;AAIA,IAAA,KAAK,CAAC,OAAN,CAAc,UAAC,SAAD,EAAU;AACtB,UAAI,CAAC,SAAL,EAAgB;AACd;AACD;;AACD,UAAI,SAAS,CAAC,SAAV,KAAwB,OAA5B,EAAqC;AACnC;AACA,QAAA,QAAM,CAAC,CAAD,CAAN,CAAU,IAAV,CAAe,SAAf;AACD,OAHD,MAGO;AACL;AACA,QAAA,QAAM,CAAC,CAAD,CAAN,CAAU,IAAV,CAAe,SAAf;AACD;AACF,KAXD;AAaA,IAAA,QAAM,CAAC,OAAP,CAAe,UAAC,IAAD,EAAO,KAAP,EAAY;AACzB;AACA,UAAM,wBAAwB,GAAG,aAAW,GAAG,YAA/C;;AACA,UAAI,IAAI,CAAC,MAAL,GAAc,wBAAlB,EAA4C;AAC1C,QAAA,IAAI,CAAC,IAAL,CAAU,UAAC,CAAD,EAAI,CAAJ,EAAK;AACb;AACA,iBAAO,CAAC,CAAC,WAAD,CAAD,GAAiB,CAAC,CAAC,WAAD,CAAzB;AACD,SAHD;AAIA,QAAA,IAAI,CAAC,MAAL,CAAY,wBAAZ,EAAsC,IAAI,CAAC,MAAL,GAAc,wBAApD;AACD,OATwB,CAWzB;;;AACA,MAAA,IAAI,CAAC,IAAL,CAAU,UAAC,CAAD,EAAI,CAAJ,EAAK;AACb;AACA,eAAO,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAf;AACD,OAHD;AAKA,MAAA,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,YAAf,EAA2B,WAA3B,EAAsC,MAAtC,EAA8C,KAA9C,CAAb;AACD,KAlBD;AAmBD,GAxDuG,CA0DxG;;;AACA,EAAA,IAAI,CAAC,KAAD,EAAQ,UAAC,IAAD,EAAK;AACf,QAAI,IAAI,IAAI,IAAI,CAAC,SAAjB,EAA4B;AAC1B,UAAM,QAAQ,GAAG,IAAI,CAAC,MAAtB;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,KAAnB,CAF0B,CAG1B;;AACA,UAAM,UAAU,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAR,EAAW,MAAM,CAAC,CAAlB,EAAqB,MAArB,EAA6B,KAA7B,CAAnC;AACA,UAAM,UAAU,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAR,EAAW,MAAM,CAAC,CAAlB,EAAqB,MAAM,GAAG,QAAQ,GAAG,CAAzC,EAA4C,KAA5C,CAAnC;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,CAAL,GAAS,GAAG,CAAC,IAAD,EAAO,SAAP,EAAkB,CAAlB,CAA1B;AACA,UAAM,KAAK,GAAG,IAAI,CAAC,CAAL,GAAS,GAAG,CAAC,IAAD,EAAO,SAAP,EAAkB,CAAlB,CAA1B;AACA,UAAM,QAAQ,GAAG;AACf,QAAA,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,KAAT,IAAkB,MADd;AAEf,QAAA,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,KAAT,IAAkB;AAFd,OAAjB;;AAIA,UAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAN,CAAb,EAA+B;AAC7B;AACA,QAAA,IAAI,CAAC,SAAL,GAAiB,EAAjB;AACD;;AACD,MAAA,IAAI,CAAC,SAAL,CAAe,IAAf,GAAsB,CACpB,OAAK,UAAU,CAAC,CADI,EAEjB,UAAU,CAAC,CAAX,GAAY,IAAZ,GAAiB,UAAU,CAAC,CAFX,EAGjB,UAAU,CAAC,CAAX,GAAY,GAAZ,GAAgB,QAAQ,CAAC,CAHR,EAIpB,QAAQ,CAAC,CAJW,EAKpB,IALoB,CAKf,GALe,CAAtB;AAMD;AACF,GAxBG,CAAJ;AAyBD","sourcesContent":["import { isObject, each, find, get } from '@antv/util';\n\nimport { BBox, IGroup, IShape } from '../../../../dependents';\nimport { LabelItem } from '../../interface';\n\nimport { polarToCartesian } from '../../../../util/graphics';\nimport { IElement } from '@antv/g-base';\n\n/** label text和line距离 4px */\nconst MARGIN = 4;\n\nfunction antiCollision(labelShapes, labels, lineHeight, plotRange, center, isRight) {\n  // adjust y position of labels to avoid overlapping\n  let overlapping = true;\n  const start = plotRange.start;\n  const end = plotRange.end;\n  const startY = Math.min(start.y, end.y);\n  let totalHeight = Math.abs(start.y - end.y);\n  let i;\n\n  let maxY = 0;\n  let minY = Number.MIN_VALUE;\n  const boxes = labels.map((label) => {\n    if (label.y > maxY) {\n      maxY = label.y;\n    }\n    if (label.y < minY) {\n      minY = label.y;\n    }\n    return {\n      size: lineHeight,\n      targets: [label.y - startY],\n    };\n  });\n  minY -= startY;\n  if (maxY - startY > totalHeight) {\n    totalHeight = maxY - startY;\n  }\n\n  while (overlapping) {\n    /* eslint no-loop-func: 0 */\n    boxes.forEach((box) => {\n      const target = (Math.min.apply(minY, box.targets) + Math.max.apply(minY, box.targets)) / 2;\n      box.pos = Math.min(Math.max(minY, target - box.size / 2), totalHeight - box.size);\n      // box.pos = Math.max(0, target - box.size / 2);\n    });\n\n    // detect overlapping and join boxes\n    overlapping = false;\n    i = boxes.length;\n    while (i--) {\n      if (i > 0) {\n        const previousBox = boxes[i - 1];\n        const box = boxes[i];\n        if (previousBox.pos + previousBox.size > box.pos) {\n          // overlapping\n          previousBox.size += box.size;\n          previousBox.targets = previousBox.targets.concat(box.targets);\n\n          // overflow, shift up\n          if (previousBox.pos + previousBox.size > totalHeight) {\n            previousBox.pos = totalHeight - previousBox.size;\n          }\n          boxes.splice(i, 1); // removing box\n          overlapping = true;\n        }\n      }\n    }\n  }\n\n  i = 0;\n  // step 4: normalize y and adjust x\n  boxes.forEach((b) => {\n    let posInCompositeBox = startY + lineHeight / 2; // middle of the label\n    b.targets.forEach(() => {\n      labels[i].y = b.pos + posInCompositeBox;\n      posInCompositeBox += lineHeight;\n      i++;\n    });\n  });\n\n  const labelsMap = {};\n  for (const labelShape of labelShapes) {\n    labelsMap[labelShape.get('id')] = labelShape;\n  }\n\n  // (x - cx)^2 + (y - cy)^2 = totalR^2\n  labels.forEach((label) => {\n    const rPow2 = label.r * label.r;\n    const dyPow2 = Math.pow(Math.abs(label.y - center.y), 2);\n    if (rPow2 < dyPow2) {\n      label.x = center.x;\n    } else {\n      const dx = Math.sqrt(rPow2 - dyPow2);\n      if (!isRight) {\n        // left\n        label.x = center.x - dx;\n      } else {\n        // right\n        label.x = center.x + dx;\n      }\n    }\n\n    // adjust labelShape\n    const labelShape = labelsMap[label.id];\n    labelShape.attr('x', label.x);\n    labelShape.attr('y', label.y);\n\n    // because group could not effect text-shape, should set text-shape position manually\n    const textShape = find(labelShape.getChildren(), (ele) => ele.get('type') === 'text') as IElement;\n    // @ts-ignore\n    if (textShape) {\n      textShape.attr('y', label.y);\n      textShape.attr('x', label.x);\n    }\n  });\n}\n\nexport function distribute(items: LabelItem[], labels: IGroup[], shapes: IShape[] | IGroup[], region: BBox) {\n  if (!items.length || !labels.length) {\n    return;\n  }\n  const offset = items[0] ? items[0].offset : 0;\n  const coordinate = labels[0].get('coordinate');\n  const radius = coordinate.getRadius();\n  const center = coordinate.getCenter();\n\n  if (offset > 0) {\n    // const lineHeight = get(this.geometry.theme, ['pieLabels', 'labelHeight'], 14);\n    const lineHeight = 14; // TODO\n    const totalR = radius + offset;\n    const totalHeight = totalR * 2 + lineHeight * 2;\n    const plotRange = {\n      start: coordinate.start,\n      end: coordinate.end,\n    };\n\n    // step 1: separate labels\n    const halves = [\n      [], // left\n      [], // right\n    ];\n    items.forEach((labelItem) => {\n      if (!labelItem) {\n        return;\n      }\n      if (labelItem.textAlign === 'right') {\n        // left\n        halves[0].push(labelItem);\n      } else {\n        // right or center will be put on the right side\n        halves[1].push(labelItem);\n      }\n    });\n\n    halves.forEach((half, index) => {\n      // step 2: reduce labels\n      const maxLabelsCountForOneSide = totalHeight / lineHeight;\n      if (half.length > maxLabelsCountForOneSide) {\n        half.sort((a, b) => {\n          // sort by percentage DESC\n          return b['..percent'] - a['..percent'];\n        });\n        half.splice(maxLabelsCountForOneSide, half.length - maxLabelsCountForOneSide);\n      }\n\n      // step 3: distribute position (x and y)\n      half.sort((a, b) => {\n        // sort by y ASC\n        return a.y - b.y;\n      });\n\n      antiCollision(labels, half, lineHeight, plotRange, center, index);\n    });\n  }\n\n  // 配置 labelLine\n  each(items, (item) => {\n    if (item && item.labelLine) {\n      const distance = item.offset;\n      const angle = item.angle;\n      // 贴近圆周\n      const startPoint = polarToCartesian(center.x, center.y, radius, angle);\n      const innerPoint = polarToCartesian(center.x, center.y, radius + distance / 2, angle);\n      const itemX = item.x + get(item, 'offsetX', 0);\n      const itemY = item.y + get(item, 'offsetY', 0);\n      const endPoint = {\n        x: itemX - Math.cos(angle) * MARGIN,\n        y: itemY - Math.sin(angle) * MARGIN,\n      };\n      if (!isObject(item.labelLine)) {\n        // labelLine: true\n        item.labelLine = {};\n      }\n      item.labelLine.path = [\n        `M ${startPoint.x}`,\n        `${startPoint.y} Q${innerPoint.x}`,\n        `${innerPoint.y} ${endPoint.x}`,\n        endPoint.y,\n      ].join(',');\n    }\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}