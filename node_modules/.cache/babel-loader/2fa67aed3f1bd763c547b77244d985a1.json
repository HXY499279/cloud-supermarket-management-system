{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, filter, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * 镜像分面\n */\n\nvar List =\n/** @class */\nfunction (_super) {\n  __extends(List, _super);\n\n  function List() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  List.prototype.getDefaultCfg = function () {\n    return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n      type: 'list',\n      cols: null,\n      showTitle: true,\n      title: _super.prototype.getDefaultTitleCfg.call(this)\n    });\n  };\n\n  List.prototype.render = function () {\n    _super.prototype.render.call(this);\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  };\n\n  List.prototype.afterEachView = function (view, facet) {\n    this.processAxis(view, facet);\n  };\n\n  List.prototype.beforeEachView = function (view, facet) {};\n\n  List.prototype.generateFacets = function (data) {\n    var _this = this;\n\n    var fields = this.cfg.fields;\n    var cols = this.cfg.cols;\n    var columnField = fields[0];\n\n    if (!columnField) {\n      throw new Error('No `fields` specified!');\n    }\n\n    var colValues = this.getFieldValues(data, columnField);\n    var count = colValues.length;\n    cols = cols || count; // 每行有几列数据\n    // 总共有几行\n\n    var rows = this.getPageCount(count, cols);\n    var rst = [];\n    colValues.forEach(function (val, index) {\n      // 当前 index 在那个行列\n      var _a = _this.getRowCol(index, cols),\n          row = _a.row,\n          col = _a.col;\n\n      var conditions = [{\n        field: columnField,\n        value: val,\n        values: colValues\n      }];\n      var facetData = filter(data, _this.getFacetDataFilter(conditions));\n      var facet = {\n        type: _this.cfg.type,\n        data: facetData,\n        region: _this.getRegion(rows, cols, col, row),\n        columnValue: val,\n        rowValue: val,\n        columnField: columnField,\n        rowField: null,\n        columnIndex: col,\n        rowIndex: row,\n        columnValuesLength: cols,\n        rowValuesLength: rows,\n        total: count\n      };\n      rst.push(facet);\n    });\n    return rst;\n  };\n  /**\n   * 设置 x 坐标轴的文本、title 是否显示\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n\n\n  List.prototype.getXAxisOption = function (x, axes, option, facet) {\n    // 当是最后一行或者下面没有 view 时文本不显示\n    if (facet.rowIndex !== facet.rowValuesLength - 1 && facet.columnValuesLength * facet.rowIndex + facet.columnIndex + 1 + facet.columnValuesLength <= facet.total) {\n      return __assign(__assign({}, option), {\n        label: null,\n        title: null\n      });\n    }\n\n    return option;\n  };\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n\n\n  List.prototype.getYAxisOption = function (y, axes, option, facet) {\n    if (facet.columnIndex !== 0) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    }\n\n    return option;\n  };\n  /**\n   * facet title\n   */\n\n\n  List.prototype.renderTitle = function () {\n    var _this = this;\n\n    each(this.facets, function (facet) {\n      var columnValue = facet.columnValue,\n          view = facet.view;\n      var formatter = get(_this.cfg.title, 'formatter');\n      var config = deepMix({\n        position: ['50%', '0%'],\n        content: formatter ? formatter(columnValue) : columnValue\n      }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.title);\n      view.annotation().text(config);\n    });\n  };\n  /**\n   * 计算分页数\n   * @param total\n   * @param pageSize\n   */\n\n\n  List.prototype.getPageCount = function (total, pageSize) {\n    return Math.floor((total + pageSize - 1) / pageSize);\n  };\n  /**\n   * 索引值在哪一页\n   * @param index\n   * @param pageSize\n   */\n\n\n  List.prototype.getRowCol = function (index, pageSize) {\n    var row = Math.floor(index / pageSize);\n    var col = index % pageSize;\n    return {\n      row: row,\n      col: col\n    };\n  };\n\n  return List;\n}(Facet);\n\nexport default List;","map":{"version":3,"sources":["../../src/facet/list.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, each, filter, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { AxisCfg, Datum, ListCfg, ListData } from '../interface';\n\nimport View from '../chart/view';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * 镜像分面\n */\nexport default class List extends Facet<ListCfg, ListData> {\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'list',\n      cols: null, // 默认显示一列\n      showTitle: true,\n      title: super.getDefaultTitleCfg(),\n    });\n  }\n\n  public render() {\n    super.render();\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  protected afterEachView(view: View, facet: ListData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: ListData) {}\n\n  protected generateFacets(data: Datum[]): ListData[] {\n    const { fields } = this.cfg;\n    let { cols } = this.cfg;\n\n    const [columnField] = fields;\n    if (!columnField) {\n      throw new Error('No `fields` specified!');\n    }\n\n    const colValues = this.getFieldValues(data, columnField);\n\n    const count = colValues.length;\n    cols = cols || count; // 每行有几列数据\n\n    // 总共有几行\n    const rows = this.getPageCount(count, cols);\n    const rst = [];\n\n    colValues.forEach((val, index) => {\n      // 当前 index 在那个行列\n      const { row, col } = this.getRowCol(index, cols);\n\n      const conditions = [{ field: columnField, value: val, values: colValues }];\n\n      const facetData = filter(data, this.getFacetDataFilter(conditions));\n\n      const facet: ListData = {\n        type: this.cfg.type,\n        data: facetData,\n        region: this.getRegion(rows, cols, col, row),\n\n        columnValue: val,\n        rowValue: val,\n        columnField,\n        rowField: null,\n        columnIndex: col,\n        rowIndex: row,\n        columnValuesLength: cols,\n        rowValuesLength: rows,\n\n        total: count,\n      };\n\n      rst.push(facet);\n    });\n\n    return rst;\n  }\n\n  /**\n   * 设置 x 坐标轴的文本、title 是否显示\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: ListData): object {\n    // 当是最后一行或者下面没有 view 时文本不显示\n    if (\n      facet.rowIndex !== facet.rowValuesLength - 1 &&\n      facet.columnValuesLength * facet.rowIndex + facet.columnIndex + 1 + facet.columnValuesLength <= facet.total\n    ) {\n      return {\n        ...option,\n        label: null,\n        title: null,\n      };\n    }\n    return option;\n  }\n\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: ListData): object {\n    if (facet.columnIndex !== 0) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n\n  /**\n   * facet title\n   */\n  private renderTitle() {\n    each(this.facets, (facet: ListData) => {\n      const { columnValue, view } = facet;\n      const formatter = get(this.cfg.title, 'formatter');\n\n      const config = deepMix(\n        {\n          position: ['50%', '0%'] as [string, string],\n          content: formatter ? formatter(columnValue) : columnValue,\n        },\n        getFactTitleConfig(DIRECTION.TOP),\n        this.cfg.title\n      );\n\n      view.annotation().text(config);\n    });\n  }\n\n  /**\n   * 计算分页数\n   * @param total\n   * @param pageSize\n   */\n  private getPageCount(total: number, pageSize: number): number {\n    return Math.floor((total + pageSize - 1) / pageSize);\n  }\n\n  /**\n   * 索引值在哪一页\n   * @param index\n   * @param pageSize\n   */\n  private getRowCol(index: number, pageSize: number) {\n    const row = Math.floor(index / pageSize);\n    const col = index % pageSize;\n\n    return { row, col };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}