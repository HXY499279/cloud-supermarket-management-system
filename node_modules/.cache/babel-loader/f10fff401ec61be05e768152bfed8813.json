{"ast":null,"code":"import { ext } from '@antv/matrix-util';\n/**\n * @ignore\n * 对图形元素进行矩阵变换，同时返回变换前的图形矩阵\n * @param shape 进行矩阵变换的图形\n * @param vector 矩阵变换的中心点\n * @param direct 矩阵变换的类型\n */\n\nexport function transformShape(shape, vector, direct) {\n  var scaledMatrix;\n  var x = vector[0],\n      y = vector[1];\n  shape.applyToMatrix([x, y, 1]);\n\n  if (direct === 'x') {\n    shape.setMatrix(ext.transform(shape.getMatrix(), [['t', -x, -y], ['s', 0.01, 1], ['t', x, y]]));\n    scaledMatrix = ext.transform(shape.getMatrix(), [['t', -x, -y], ['s', 100, 1], ['t', x, y]]);\n  } else if (direct === 'y') {\n    shape.setMatrix(ext.transform(shape.getMatrix(), [['t', -x, -y], ['s', 1, 0.01], ['t', x, y]]));\n    scaledMatrix = ext.transform(shape.getMatrix(), [['t', -x, -y], ['s', 1, 100], ['t', x, y]]);\n  } else if (direct === 'xy') {\n    shape.setMatrix(ext.transform(shape.getMatrix(), [['t', -x, -y], ['s', 0.01, 0.01], ['t', x, y]]));\n    scaledMatrix = ext.transform(shape.getMatrix(), [['t', -x, -y], ['s', 100, 100], ['t', x, y]]);\n  }\n\n  return scaledMatrix;\n}\n/**\n * 对图形元素进行剪切动画\n * @param element 进行动画的图形元素\n * @param animateCfg 动画配置\n * @param coordinate 当前坐标系\n * @param yMinPoint y 轴的最小值对应的图形坐标点\n * @param type 剪切动画的类型\n */\n\nexport function doScaleAnimate(element, animateCfg, coordinate, yMinPoint, type) {\n  var start = coordinate.start,\n      end = coordinate.end;\n  var width = coordinate.getWidth();\n  var height = coordinate.getHeight();\n  var x;\n  var y;\n\n  if (type === 'y') {\n    x = start.x + width / 2;\n    y = yMinPoint.y < start.y ? yMinPoint.y : start.y;\n  } else if (type === 'x') {\n    x = yMinPoint.x > start.x ? yMinPoint.x : start.x;\n    y = start.y + height / 2;\n  } else if (type === 'xy') {\n    if (coordinate.isPolar) {\n      x = coordinate.getCenter().x;\n      y = coordinate.getCenter().y;\n    } else {\n      x = (start.x + end.x) / 2;\n      y = (start.y + end.y) / 2;\n    }\n  }\n\n  var endMatrix = transformShape(element, [x, y], type);\n  element.animate({\n    matrix: endMatrix\n  }, animateCfg);\n}","map":{"version":3,"sources":["../../../src/animate/animation/util.ts"],"names":[],"mappings":"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","sourcesContent":["import { ext } from '@antv/matrix-util';\nimport { Coordinate, IGroup, IShape } from '../../dependents';\nimport { GAnimateCfg, Point } from '../../interface';\n\n/**\n * @ignore\n * 对图形元素进行矩阵变换，同时返回变换前的图形矩阵\n * @param shape 进行矩阵变换的图形\n * @param vector 矩阵变换的中心点\n * @param direct 矩阵变换的类型\n */\nexport function transformShape(shape: IShape | IGroup, vector: [number, number], direct: string): number[] {\n  let scaledMatrix;\n\n  const [x, y] = vector;\n  shape.applyToMatrix([x, y, 1]);\n  if (direct === 'x') {\n    shape.setMatrix(\n      ext.transform(shape.getMatrix(), [\n        ['t', -x, -y],\n        ['s', 0.01, 1],\n        ['t', x, y],\n      ])\n    );\n    scaledMatrix = ext.transform(shape.getMatrix(), [\n      ['t', -x, -y],\n      ['s', 100, 1],\n      ['t', x, y],\n    ]);\n  } else if (direct === 'y') {\n    shape.setMatrix(\n      ext.transform(shape.getMatrix(), [\n        ['t', -x, -y],\n        ['s', 1, 0.01],\n        ['t', x, y],\n      ])\n    );\n    scaledMatrix = ext.transform(shape.getMatrix(), [\n      ['t', -x, -y],\n      ['s', 1, 100],\n      ['t', x, y],\n    ]);\n  } else if (direct === 'xy') {\n    shape.setMatrix(\n      ext.transform(shape.getMatrix(), [\n        ['t', -x, -y],\n        ['s', 0.01, 0.01],\n        ['t', x, y],\n      ])\n    );\n    scaledMatrix = ext.transform(shape.getMatrix(), [\n      ['t', -x, -y],\n      ['s', 100, 100],\n      ['t', x, y],\n    ]);\n  }\n  return scaledMatrix;\n}\n\n/**\n * 对图形元素进行剪切动画\n * @param element 进行动画的图形元素\n * @param animateCfg 动画配置\n * @param coordinate 当前坐标系\n * @param yMinPoint y 轴的最小值对应的图形坐标点\n * @param type 剪切动画的类型\n */\nexport function doScaleAnimate(\n  element: IGroup | IShape,\n  animateCfg: GAnimateCfg,\n  coordinate: Coordinate,\n  yMinPoint: Point,\n  type: string\n) {\n  const { start, end } = coordinate;\n  const width = coordinate.getWidth();\n  const height = coordinate.getHeight();\n  let x: number;\n  let y: number;\n\n  if (type === 'y') {\n    x = start.x + width / 2;\n    y = yMinPoint.y < start.y ? yMinPoint.y : start.y;\n  } else if (type === 'x') {\n    x = yMinPoint.x > start.x ? yMinPoint.x : start.x;\n    y = start.y + height / 2;\n  } else if (type === 'xy') {\n    if (coordinate.isPolar) {\n      x = coordinate.getCenter().x;\n      y = coordinate.getCenter().y;\n    } else {\n      x = (start.x + end.x) / 2;\n      y = (start.y + end.y) / 2;\n    }\n  }\n\n  const endMatrix = transformShape(element, [x, y], type);\n  element.animate(\n    {\n      matrix: endMatrix,\n    },\n    animateCfg\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}