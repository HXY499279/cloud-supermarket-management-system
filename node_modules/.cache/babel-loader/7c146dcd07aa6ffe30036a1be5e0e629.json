{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { getAdjust as getAdjustClass } from '@antv/adjust';\nimport { getAttribute as getAttributeClass } from '@antv/attr';\nimport { clone, deepMix, each, flatten, get, isArray, isEmpty, isEqual, isFunction, isNil, isNumber, isObject, isPlainObject, isString, set } from '@antv/util';\nimport { doGroupAppearAnimate, getDefaultAnimateCfg } from '../animate';\nimport Base from '../base';\nimport { FIELD_ORIGIN, GROUP_ATTRS } from '../constant';\nimport { uniq } from '../util/helper';\nimport Element from './element';\nimport { getGeometryLabel } from './label';\nimport { getShapeFactory } from './shape/base';\nimport { group } from './util/group-data';\nimport { isModelChange } from './util/is-model-change';\nimport { parseFields } from './util/parse-fields';\nimport { getXDimensionLength } from '../util/coordinate'; // 根据 elementId 查找对应的 label，因为有可能一个 element 对应多个 labels，所以在给 labels 打标识时做了处理\n// 打标规则详见 ./label/base.ts#L263\n\nfunction filterLabelsById(id, labelsMap) {\n  var labels = [];\n  each(labelsMap, function (label, labelId) {\n    var elementId = labelId.split(' ')[0];\n\n    if (elementId === id) {\n      labels.push(label);\n    }\n  });\n  return labels;\n}\n/**\n * Geometry 几何标记基类，主要负责数据到图形属性的映射以及绘制逻辑。\n */\n\n\nvar Geometry =\n/** @class */\nfunction (_super) {\n  __extends(Geometry, _super);\n  /**\n   * 创建 Geometry 实例。\n   * @param cfg\n   */\n\n\n  function Geometry(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /** Geometry 几何标记类型。 */\n\n\n    _this.type = 'base'; // 内部产生的属性\n\n    /** Attribute map  */\n\n    _this.attributes = {};\n    /** Element map */\n\n    _this.elements = [];\n    /** 使用 key-value 结构存储 Element，key 为每个 Element 实例对应的唯一 ID */\n\n    _this.elementsMap = {};\n    /** animate 配置项 */\n\n    _this.animateOption = true;\n    /** 图形属性映射配置 */\n\n    _this.attributeOption = {};\n    /** 存储上一次渲染时的 element 映射表，用于更新逻辑 */\n\n    _this.lastElementsMap = {};\n    /** 是否生成多个点来绘制图形。 */\n\n    _this.generatePoints = false;\n    /** 存储发生图形属性映射前的数据 */\n\n    _this.beforeMappingData = null;\n    _this.adjusts = {};\n    _this.idFields = [];\n    _this.hasSorted = false;\n    _this.isCoordinateChanged = false;\n    var container = cfg.container,\n        labelsContainer = cfg.labelsContainer,\n        coordinate = cfg.coordinate,\n        data = cfg.data,\n        _a = cfg.sortable,\n        sortable = _a === void 0 ? false : _a,\n        _b = cfg.visible,\n        visible = _b === void 0 ? true : _b,\n        theme = cfg.theme,\n        _c = cfg.scales,\n        scales = _c === void 0 ? {} : _c,\n        _d = cfg.scaleDefs,\n        scaleDefs = _d === void 0 ? {} : _d,\n        // 柱状图间隔与宽度相关配置\n    intervalPadding = cfg.intervalPadding,\n        dodgePadding = cfg.dodgePadding,\n        maxColumnWidth = cfg.maxColumnWidth,\n        minColumnWidth = cfg.minColumnWidth,\n        columnWidthRatio = cfg.columnWidthRatio,\n        roseWidthRatio = cfg.roseWidthRatio,\n        multiplePieWidthRatio = cfg.multiplePieWidthRatio,\n        zIndexReversed = cfg.zIndexReversed;\n    _this.container = container;\n    _this.labelsContainer = labelsContainer;\n    _this.coordinate = coordinate;\n    _this.data = data;\n    _this.sortable = sortable;\n    _this.visible = visible;\n    _this.userTheme = theme;\n    _this.scales = scales;\n    _this.scaleDefs = scaleDefs; // 柱状图间隔与宽度相关配置\n\n    _this.intervalPadding = intervalPadding;\n    _this.dodgePadding = dodgePadding;\n    _this.maxColumnWidth = maxColumnWidth;\n    _this.minColumnWidth = minColumnWidth;\n    _this.columnWidthRatio = columnWidthRatio;\n    _this.roseWidthRatio = roseWidthRatio;\n    _this.multiplePieWidthRatio = multiplePieWidthRatio;\n    _this.zIndexReversed = zIndexReversed;\n    return _this;\n  }\n  /**\n   * 配置 position 通道映射规则。\n   *\n   * @example\n   * ```typescript\n   * // 数据结构: [{ x: 'A', y: 10, color: 'red' }]\n   * geometry.position('x*y');\n   * geometry.position([ 'x', 'y' ]);\n   * geometry.position({\n   *   fields: [ 'x', 'y' ],\n   * });\n   * ```\n   *\n   * @param cfg 映射规则\n   * @returns\n   */\n\n\n  Geometry.prototype.position = function (cfg) {\n    var positionCfg = cfg;\n\n    if (!isPlainObject(cfg)) {\n      // 字符串字段或者数组字段\n      positionCfg = {\n        fields: parseFields(cfg)\n      };\n    }\n\n    var fields = get(positionCfg, 'fields');\n\n    if (fields.length === 1) {\n      // 默认填充一维 1*xx\n      fields.unshift('1');\n      set(positionCfg, 'fields', fields);\n    }\n\n    set(this.attributeOption, 'position', positionCfg);\n    return this;\n  };\n\n  Geometry.prototype.color = function (field, cfg) {\n    this.createAttrOption('color', field, cfg);\n    return this;\n  };\n\n  Geometry.prototype.shape = function (field, cfg) {\n    this.createAttrOption('shape', field, cfg);\n    return this;\n  };\n\n  Geometry.prototype.size = function (field, cfg) {\n    this.createAttrOption('size', field, cfg);\n    return this;\n  };\n  /**\n   * 设置数据调整方式。G2 目前内置了四种类型：\n   * 1. dodge\n   * 2. stack\n   * 3. symmetric\n   * 4. jitter\n   *\n   *\n   * **Tip**\n   * + 对于 'dodge' 类型，可以额外进行如下属性的配置:\n   * ```typescript\n   * geometry.adjust('dodge', {\n   *   marginRatio: 0, // 取 0 到 1 范围的值（相对于每个柱子宽度），用于控制一个分组中柱子之间的间距\n   *   dodgeBy: 'x', // 该属性只对 'dodge' 类型生效，声明以哪个数据字段为分组依据\n   * });\n   * ```\n   *\n   * + 对于 'stack' 类型，可以额外进行如下属性的配置:\n   * ```typescript\n   * geometry.adjust('stack', {\n   *   reverseOrder: false, // 用于控制是否对数据进行反序操作\n   * });\n   * ```\n   *\n   * @example\n   * ```typescript\n   * geometry.adjust('stack');\n   *\n   * geometry.adjust({\n   *   type: 'stack',\n   *   reverseOrder: false,\n   * });\n   *\n   * // 组合使用 adjust\n   * geometry.adjust([ 'stack', 'dodge' ]);\n   *\n   * geometry.adjust([\n   *   { type: 'stack' },\n   *   { type: 'dodge', dodgeBy: 'x' },\n   * ]);\n   * ```\n   *\n   * @param adjustCfg 数据调整配置\n   * @returns\n   */\n\n\n  Geometry.prototype.adjust = function (adjustCfg) {\n    var adjusts = adjustCfg;\n\n    if (isString(adjustCfg) || isPlainObject(adjustCfg)) {\n      adjusts = [adjustCfg];\n    }\n\n    each(adjusts, function (adjust, index) {\n      if (!isObject(adjust)) {\n        adjusts[index] = {\n          type: adjust\n        };\n      }\n    });\n    this.adjustOption = adjusts;\n    return this;\n  };\n\n  Geometry.prototype.style = function (field, styleFunc) {\n    if (isString(field)) {\n      var fields = parseFields(field);\n      this.styleOption = {\n        fields: fields,\n        callback: styleFunc\n      };\n    } else {\n      var _a = field,\n          fields = _a.fields,\n          callback = _a.callback,\n          cfg = _a.cfg;\n\n      if (fields || callback || cfg) {\n        this.styleOption = field;\n      } else {\n        this.styleOption = {\n          cfg: field\n        };\n      }\n    }\n\n    return this;\n  };\n\n  Geometry.prototype.tooltip = function (field, cfg) {\n    if (isString(field)) {\n      var fields = parseFields(field);\n      this.tooltipOption = {\n        fields: fields,\n        callback: cfg\n      };\n    } else {\n      this.tooltipOption = field;\n    }\n\n    return this;\n  };\n  /**\n   * Geometry 动画配置。\n   *\n   * + `animate(false)` 关闭动画\n   * + `animate(true)` 开启动画，默认开启。\n   *\n   * 我们将动画分为四个场景：\n   * 1. appear: 图表第一次加载时的入场动画；\n   * 2. enter: 图表绘制完成，发生更新后，产生的新图形的进场动画；\n   * 3. update: 图表绘制完成，数据发生变更后，有状态变更的图形的更新动画；\n   * 4. leave: 图表绘制完成，数据发生变更后，被销毁图形的销毁动画。\n   *\n   * @example\n   * ```typescript\n   * animate({\n   *   enter: {\n   *     duration: 1000, // enter 动画执行时间\n   *   },\n   *   leave: false, // 关闭 leave 销毁动画\n   * });\n   * ```\n   *\n   * @param cfg 动画配置\n   * @returns\n   */\n\n\n  Geometry.prototype.animate = function (cfg) {\n    this.animateOption = cfg;\n    return this;\n  };\n\n  Geometry.prototype.label = function (field, secondParam, thirdParam) {\n    if (isString(field)) {\n      var labelOption = {};\n      var fields = parseFields(field);\n      labelOption.fields = fields;\n\n      if (isFunction(secondParam)) {\n        labelOption.callback = secondParam;\n      } else if (isPlainObject(secondParam)) {\n        labelOption.cfg = secondParam;\n      }\n\n      if (thirdParam) {\n        labelOption.cfg = thirdParam;\n      }\n\n      this.labelOption = labelOption;\n    } else {\n      this.labelOption = field;\n    }\n\n    return this;\n  };\n  /**\n   * 设置状态对应的样式。\n   *\n   * @example\n   * ```ts\n   * chart.interval().state({\n   *   selected: {\n   *     animate: { duration: 100, easing: 'easeLinear' },\n   *     style: {\n   *       lineWidth: 2,\n   *       stroke: '#000',\n   *     },\n   *   },\n   * });\n   * ```\n   *\n   * 如果图形 shape 是由多个 shape 组成，即为一个 G.Group 对象，那么针对 group 中的每个 shape，我们需要使用下列方式进行状态样式设置：\n   * 如果我们为 group 中的每个 shape 设置了 'name' 属性(shape.set('name', 'xx'))，则以 'name' 作为 key，否则默认以索引值（即 shape 的 添加顺序）为 key。\n   *\n   * ```ts\n   * chart.interval().shape('groupShape').state({\n   *   selected: {\n   *     style: {\n   *       0: { lineWidth: 2 },\n   *       1: { fillOpacity: 1 },\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   * @param cfg 状态样式\n   */\n\n\n  Geometry.prototype.state = function (cfg) {\n    this.stateOption = cfg;\n    return this;\n  };\n  /**\n   * 用于向 shape 中传入自定义的数据。目前可能仅仅可能用于在自定义 shape 的时候，像自定义 shape 中传入自定义的数据，方便实现自定义 shape 的配置能力。\n   *\n   * @example\n   * ```ts\n   * chart.interval().customInfo({ yourData: 'hello, g2!' });\n   * ```\n   *\n   * 然后在自定义 shape 的时候，可以拿到这个信息。\n   *\n   * ```ts\n   * registerShape('interval', 'your-shape', {\n   *   draw(shapeInfo, container) {\n   *     const { customInfo } = shapeInfo;\n   *     console.log(customInfo); // will log { yourData: 'hello, g2!' }.\n   *   }\n   * });\n   * ```\n   *\n   * @param cfg\n   */\n\n\n  Geometry.prototype.customInfo = function (cfg) {\n    this.customOption = cfg;\n    return this;\n  };\n  /**\n   * 初始化 Geomtry 实例：\n   * 创建 [[Attribute]] and [[Scale]] 实例，进行数据处理，包括分组、数值化以及数据调整。\n   */\n\n\n  Geometry.prototype.init = function (cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n\n    this.setCfg(cfg);\n    this.initAttributes(); // 创建图形属性\n    // 数据加工：分组 -> 数字化 -> adjust\n\n    this.processData(this.data); // 调整 scale\n\n    this.adjustScale();\n  };\n  /**\n   * Geometry 更新。\n   * @param [cfg] 更新的配置\n   */\n\n\n  Geometry.prototype.update = function (cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n\n    var data = cfg.data,\n        isDataChanged = cfg.isDataChanged,\n        isCoordinateChanged = cfg.isCoordinateChanged;\n\n    var _a = this,\n        attributeOption = _a.attributeOption,\n        lastAttributeOption = _a.lastAttributeOption;\n\n    if (!isEqual(attributeOption, lastAttributeOption)) {\n      // 映射发生改变，则重新创建图形属性\n      this.init(cfg);\n    } else if (data && (isDataChanged || !isEqual(data, this.data))) {\n      // 数据发生变化\n      this.setCfg(cfg);\n      this.initAttributes(); // 创建图形属性\n\n      this.processData(data); // 数据加工：分组 -> 数字化 -> adjust\n    } else {\n      // 有可能 coordinate 变化\n      this.setCfg(cfg);\n    } // 调整 scale\n\n\n    this.adjustScale();\n    this.isCoordinateChanged = isCoordinateChanged;\n  };\n  /**\n   * 将原始数据映射至图形空间，同时创建图形对象。\n   */\n\n\n  Geometry.prototype.paint = function (isUpdate) {\n    var _this = this;\n\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n\n    if (this.animateOption) {\n      this.animateOption = deepMix({}, getDefaultAnimateCfg(this.type, this.coordinate), this.animateOption);\n    }\n\n    this.defaultSize = undefined;\n    this.elements = [];\n    this.elementsMap = {};\n    var offscreenGroup = this.getOffscreenGroup();\n    offscreenGroup.clear();\n    var beforeMappingData = this.beforeMappingData;\n    var dataArray = this.beforeMapping(beforeMappingData);\n    var mappingArray = [];\n\n    for (var index = 0, length_1 = dataArray.length; index < length_1; index++) {\n      var eachGroup = dataArray[index];\n      var mappingData = this.mapping(eachGroup);\n      mappingArray.push(mappingData);\n      this.createElements(mappingData, index, isUpdate);\n    }\n\n    if (this.canDoGroupAnimation(isUpdate)) {\n      // 如果用户没有配置 appear.animation，就默认走整体动画\n      var container = this.container;\n      var type = this.type;\n      var coordinate = this.coordinate;\n      var animateCfg = get(this.animateOption, 'appear');\n      var yScale = this.getYScale();\n      var yMinPoint = coordinate.convert({\n        x: 0,\n        y: yScale.scale(this.getYMinValue())\n      });\n      doGroupAppearAnimate(container, animateCfg, type, coordinate, yMinPoint);\n    } // 添加 label\n\n\n    if (this.labelOption) {\n      this.renderLabels(flatten(mappingArray), isUpdate);\n    }\n\n    this.dataArray = mappingArray; // 销毁被删除的 elements\n\n    each(this.lastElementsMap, function (deletedElement) {\n      // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n      deletedElement.animate = _this.animateOption;\n      deletedElement.destroy();\n    });\n    this.lastElementsMap = this.elementsMap; // 缓存，用于更新\n\n    this.lastAttributeOption = __assign({}, this.attributeOption);\n\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  };\n  /**\n   * 清空当前 Geometry，配置项仍保留，但是内部创建的对象全部清空。\n   * @override\n   */\n\n\n  Geometry.prototype.clear = function () {\n    var _a = this,\n        container = _a.container,\n        geometryLabel = _a.geometryLabel,\n        offscreenGroup = _a.offscreenGroup;\n\n    if (container) {\n      container.clear();\n    }\n\n    if (geometryLabel) {\n      geometryLabel.clear();\n    }\n\n    if (offscreenGroup) {\n      offscreenGroup.clear();\n    } // 属性恢复至出厂状态\n\n\n    this.scaleDefs = undefined;\n    this.attributes = {};\n    this.scales = {};\n    this.elementsMap = {};\n    this.lastElementsMap = {};\n    this.elements = [];\n    this.adjusts = {};\n    this.dataArray = null;\n    this.beforeMappingData = null;\n    this.lastAttributeOption = undefined;\n    this.defaultSize = undefined;\n    this.idFields = [];\n    this.groupScales = undefined;\n    this.hasSorted = false;\n    this.isCoordinateChanged = false;\n  };\n  /**\n   * 销毁 Geometry 实例。\n   */\n\n\n  Geometry.prototype.destroy = function () {\n    this.clear();\n    var container = this.container;\n    container.remove(true);\n\n    if (this.offscreenGroup) {\n      this.offscreenGroup.remove(true);\n      this.offscreenGroup = null;\n    }\n\n    if (this.geometryLabel) {\n      this.geometryLabel.destroy();\n      this.geometryLabel = null;\n    }\n\n    this.theme = undefined;\n    this.shapeFactory = undefined;\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * 获取决定分组的图形属性对应的 scale 实例。\n   * @returns\n   */\n\n\n  Geometry.prototype.getGroupScales = function () {\n    return this.groupScales;\n  };\n  /**\n   * 根据名字获取图形属性实例。\n   */\n\n\n  Geometry.prototype.getAttribute = function (name) {\n    return this.attributes[name];\n  };\n  /** 获取 x 轴对应的 scale 实例。 */\n\n\n  Geometry.prototype.getXScale = function () {\n    return this.getAttribute('position').scales[0];\n  };\n  /** 获取 y 轴对应的 scale 实例。 */\n\n\n  Geometry.prototype.getYScale = function () {\n    return this.getAttribute('position').scales[1];\n  };\n  /**\n   * 获取决定分组的图形属性实例。\n   */\n\n\n  Geometry.prototype.getGroupAttributes = function () {\n    var rst = [];\n    each(this.attributes, function (attr) {\n      if (GROUP_ATTRS.includes(attr.type)) {\n        rst.push(attr);\n      }\n    });\n    return rst;\n  };\n  /** 获取图形属性默认的映射值。 */\n\n\n  Geometry.prototype.getDefaultValue = function (attrName) {\n    var value;\n    var attr = this.getAttribute(attrName);\n\n    if (attr && isEmpty(attr.scales)) {\n      // 获取映射至常量的值\n      value = attr.values[0];\n    }\n\n    return value;\n  };\n  /**\n   * 获取该数据发生图形映射后对应的 Attribute 图形空间数据。\n   * @param attr Attribute 图形属性实例。\n   * @param obj 需要进行映射的原始数据。\n   * @returns\n   */\n\n\n  Geometry.prototype.getAttributeValues = function (attr, obj) {\n    var params = [];\n    var scales = attr.scales;\n\n    for (var index = 0, length_2 = scales.length; index < length_2; index++) {\n      var scale = scales[index];\n      var field = scale.field;\n\n      if (scale.isIdentity) {\n        params.push(scale.values);\n      } else {\n        params.push(obj[field]);\n      }\n    }\n\n    return attr.mapping.apply(attr, params);\n  };\n\n  Geometry.prototype.getAdjust = function (adjustType) {\n    return this.adjusts[adjustType];\n  };\n  /**\n   * 获取 shape 对应的 marker 样式。\n   * @param shapeName shape 具体名字\n   * @param cfg marker 信息\n   * @returns\n   */\n\n\n  Geometry.prototype.getShapeMarker = function (shapeName, cfg) {\n    var shapeFactory = this.getShapeFactory();\n    return shapeFactory.getMarker(shapeName, cfg);\n  };\n  /**\n   * 根据一定的规则查找 Geometry 的 Elements。\n   *\n   * ```typescript\n   * getElementsBy((element) => {\n   *   const data = element.getData();\n   *\n   *   return data.a === 'a';\n   * });\n   * ```\n   *\n   * @param condition 定义查找规则的回调函数。\n   * @returns\n   */\n\n\n  Geometry.prototype.getElementsBy = function (condition) {\n    return this.elements.filter(function (element) {\n      return condition(element);\n    });\n  };\n  /**\n   * 获取数据对应的唯一 id。\n   * @param data Element 对应的绘制数据\n   * @returns\n   */\n\n\n  Geometry.prototype.getElementId = function (data) {\n    data = isArray(data) ? data[0] : data;\n    var originData = data[FIELD_ORIGIN]; // 如果用户声明了使用哪些字段作为 id 值\n\n    if (this.idFields.length) {\n      var elementId = originData[this.idFields[0]];\n\n      for (var index = 1; index < this.idFields.length; index++) {\n        elementId += '-' + originData[this.idFields[index]];\n      }\n\n      return elementId;\n    }\n\n    var type = this.type;\n    var xScale = this.getXScale();\n    var yScale = this.getYScale();\n    var xField = xScale.field || 'x';\n    var yField = yScale.field || 'y';\n    var yVal = originData[yField];\n    var xVal;\n\n    if (xScale.type === 'identity') {\n      xVal = xScale.values[0];\n    } else {\n      xVal = originData[xField];\n    }\n\n    var id;\n\n    if (type === 'interval' || type === 'schema') {\n      id = \"\" + xVal;\n    } else if (type === 'line' || type === 'area' || type === 'path') {\n      id = type;\n    } else {\n      id = xVal + \"-\" + yVal;\n    }\n\n    var groupScales = this.groupScales;\n\n    if (isEmpty(groupScales)) {\n      groupScales = get(this.getAttribute('color'), 'scales', []);\n    }\n\n    for (var index = 0, length_3 = groupScales.length; index < length_3; index++) {\n      var groupScale = groupScales[index];\n      var field = groupScale.field;\n      id = id + \"-\" + originData[field];\n    } // 用户在进行 dodge 类型的 adjust 调整的时候设置了 dodgeBy 属性\n\n\n    var dodgeAdjust = this.getAdjust('dodge');\n\n    if (dodgeAdjust) {\n      var dodgeBy = dodgeAdjust.dodgeBy;\n\n      if (dodgeBy) {\n        id = id + \"-\" + originData[dodgeBy];\n      }\n    }\n\n    if (this.getAdjust('jitter')) {\n      id = id + \"-\" + data.x + \"-\" + data.y;\n    }\n\n    return id;\n  };\n  /**\n   * 获取所有需要创建 scale 的字段名称。\n   */\n\n\n  Geometry.prototype.getScaleFields = function () {\n    var fields = [];\n    var tmpMap = {};\n\n    var _a = this,\n        attributeOption = _a.attributeOption,\n        labelOption = _a.labelOption,\n        tooltipOption = _a.tooltipOption; // 获取图形属性上的 fields\n\n\n    for (var attributeType in attributeOption) {\n      if (attributeOption.hasOwnProperty(attributeType)) {\n        var eachOpt = attributeOption[attributeType];\n\n        if (eachOpt.fields) {\n          uniq(eachOpt.fields, fields, tmpMap);\n        } else if (eachOpt.values) {\n          // 考虑 size(10), shape('circle') 等场景\n          uniq(eachOpt.values, fields, tmpMap);\n        }\n      }\n    } // 获取 label 上的字段\n\n\n    if (labelOption && labelOption.fields) {\n      uniq(labelOption.fields, fields, tmpMap);\n    } // 获取 tooltip 上的字段\n\n\n    if (isObject(tooltipOption) && tooltipOption.fields) {\n      uniq(tooltipOption.fields, fields, tmpMap);\n    }\n\n    return fields;\n  };\n  /**\n   * 显示或者隐藏 geometry。\n   * @param visible\n   */\n\n\n  Geometry.prototype.changeVisible = function (visible) {\n    _super.prototype.changeVisible.call(this, visible);\n\n    var elements = this.elements;\n\n    for (var index = 0, length_4 = elements.length; index < length_4; index++) {\n      var element = elements[index];\n      element.changeVisible(visible);\n    }\n\n    if (visible) {\n      if (this.container) {\n        this.container.show();\n      }\n\n      if (this.labelsContainer) {\n        this.labelsContainer.show();\n      }\n    } else {\n      if (this.container) {\n        this.container.hide();\n      }\n\n      if (this.labelsContainer) {\n        this.labelsContainer.hide();\n      }\n    }\n  };\n  /**\n   * 获取当前配置中的所有分组 & 分类的字段。\n   * @return fields string[]\n   */\n\n\n  Geometry.prototype.getGroupFields = function () {\n    var groupFields = [];\n    var tmpMap = {}; // 用于去重过滤\n\n    for (var index = 0, length_5 = GROUP_ATTRS.length; index < length_5; index++) {\n      var attributeName = GROUP_ATTRS[index];\n      var cfg = this.attributeOption[attributeName];\n\n      if (cfg && cfg.fields) {\n        uniq(cfg.fields, groupFields, tmpMap);\n      }\n    }\n\n    return groupFields;\n  };\n  /**\n   * 获得图形的 x y 字段。\n   */\n\n\n  Geometry.prototype.getXYFields = function () {\n    var _a = this.attributeOption.position.fields,\n        x = _a[0],\n        y = _a[1];\n    return [x, y];\n  };\n  /**\n   * 获取该 Geometry 下所有生成的 shapes。\n   * @returns shapes\n   */\n\n\n  Geometry.prototype.getShapes = function () {\n    return this.elements.map(function (element) {\n      return element.shape;\n    });\n  };\n  /**\n   * 获取虚拟 Group。\n   * @returns\n   */\n\n\n  Geometry.prototype.getOffscreenGroup = function () {\n    if (!this.offscreenGroup) {\n      var GroupCtor = this.container.getGroupBase(); // 获取分组的构造函数\n\n      this.offscreenGroup = new GroupCtor({});\n    }\n\n    return this.offscreenGroup;\n  }; // 对数据进行排序\n\n\n  Geometry.prototype.sort = function (mappingArray) {\n    if (!this.hasSorted) {\n      // 未发生过排序\n      var xScale_1 = this.getXScale();\n      var xField_1 = xScale_1.field;\n\n      for (var index = 0; index < mappingArray.length; index++) {\n        var itemArr = mappingArray[index];\n        itemArr.sort(function (obj1, obj2) {\n          return xScale_1.translate(obj1[FIELD_ORIGIN][xField_1]) - xScale_1.translate(obj2[FIELD_ORIGIN][xField_1]);\n        });\n      }\n    }\n\n    this.hasSorted = true;\n  };\n  /**\n   * 调整度量范围。主要针对发生层叠以及一些特殊需求的 Geometry，比如 Interval 下的柱状图 Y 轴默认从 0 开始。\n   */\n\n\n  Geometry.prototype.adjustScale = function () {\n    var yScale = this.getYScale(); // 如果数据发生过 stack adjust，需要调整下 yScale 的数据范围\n\n    if (yScale && this.getAdjust('stack')) {\n      this.updateStackRange(yScale, this.beforeMappingData);\n    }\n  };\n  /**\n   * 获取当前 Geometry 对应的 Shape 工厂实例。\n   */\n\n\n  Geometry.prototype.getShapeFactory = function () {\n    var shapeType = this.shapeType;\n\n    if (!getShapeFactory(shapeType)) {\n      return;\n    }\n\n    if (!this.shapeFactory) {\n      this.shapeFactory = clone(getShapeFactory(shapeType)); // 防止多个 view 共享一个 shapeFactory 实例，导致 coordinate 被篡改\n    } // 因为这里缓存了 shapeFactory，但是外部可能会变更 coordinate，导致无法重新设置到 shapeFactory 中\n\n\n    this.shapeFactory.coordinate = this.coordinate; // theme 原因同上\n\n    this.shapeFactory.theme = this.theme.geometries[shapeType] || {};\n    return this.shapeFactory;\n  };\n  /**\n   * 获取每个 Shape 对应的关键点数据。\n   * @param obj 经过分组 -> 数字化 -> adjust 调整后的数据记录\n   * @returns\n   */\n\n\n  Geometry.prototype.createShapePointsCfg = function (obj) {\n    var xScale = this.getXScale();\n    var yScale = this.getYScale();\n    var x = this.normalizeValues(obj[xScale.field], xScale);\n    var y; // 存在没有 y 的情况\n\n    if (yScale) {\n      y = this.normalizeValues(obj[yScale.field], yScale);\n    } else {\n      y = obj.y ? obj.y : 0.1;\n    }\n\n    return {\n      x: x,\n      y: y,\n      y0: yScale ? yScale.scale(this.getYMinValue()) : undefined\n    };\n  };\n  /**\n   * 创建 Element 实例。\n   * @param mappingDatum Element 对应的绘制数据\n   * @param [isUpdate] 是否处于更新阶段\n   * @returns element 返回创建的 Element 实例\n   */\n\n\n  Geometry.prototype.createElement = function (mappingDatum, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n\n    var container = this.container;\n    var shapeCfg = this.getDrawCfg(mappingDatum); // 获取绘制图形的配置信息\n\n    var shapeFactory = this.getShapeFactory();\n    var element = new Element({\n      shapeFactory: shapeFactory,\n      container: container,\n      offscreenGroup: this.getOffscreenGroup()\n    });\n    element.animate = this.animateOption;\n    element.geometry = this;\n    element.draw(shapeCfg, isUpdate); // 绘制\n\n    return element;\n  };\n  /**\n   * 获取每条数据对应的图形绘制数据。\n   * @param mappingDatum 映射后的数据\n   * @returns draw cfg\n   */\n\n\n  Geometry.prototype.getDrawCfg = function (mappingDatum) {\n    var originData = mappingDatum[FIELD_ORIGIN]; // 原始数据\n\n    var cfg = {\n      mappingData: mappingDatum,\n      data: originData,\n      x: mappingDatum.x,\n      y: mappingDatum.y,\n      color: mappingDatum.color,\n      size: mappingDatum.size,\n      isInCircle: this.coordinate.isPolar,\n      customInfo: this.customOption\n    };\n    var shapeName = mappingDatum.shape;\n\n    if (!shapeName && this.getShapeFactory()) {\n      shapeName = this.getShapeFactory().defaultShapeType;\n    }\n\n    cfg.shape = shapeName; // 获取默认样式\n\n    var theme = this.theme.geometries[this.shapeType];\n    cfg.defaultStyle = get(theme, [shapeName, 'default'], {}).style;\n\n    if (!cfg.defaultStyle && this.getShapeFactory()) {\n      cfg.defaultStyle = this.getShapeFactory().getDefaultStyle(theme);\n    }\n\n    var styleOption = this.styleOption;\n\n    if (styleOption) {\n      cfg.style = this.getStyleCfg(styleOption, originData);\n    }\n\n    if (this.generatePoints) {\n      cfg.points = mappingDatum.points;\n      cfg.nextPoints = mappingDatum.nextPoints;\n    }\n\n    return cfg;\n  };\n  /**\n   * 创建所有的 Elements。\n   * @param mappingData\n   * @param [isUpdate]\n   * @returns elements\n   */\n\n\n  Geometry.prototype.createElements = function (mappingData, index, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n\n    var _a = this,\n        lastElementsMap = _a.lastElementsMap,\n        elementsMap = _a.elementsMap,\n        elements = _a.elements;\n\n    for (var subIndex = 0, length_6 = mappingData.length; subIndex < length_6; subIndex++) {\n      var mappingDatum = mappingData[subIndex];\n      var id = this.getElementId(mappingDatum);\n\n      if (elementsMap[id]) {\n        // 存在重复数据，则根据再根据 index 进行区分\n        id = id + \"-\" + index + \"-\" + subIndex;\n      }\n\n      var result = lastElementsMap[id];\n\n      if (!result) {\n        // 创建新的 element\n        result = this.createElement(mappingDatum, isUpdate);\n      } else {\n        // element 已经创建\n        var currentShapeCfg = this.getDrawCfg(mappingDatum);\n        var preShapeCfg = result.getModel();\n\n        if (this.isCoordinateChanged || isModelChange(currentShapeCfg, preShapeCfg)) {\n          result.animate = this.animateOption; // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n\n          result.update(currentShapeCfg); // 更新对应的 element\n        }\n\n        delete lastElementsMap[id];\n      }\n\n      elements.push(result);\n      elementsMap[id] = result;\n    } // 对 elements 的 zIndex 进行反序\n\n\n    if (this.zIndexReversed) {\n      var length_7 = elements.length;\n      elements.forEach(function (ele, idx) {\n        ele.shape.setZIndex(length_7 - idx);\n      });\n    }\n\n    return elements;\n  };\n  /**\n   * 获取渲染的 label 类型。\n   */\n\n\n  Geometry.prototype.getLabelType = function () {\n    var _a = this,\n        labelOption = _a.labelOption,\n        coordinate = _a.coordinate,\n        type = _a.type;\n\n    var coordinateType = coordinate.type,\n        isTransposed = coordinate.isTransposed;\n    var labelType = get(labelOption, ['cfg', 'type']);\n\n    if (!labelType) {\n      // 用户未定义，则进行默认的逻辑\n      if (coordinateType === 'polar') {\n        // 极坐标下使用通用的极坐标文本，转置则使用饼图\n        labelType = isTransposed ? 'pie' : 'polar';\n      } else if (coordinateType === 'theta') {\n        // theta 坐标系下使用饼图文本\n        labelType = 'pie';\n      } else if (type === 'interval' || type === 'polygon') {\n        labelType = 'interval';\n      } else {\n        labelType = 'base';\n      }\n    }\n\n    return labelType;\n  };\n  /**\n   * 获取 Y 轴上的最小值。\n   */\n\n\n  Geometry.prototype.getYMinValue = function () {\n    var yScale = this.getYScale();\n    var min = yScale.min,\n        max = yScale.max;\n    var value;\n\n    if (min >= 0) {\n      value = min;\n    } else if (max <= 0) {\n      // 当值全位于负区间时，需要保证 ymin 在区域内，不可为 0\n      value = max;\n    } else {\n      value = 0;\n    }\n\n    return value;\n  }; // 创建图形属性相关的配置项\n\n\n  Geometry.prototype.createAttrOption = function (attrName, field, cfg) {\n    if (isNil(field) || isObject(field)) {\n      if (isObject(field) && isEqual(Object.keys(field), ['values'])) {\n        // shape({ values: [ 'funnel' ] })\n        set(this.attributeOption, attrName, {\n          fields: field.values\n        });\n      } else {\n        set(this.attributeOption, attrName, field);\n      }\n    } else {\n      var attrCfg = {};\n\n      if (isNumber(field)) {\n        // size(3)\n        attrCfg.values = [field];\n      } else {\n        attrCfg.fields = parseFields(field);\n      }\n\n      if (cfg) {\n        if (isFunction(cfg)) {\n          attrCfg.callback = cfg;\n        } else {\n          attrCfg.values = cfg;\n        }\n      }\n\n      set(this.attributeOption, attrName, attrCfg);\n    }\n  };\n\n  Geometry.prototype.initAttributes = function () {\n    var _this = this;\n\n    var _a = this,\n        attributes = _a.attributes,\n        attributeOption = _a.attributeOption,\n        theme = _a.theme,\n        shapeType = _a.shapeType;\n\n    this.groupScales = [];\n    var tmpMap = {};\n\n    var _loop_1 = function (attrType) {\n      if (attributeOption.hasOwnProperty(attrType)) {\n        var option = attributeOption[attrType];\n\n        if (!option) {\n          return {\n            value: void 0\n          };\n        }\n\n        var attrCfg = __assign({}, option);\n\n        var callback = attrCfg.callback,\n            values = attrCfg.values,\n            _a = attrCfg.fields,\n            fields = _a === void 0 ? [] : _a; // 获取每一个字段对应的 scale\n\n        var scales = fields.map(function (field) {\n          var scale = _this.scales[field];\n\n          if (scale.isCategory && !tmpMap[field] && GROUP_ATTRS.includes(attrType)) {\n            _this.groupScales.push(scale);\n\n            tmpMap[field] = true;\n          }\n\n          return scale;\n        });\n        attrCfg.scales = scales;\n\n        if (attrType !== 'position' && scales.length === 1 && scales[0].type === 'identity') {\n          // 用户在图形通道上声明了常量字段 color('red'), size(5)\n          attrCfg.values = scales[0].values;\n        } else if (!callback && !values) {\n          // 用户没有指定任何规则，则使用默认的映射规则\n          if (attrType === 'size') {\n            attrCfg.values = theme.sizes;\n          } else if (attrType === 'shape') {\n            attrCfg.values = theme.shapes[shapeType] || [];\n          } else if (attrType === 'color') {\n            if (scales.length) {\n              // 根据数值个数使用对应的色板\n              attrCfg.values = scales[0].values.length <= 10 ? theme.colors10 : theme.colors20;\n            } else {\n              attrCfg.values = theme.colors10;\n            }\n          }\n        }\n\n        var AttributeCtor = getAttributeClass(attrType);\n        attributes[attrType] = new AttributeCtor(attrCfg);\n      }\n    }; // 遍历每一个 attrOption，各自创建 Attribute 实例\n\n\n    for (var attrType in attributeOption) {\n      var state_1 = _loop_1(attrType);\n\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n  }; // 处理数据：分组 -> 数字化 -> adjust 调整\n\n\n  Geometry.prototype.processData = function (data) {\n    this.hasSorted = false;\n    var scales = this.getAttribute('position').scales;\n    var categoryScales = scales.filter(function (scale) {\n      return scale.isCategory;\n    });\n    var groupedArray = this.groupData(data); // 数据分组\n\n    var beforeAdjust = [];\n\n    for (var i = 0, len = groupedArray.length; i < len; i++) {\n      var subData = groupedArray[i];\n      var arr = [];\n\n      for (var j = 0, subLen = subData.length; j < subLen; j++) {\n        var originData = subData[j];\n        var item = {}; // tslint:disable-next-line: forin\n\n        for (var k in originData) {\n          item[k] = originData[k];\n        }\n\n        item[FIELD_ORIGIN] = originData; // 将分类数据翻译成数据, 仅对位置相关的度量进行数字化处理\n\n        for (var _i = 0, categoryScales_1 = categoryScales; _i < categoryScales_1.length; _i++) {\n          var scale = categoryScales_1[_i];\n          var field = scale.field;\n          item[field] = scale.translate(item[field]);\n        }\n\n        arr.push(item);\n      }\n\n      beforeAdjust.push(arr);\n    }\n\n    var dataArray = this.adjustData(beforeAdjust); // 进行 adjust 数据调整\n\n    this.beforeMappingData = dataArray;\n    return dataArray;\n  }; // 调整数据\n\n\n  Geometry.prototype.adjustData = function (dataArray) {\n    var adjustOption = this.adjustOption;\n\n    var _a = this,\n        intervalPadding = _a.intervalPadding,\n        dodgePadding = _a.dodgePadding,\n        theme = _a.theme; // 兼容theme配置\n\n\n    var maxColumnWidth = this.maxColumnWidth || theme.maxColumnWidth;\n    var minColumnWidth = this.minColumnWidth || theme.minColumnWidth;\n    var columnWidthRatio = this.columnWidthRatio || theme.columnWidthRatio;\n    var result = dataArray;\n\n    if (adjustOption) {\n      var xScale = this.getXScale();\n      var yScale = this.getYScale();\n      var xField = xScale.field;\n      var yField = yScale ? yScale.field : null;\n      var xDimensionLength = getXDimensionLength(this.coordinate);\n      var groupNum = xScale.values.length; // 传入size计算相关参数，默认宽度、最大最小宽度约束\n\n      var sizeAttr = this.getAttribute('size');\n      var defaultSize = void 0;\n\n      if (sizeAttr) {\n        defaultSize = sizeAttr.values[0];\n      }\n\n      for (var i = 0, len = adjustOption.length; i < len; i++) {\n        var adjust = adjustOption[i];\n\n        var adjustCfg = __assign({\n          xField: xField,\n          yField: yField,\n          intervalPadding: intervalPadding,\n          dodgePadding: dodgePadding,\n          xDimensionLength: xDimensionLength,\n          groupNum: groupNum,\n          defaultSize: defaultSize,\n          maxColumnWidth: maxColumnWidth,\n          minColumnWidth: minColumnWidth,\n          columnWidthRatio: columnWidthRatio\n        }, adjust);\n\n        var type = adjust.type;\n\n        if (type === 'dodge') {\n          var adjustNames = [];\n\n          if (xScale.isCategory || xScale.type === 'identity') {\n            adjustNames.push('x');\n          } else if (!yScale) {\n            adjustNames.push('y');\n          } else {\n            throw new Error('dodge is not support linear attribute, please use category attribute!');\n          }\n\n          adjustCfg.adjustNames = adjustNames; // 每个分组内每条柱子的宽度占比，用户不可指定，用户需要通过 columnWidthRatio 指定\n          // 兼容theme配置\n\n          adjustCfg.dodgeRatio = columnWidthRatio;\n        } else if (type === 'stack') {\n          var coordinate = this.coordinate;\n\n          if (!yScale) {\n            // 一维的情况下获取高度和默认size\n            adjustCfg.height = coordinate.getHeight();\n            var size = this.getDefaultValue('size') || 3;\n            adjustCfg.size = size;\n          } // 不进行 transpose 时，用户又没有设置这个参数时，默认从上向下\n\n\n          if (!coordinate.isTransposed && isNil(adjustCfg.reverseOrder)) {\n            adjustCfg.reverseOrder = true;\n          }\n        }\n\n        var adjustCtor = getAdjustClass(type);\n        var adjustInstance = new adjustCtor(adjustCfg);\n        result = adjustInstance.process(result);\n        this.adjusts[type] = adjustInstance;\n      }\n    }\n\n    return result;\n  }; // 对数据进行分组\n\n\n  Geometry.prototype.groupData = function (data) {\n    var groupScales = this.getGroupScales();\n    var scaleDefs = this.scaleDefs;\n    var appendConditions = {};\n    var groupFields = [];\n\n    for (var index = 0; index < groupScales.length; index++) {\n      var scale = groupScales[index];\n      var field = scale.field;\n      groupFields.push(field);\n\n      if (get(scaleDefs, [field, 'values'])) {\n        // 用户通过 view.scale() 接口指定了 values 属性\n        appendConditions[field] = scaleDefs[field].values;\n      }\n    }\n\n    return group(data, groupFields, appendConditions);\n  }; // 更新发生层叠后的数据对应的度量范围\n\n\n  Geometry.prototype.updateStackRange = function (scale, dataArray) {\n    var mergeArray = flatten(dataArray);\n    var field = scale.field;\n    var min = scale.min;\n    var max = scale.max;\n\n    for (var index = 0; index < mergeArray.length; index++) {\n      var obj = mergeArray[index];\n      var tmpMin = Math.min.apply(null, obj[field]);\n      var tmpMax = Math.max.apply(null, obj[field]);\n\n      if (tmpMin < min) {\n        min = tmpMin;\n      }\n\n      if (tmpMax > max) {\n        max = tmpMax;\n      }\n    }\n\n    var scaleDefs = this.scaleDefs;\n    var cfg = {};\n\n    if (min < scale.min && !get(scaleDefs, [field, 'min'])) {\n      // 用户如果在列定义中定义了 min，则以用户定义的为准\n      cfg.min = min;\n    }\n\n    if (max > scale.max && !get(scaleDefs, [field, 'max'])) {\n      // 用户如果在列定义中定义了 max\n      cfg.max = max;\n    }\n\n    scale.change(cfg);\n  }; // 将数据映射至图形空间前的操作：排序以及关键点的生成\n\n\n  Geometry.prototype.beforeMapping = function (beforeMappingData) {\n    // 当初加 clone 是因为 points 的引用关系，导致更新失败，可是现在貌似复现不出来了，所以暂时不进行 clone\n    // const source = clone(beforeMappingData);\n    var source = beforeMappingData;\n\n    if (this.sortable) {\n      this.sort(source);\n    }\n\n    if (this.generatePoints) {\n      // 需要生成关键点\n      for (var index = 0, length_8 = source.length; index < length_8; index++) {\n        var currentData = source[index];\n        this.generateShapePoints(currentData);\n        var nextData = source[index + 1];\n\n        if (nextData) {\n          this.generateShapePoints(nextData);\n          currentData[0].nextPoints = nextData[0].points;\n        }\n      }\n    }\n\n    return source;\n  }; // 生成 shape 的关键点\n\n\n  Geometry.prototype.generateShapePoints = function (data) {\n    var shapeFactory = this.getShapeFactory();\n    var shapeAttr = this.getAttribute('shape');\n\n    for (var index = 0; index < data.length; index++) {\n      var obj = data[index];\n      var cfg = this.createShapePointsCfg(obj);\n      var shape = shapeAttr ? this.getAttributeValues(shapeAttr, obj) : null;\n      var points = shapeFactory.getShapePoints(shape, cfg);\n      obj.points = points;\n    }\n  }; // 将数据归一化\n\n\n  Geometry.prototype.normalizeValues = function (values, scale) {\n    var rst = [];\n\n    if (isArray(values)) {\n      for (var index = 0; index < values.length; index++) {\n        var value = values[index];\n        rst.push(scale.scale(value));\n      }\n    } else {\n      rst = scale.scale(values);\n    }\n\n    return rst;\n  }; // 将数据映射至图形空间\n\n\n  Geometry.prototype.mapping = function (data) {\n    var attributes = this.attributes;\n    var mappingData = [];\n\n    for (var index = 0; index < data.length; index++) {\n      var record = data[index];\n      var newRecord = {\n        _origin: record[FIELD_ORIGIN],\n        points: record.points,\n        nextPoints: record.nextPoints\n      };\n\n      for (var k in attributes) {\n        if (attributes.hasOwnProperty(k)) {\n          var attr = attributes[k];\n          var names = attr.names;\n          var values = this.getAttributeValues(attr, record);\n\n          if (names.length > 1) {\n            // position 之类的生成多个字段的属性\n            for (var j = 0; j < values.length; j += 1) {\n              var val = values[j];\n              var name_1 = names[j];\n              newRecord[name_1] = isArray(val) && val.length === 1 ? val[0] : val; // 只有一个值时返回第一个属性值\n            }\n          } else {\n            // values.length === 1 的判断是以下情况，获取用户设置的图形属性值\n            // shape('a', ['dot', 'dash']), color('a', ['red', 'yellow'])\n            newRecord[names[0]] = values.length === 1 ? values[0] : values;\n          }\n        }\n      }\n\n      this.convertPoint(newRecord); // 将 x、y 转换成画布坐标\n\n      mappingData.push(newRecord);\n    }\n\n    return mappingData;\n  }; // 将归一化的坐标值转换成画布坐标\n\n\n  Geometry.prototype.convertPoint = function (mappingRecord) {\n    var x = mappingRecord.x,\n        y = mappingRecord.y;\n    var rstX;\n    var rstY;\n    var obj;\n    var coordinate = this.coordinate;\n\n    if (isArray(x) && isArray(y)) {\n      rstX = [];\n      rstY = [];\n\n      for (var i = 0, j = 0, xLen = x.length, yLen = y.length; i < xLen && j < yLen; i += 1, j += 1) {\n        obj = coordinate.convert({\n          x: x[i],\n          y: y[j]\n        });\n        rstX.push(obj.x);\n        rstY.push(obj.y);\n      }\n    } else if (isArray(y)) {\n      rstY = [];\n\n      for (var index = 0; index < y.length; index++) {\n        var yVal = y[index];\n        obj = coordinate.convert({\n          x: x,\n          y: yVal\n        });\n\n        if (rstX && rstX !== obj.x) {\n          if (!isArray(rstX)) {\n            rstX = [rstX];\n          }\n\n          rstX.push(obj.x);\n        } else {\n          rstX = obj.x;\n        }\n\n        rstY.push(obj.y);\n      }\n    } else if (isArray(x)) {\n      rstX = [];\n\n      for (var index = 0; index < x.length; index++) {\n        var xVal = x[index];\n        obj = coordinate.convert({\n          x: xVal,\n          y: y\n        });\n\n        if (rstY && rstY !== obj.y) {\n          if (!isArray(rstY)) {\n            rstY = [rstY];\n          }\n\n          rstY.push(obj.y);\n        } else {\n          rstY = obj.y;\n        }\n\n        rstX.push(obj.x);\n      }\n    } else {\n      var point = coordinate.convert({\n        x: x,\n        y: y\n      });\n      rstX = point.x;\n      rstY = point.y;\n    }\n\n    mappingRecord.x = rstX;\n    mappingRecord.y = rstY;\n  }; // 获取 style 配置\n\n\n  Geometry.prototype.getStyleCfg = function (styleOption, originData) {\n    var _a = styleOption.fields,\n        fields = _a === void 0 ? [] : _a,\n        callback = styleOption.callback,\n        cfg = styleOption.cfg;\n\n    if (cfg) {\n      // 用户直接配置样式属性\n      return cfg;\n    }\n\n    var params = fields.map(function (field) {\n      return originData[field];\n    });\n    return callback.apply(void 0, params);\n  };\n\n  Geometry.prototype.setCfg = function (cfg) {\n    var _this = this;\n\n    var coordinate = cfg.coordinate,\n        data = cfg.data,\n        theme = cfg.theme,\n        scaleDefs = cfg.scaleDefs;\n\n    if (coordinate) {\n      this.coordinate = coordinate;\n    }\n\n    if (data) {\n      this.data = data;\n    }\n\n    if (scaleDefs) {\n      this.scaleDefs = scaleDefs;\n      this.idFields = [];\n      each(scaleDefs, function (scaleDef, field) {\n        if (scaleDef && scaleDef.key) {\n          _this.idFields.push(field);\n        }\n      });\n    }\n\n    if (theme) {\n      this.theme = this.userTheme ? deepMix({}, theme, this.userTheme) : theme; // 支持 geometry 层级的主题设置\n    }\n  };\n\n  Geometry.prototype.renderLabels = function (mappingArray, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n\n    var geometryLabel = this.geometryLabel;\n\n    if (!geometryLabel) {\n      // 初次创建\n      var labelType = this.getLabelType();\n      var GeometryLabelsCtor = getGeometryLabel(labelType);\n      geometryLabel = new GeometryLabelsCtor(this);\n      this.geometryLabel = geometryLabel;\n    }\n\n    geometryLabel.render(mappingArray, isUpdate); // 将 label 同 element 进行关联\n\n    var labelsMap = geometryLabel.labelsRenderer.shapesMap;\n    each(this.elementsMap, function (element, id) {\n      var labels = filterLabelsById(id, labelsMap); // element 实例同 label 进行绑定\n\n      if (labels.length) {\n        element.labelShape = labels;\n\n        for (var i = 0; i < labels.length; i++) {\n          var label = labels[i];\n          var labelChildren = label.getChildren();\n\n          for (var j = 0; j < labelChildren.length; j++) {\n            var child = labelChildren[j];\n            child.cfg.name = ['element', 'label'];\n            child.cfg.element = element;\n          }\n        }\n      }\n    });\n  };\n  /**\n   * 是否需要进行群组入场动画\n   * 规则：\n   * 1. 如果发生更新，则不进行\n   * 2. 如果用户关闭 geometry 动画，则不进行\n   * 3. 如果用户关闭了 appear 动画，则不进行\n   * 4. 如果用户配置了 appear.animation，则不进行\n   */\n\n\n  Geometry.prototype.canDoGroupAnimation = function (isUpdate) {\n    return !isUpdate && this.animateOption && (get(this.animateOption, 'appear') === undefined || get(this.animateOption, 'appear') && get(this.animateOption, ['appear', 'animation']) === undefined);\n  };\n\n  return Geometry;\n}(Base);\n\nexport default Geometry;","map":{"version":3,"sources":["../../src/geometry/base.ts"],"names":[],"mappings":"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","sourcesContent":["import { Adjust, getAdjust as getAdjustClass } from '@antv/adjust';\nimport { Attribute, getAttribute as getAttributeClass } from '@antv/attr';\nimport {\n  clone,\n  deepMix,\n  each,\n  flatten,\n  get,\n  isArray,\n  isEmpty,\n  isEqual,\n  isFunction,\n  isNil,\n  isNumber,\n  isObject,\n  isPlainObject,\n  isString,\n  set,\n} from '@antv/util';\nimport { doGroupAppearAnimate, getDefaultAnimateCfg } from '../animate';\nimport Base from '../base';\nimport { FIELD_ORIGIN, GROUP_ATTRS } from '../constant';\nimport { BBox, Coordinate, IGroup, IShape, Scale } from '../dependents';\nimport {\n  AdjustOption,\n  AdjustType,\n  AnimateOption,\n  AttributeOption,\n  ColorAttrCallback,\n  Data,\n  Datum,\n  GeometryLabelCfg,\n  GeometryTooltipOption,\n  LabelCallback,\n  LabelOption,\n  LooseObject,\n  MappingDatum,\n  ScaleOption,\n  ShapeAttrCallback,\n  ShapeFactory,\n  ShapeInfo,\n  ShapeMarkerCfg,\n  ShapeMarkerAttrs,\n  ShapePoint,\n  SizeAttrCallback,\n  StateOption,\n  StyleCallback,\n  StyleOption,\n  TooltipCallback,\n  CustomOption,\n} from '../interface';\nimport { uniq } from '../util/helper';\nimport Element from './element';\nimport { getGeometryLabel } from './label';\nimport GeometryLabel from './label/base';\nimport { getShapeFactory } from './shape/base';\nimport { group } from './util/group-data';\nimport { isModelChange } from './util/is-model-change';\nimport { parseFields } from './util/parse-fields';\nimport { getXDimensionLength } from '../util/coordinate';\n\n/** @ignore */\ninterface AttributeInstanceCfg {\n  fields?: string[];\n  callback?: (...args) => any;\n  values?: string[] | number[];\n  scales?: Scale[];\n}\n\n/** @ignore */\ninterface AdjustInstanceCfg {\n  type: AdjustType;\n  adjustNames?: string[];\n  xField?: string;\n  yField?: string;\n\n  dodgeBy?: string;\n  marginRatio?: number;\n  dodgeRatio?: number;\n\n  size?: number;\n  height?: number;\n  reverseOrder?: boolean;\n\n  /** 像素级柱间宽度，调整offset */\n  intervalPadding?: number;\n  dodgePadding?: number;\n  /** x维度长度，计算归一化padding使用 */\n  xDimensionLength?: number;\n  /** 分组数，计算offset */\n  groupNum?: number;\n  /** 用户配置宽度 size */\n  defaultSize?: number;\n  /** 最大最小宽度约束 */\n  maxColumnWidth?: number;\n  minColumnWidth?: number;\n  /** 柱宽比例 */\n  columnWidthRatio?: number;\n}\n\n/** geometry.init() 传入参数 */\nexport interface InitCfg {\n  /** 坐标系 */\n  coordinate?: Coordinate;\n  /** 数据 */\n  data?: Data;\n  /** 主题对象 */\n  theme?: LooseObject;\n  /** 列定义 */\n  scaleDefs?: Record<string, ScaleOption>;\n  /** 因为数据使用的引用，所以需要有一个标识位标识数据是否发生了更新 */\n  isDataChanged?: boolean;\n  isCoordinateChanged?: boolean;\n}\n\n/** Geometry 构造函数参数 */\nexport interface GeometryCfg {\n  /** Geometry shape 的容器。 */\n  container: IGroup;\n  /** 绘制的坐标系对象。 */\n  coordinate?: Coordinate;\n  /** 绘制数据。 */\n  data?: Data;\n  /** 需要的 scales。 */\n  scales?: Record<string, Scale>;\n  /** 列定义 */\n  scaleDefs?: Record<string, ScaleOption>;\n  /** Geometry labels 的容器 */\n  labelsContainer?: IGroup;\n  /** 是否对数据进行排序 */\n  sortable?: boolean;\n  /** elements 的 zIndex 默认按顺序提升，通过 zIndexReversed 可以反序，从而数据越前，层级越高 */\n  zIndexReversed?: boolean;\n  /** 是否可见 */\n  visible?: boolean;\n  /** 主题配置 */\n  theme?: LooseObject;\n\n  /** 组间距 */\n  intervalPadding?: number;\n  /** 组内间距 */\n  dodgePadding?: number;\n  /** 柱状图最大宽度 */\n  maxColumnWidth?: number;\n  /** 柱状图最小宽度 */\n  minColumnWidth?: number;\n  /** 默认宽度占比，interval类型和schema类型通用 */\n  columnWidthRatio?: number;\n  /** 玫瑰图占比 */\n  roseWidthRatio?: number;\n  /** 多层饼图/环图占比 */\n  multiplePieWidthRatio?: number;\n}\n\n// 根据 elementId 查找对应的 label，因为有可能一个 element 对应多个 labels，所以在给 labels 打标识时做了处理\n// 打标规则详见 ./label/base.ts#L263\nfunction filterLabelsById(id: string, labelsMap: Record<string, IGroup>) {\n  const labels = [];\n  each(labelsMap, (label: IGroup, labelId: string) => {\n    const elementId = labelId.split(' ')[0];\n    if (elementId === id) {\n      labels.push(label);\n    }\n  });\n\n  return labels;\n}\n\n/**\n * Geometry 几何标记基类，主要负责数据到图形属性的映射以及绘制逻辑。\n */\nexport default class Geometry<S extends ShapePoint = ShapePoint> extends Base {\n  /** Geometry 几何标记类型。 */\n  public readonly type: string = 'base';\n  /** ShapeFactory 对应的类型。 */\n  public readonly shapeType: string;\n\n  // 在创建 Geometry 实例时可以传入的属性\n  /** Coordinate 坐标系实例。 */\n  public coordinate: Coordinate;\n  /** 用户绘制数据。 */\n  public data: Data;\n  /** 图形绘制容器。 */\n  public readonly container: IGroup;\n  /** label 绘制容器。 */\n  public readonly labelsContainer: IGroup;\n  /** 是否对数据进行排序，默认为 false。  */\n  public sortable: boolean;\n  /** 当前 Geometry 实例主题。  */\n  public theme: LooseObject;\n  /** 存储 geometry 需要的 scales，需要外部传入。 */\n  public scales: Record<string, Scale>;\n  /** scale 定义，需要外部传入。 */\n  public scaleDefs: Record<string, ScaleOption>;\n  /** 画布区域，用于 label 布局。 */\n  public canvasRegion: BBox;\n\n  // 内部产生的属性\n  /** Attribute map  */\n  public attributes: Record<string, Attribute> = {};\n  /** Element map */\n  public elements: Element[] = [];\n  /**\n   * 存储处理后的数据，\n   * + init() 及 updateData() 逻辑后, 结构为 Data[]；\n   * + paint() 逻辑后，结构为 MappingDatum[][]。\n   */\n  public dataArray: MappingDatum[][];\n  /** 存储 tooltip 配置信息。 */\n  public tooltipOption: GeometryTooltipOption | boolean;\n  /** 存储 label 配置信息。 */\n  public labelOption: LabelOption | false;\n  /** 状态量相关的配置项 */\n  public stateOption: StateOption;\n  /** 使用 key-value 结构存储 Element，key 为每个 Element 实例对应的唯一 ID */\n  public elementsMap: Record<string, Element> = {};\n  /** animate 配置项 */\n  public animateOption: AnimateOption | boolean = true;\n  /** 图形属性映射配置 */\n  protected attributeOption: Record<string, AttributeOption> = {};\n  /** adjust 配置项 */\n  protected adjustOption: AdjustOption[];\n  /** style 配置项 */\n  protected styleOption: StyleOption;\n  /** custom 自定义的配置项 */\n  protected customOption: CustomOption;\n  /** 每个 Geometry 对应的 Shape 工厂实例，用于创建各个 Shape */\n  protected shapeFactory: ShapeFactory;\n  /** 存储上一次渲染时的 element 映射表，用于更新逻辑 */\n  protected lastElementsMap: Record<string, Element> = {};\n  /** 是否生成多个点来绘制图形。 */\n  protected generatePoints: boolean = false;\n  /** 存储发生图形属性映射前的数据 */\n  protected beforeMappingData: Data[] = null;\n  /** 存储每个 shape 的默认 size，用于 Interval、Schema 几何标记 */\n  protected defaultSize: number;\n\n  // 用户通过 geometry 构造函数设置的主题\n  private userTheme: LooseObject;\n  private adjusts: Record<string, Adjust> = {};\n  private lastAttributeOption;\n  private idFields: string[] = [];\n  private geometryLabel: GeometryLabel;\n\n  // 柱状图间距相关配置\n  /** 组间距 */\n  protected intervalPadding: number;\n  /** 组内间距 */\n  protected dodgePadding: number;\n  /** 柱状图最大宽度 */\n  protected maxColumnWidth: number;\n  /** 柱状图最小宽度 */\n  protected minColumnWidth: number;\n  /** 一般柱状图宽度占比 */\n  protected columnWidthRatio: number;\n  /** 玫瑰图占比 */\n  protected roseWidthRatio: number;\n  /** 多层饼图/环图占比 */\n  protected multiplePieWidthRatio: number;\n  /** elements 的 zIndex 默认按顺序提升，通过 zIndexReversed 可以反序，从而数据越前，层级越高 */\n  protected zIndexReversed?: boolean;\n\n  /** 虚拟 Group，用于图形更新 */\n  private offscreenGroup: IGroup;\n  private groupScales: Scale[];\n  private hasSorted: boolean = false;\n  protected isCoordinateChanged: boolean = false;\n\n  /**\n   * 创建 Geometry 实例。\n   * @param cfg\n   */\n  constructor(cfg: GeometryCfg) {\n    super(cfg);\n\n    const {\n      container,\n      labelsContainer,\n      coordinate,\n      data,\n      sortable = false,\n      visible = true,\n      theme,\n      scales = {},\n      scaleDefs = {},\n      // 柱状图间隔与宽度相关配置\n      intervalPadding,\n      dodgePadding,\n      maxColumnWidth,\n      minColumnWidth,\n      columnWidthRatio,\n      roseWidthRatio,\n      multiplePieWidthRatio,\n      zIndexReversed,\n    } = cfg;\n\n    this.container = container;\n    this.labelsContainer = labelsContainer;\n    this.coordinate = coordinate;\n    this.data = data;\n    this.sortable = sortable;\n    this.visible = visible;\n    this.userTheme = theme;\n    this.scales = scales;\n    this.scaleDefs = scaleDefs;\n    // 柱状图间隔与宽度相关配置\n    this.intervalPadding = intervalPadding;\n    this.dodgePadding = dodgePadding;\n    this.maxColumnWidth = maxColumnWidth;\n    this.minColumnWidth = minColumnWidth;\n    this.columnWidthRatio = columnWidthRatio;\n    this.roseWidthRatio = roseWidthRatio;\n    this.multiplePieWidthRatio = multiplePieWidthRatio;\n    this.zIndexReversed = zIndexReversed;\n  }\n\n  /**\n   * 配置 position 通道映射规则。\n   *\n   * @example\n   * ```typescript\n   * // 数据结构: [{ x: 'A', y: 10, color: 'red' }]\n   * geometry.position('x*y');\n   * geometry.position([ 'x', 'y' ]);\n   * geometry.position({\n   *   fields: [ 'x', 'y' ],\n   * });\n   * ```\n   *\n   * @param cfg 映射规则\n   * @returns\n   */\n  public position(cfg: string | string[] | AttributeOption): Geometry {\n    let positionCfg = cfg;\n    if (!isPlainObject(cfg)) {\n      // 字符串字段或者数组字段\n      positionCfg = {\n        fields: parseFields(cfg),\n      };\n    }\n\n    const fields = get(positionCfg, 'fields');\n    if (fields.length === 1) {\n      // 默认填充一维 1*xx\n      fields.unshift('1');\n      set(positionCfg, 'fields', fields);\n    }\n    set(this.attributeOption, 'position', positionCfg);\n\n    return this;\n  }\n\n  /**\n   * 配置 color 通道映射规则。\n   *\n   * @example\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   * geometry.color({\n   *   fields: [ 'x' ],\n   *   values: [ '#1890ff', '#5AD8A6' ],\n   * });\n   * ```\n   *\n   * @param field 映射规则\n   * @returns\n   */\n  public color(field: AttributeOption): Geometry;\n  /**\n   * @example\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   *\n   * // 使用 '#1890ff' 颜色渲染图形\n   * geometry.color('#1890ff');\n   *\n   * // 根据 x 字段的数据值进行颜色的映射，这时候 G2 会在内部调用默认的回调函数，读取默认提供的颜色进行数据值到颜色值的映射。\n   * geometry.color('x');\n   *\n   * // 将 'x' 字段的数据值映射至指定的颜色值 colors（可以是字符串也可以是数组），此时用于通常映射分类数据\n   * geometry.color('x', [ '#1890ff', '#5AD8A6' ]);\n   *\n   * // 使用回调函数进行颜色值的自定义；可以使用多个字段使用、*号连接\n   * geometry.color('x', (xVal) => {\n   *   if (xVal === 'a') {\n   *     return 'red';\n   *   }\n   *   return 'blue';\n   * });\n   *\n   * // 指定颜色的渐变路径，用于映射连续的数据\n   * geometry.color('x', '#BAE7FF-#1890FF-#0050B3');\n   * ```\n   *\n   * @param field 参与颜色映射的数据字段，多个字段使用 '*' 连接符进行连接。\n   * @param cfg Optional, color 映射规则。\n   * @returns\n   */\n  public color(field: string, cfg?: string | string[] | ColorAttrCallback): Geometry;\n  public color(field: AttributeOption | string, cfg?: string | string[] | ColorAttrCallback): Geometry {\n    this.createAttrOption('color', field, cfg);\n\n    return this;\n  }\n\n  /**\n   * 配置 shape 通道映射规则。\n   *\n   * @example\n   *\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   * geometry.shape({\n   *   fields: [ 'x' ],\n   * });\n   * ```\n   *\n   * @param field 映射规则配置。\n   * @returns\n   */\n  public shape(field: AttributeOption): Geometry;\n  /**\n   *\n   * @example\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   *\n   * // 指定常量，将所有数据值映射到固定的 shape\n   * geometry.shape('circle');\n   *\n   * // 将指定的字段映射到内置的 shapes 数组中\n   * geometry.shape('x');\n   *\n   * // 将指定的字段映射到指定的 shapes 数组中\n   * geometry.shape('x', [ 'circle', 'diamond', 'square' ]);\n   *\n   * // 使用回调函数获取 shape，用于个性化的 shape 定制，可以根据单个或者多个字段确定\n   * geometry.shape('x', (xVal) => {\n   *   if (xVal === 'a') {\n   *     return 'circle';\n   *   }\n   *   return 'diamond';\n   * });\n   * ```\n   *\n   * @param field 参与 shape 映射的数据字段，多个字段使用 '*' 连接符进行连接。\n   * @param cfg Optional, shape 映射规则。\n   * @returns\n   */\n  public shape(field: string, cfg?: string[] | ShapeAttrCallback): Geometry;\n  public shape(field: AttributeOption | string, cfg?: string[] | ShapeAttrCallback): Geometry {\n    this.createAttrOption('shape', field, cfg);\n\n    return this;\n  }\n\n  /**\n   * 配置 size 通道映射规则。\n   *\n   * @example\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   * geometry.size({\n   *   values: [ 10 ],\n   * })\n   * ```\n   *\n   * @param field 映射规则。\n   * @returns\n   */\n  public size(field: AttributeOption): Geometry;\n  /**\n   *\n   * @example\n   * ```typescript\n   * // data: [{ x: 'A', y: 10, color: 'red' }, { x: 'B', y: 30, color: 'yellow' }]\n   *\n   * // 直接指定像素大小\n   * geometry.size(10);\n   *\n   * // 指定映射到 size 的字段，使用内置的默认大小范围为 [1, 10]\n   * geometry.size('x');\n   *\n   * // 指定映射到 size 字段外，还提供了 size 的最大值和最小值范围\n   * geometry.size('x', [ 5, 30 ]);\n   *\n   * // 使用回调函数映射 size，用于个性化的 size 定制，可以使用多个字段进行映射\n   * geometry.size('x', (xVal) => {\n   *   if (xVal === 'a') {\n   *     return 10;\n   *   }\n   *   return 5;\n   * });\n   * ```\n   *\n   * @param field 参与 size 映射的数据字段，多个字段使用 '*' 连接符进行连接。\n   * @param cfg Optional, size 映射规则\n   * @returns\n   */\n  public size(field: number | string, cfg?: [number, number] | SizeAttrCallback): Geometry;\n  public size(field: AttributeOption | number | string, cfg?: [number, number] | SizeAttrCallback): Geometry {\n    this.createAttrOption('size', field, cfg);\n\n    return this;\n  }\n\n  /**\n   * 设置数据调整方式。G2 目前内置了四种类型：\n   * 1. dodge\n   * 2. stack\n   * 3. symmetric\n   * 4. jitter\n   *\n   *\n   * **Tip**\n   * + 对于 'dodge' 类型，可以额外进行如下属性的配置:\n   * ```typescript\n   * geometry.adjust('dodge', {\n   *   marginRatio: 0, // 取 0 到 1 范围的值（相对于每个柱子宽度），用于控制一个分组中柱子之间的间距\n   *   dodgeBy: 'x', // 该属性只对 'dodge' 类型生效，声明以哪个数据字段为分组依据\n   * });\n   * ```\n   *\n   * + 对于 'stack' 类型，可以额外进行如下属性的配置:\n   * ```typescript\n   * geometry.adjust('stack', {\n   *   reverseOrder: false, // 用于控制是否对数据进行反序操作\n   * });\n   * ```\n   *\n   * @example\n   * ```typescript\n   * geometry.adjust('stack');\n   *\n   * geometry.adjust({\n   *   type: 'stack',\n   *   reverseOrder: false,\n   * });\n   *\n   * // 组合使用 adjust\n   * geometry.adjust([ 'stack', 'dodge' ]);\n   *\n   * geometry.adjust([\n   *   { type: 'stack' },\n   *   { type: 'dodge', dodgeBy: 'x' },\n   * ]);\n   * ```\n   *\n   * @param adjustCfg 数据调整配置\n   * @returns\n   */\n  public adjust(adjustCfg: string | string[] | AdjustOption | AdjustOption[]): Geometry {\n    let adjusts: any = adjustCfg;\n    if (isString(adjustCfg) || isPlainObject(adjustCfg)) {\n      adjusts = [adjustCfg];\n    }\n    each(adjusts, (adjust, index) => {\n      if (!isObject(adjust)) {\n        adjusts[index] = { type: adjust };\n      }\n    });\n\n    this.adjustOption = adjusts;\n    return this;\n  }\n\n  /**\n   * 图形样式配置。\n   *\n   * @example\n   * ```typescript\n   * // 配置图形样式\n   * style({\n   *   lineWidth: 2,\n   *   stroke: '#1890ff',\n   * });\n   *\n   * // 根据具体的数据进行详细配置\n   * style({\n   *   fields: [ 'x', 'y' ], // 数据字段\n   *   callback: (xVal, yVal) => {\n   *     const style = { lineWidth: 2, stroke: '#1890ff' };\n   *     if (xVal === 'a') {\n   *       style.lineDash = [ 2, 2 ];\n   *     }\n   *     return style;\n   *   },\n   * });\n   * ```\n   *\n   * @param field 配置样式属性或者样式规则。\n   * @returns\n   */\n  public style(field: StyleOption | LooseObject): Geometry;\n  /**\n   * @example\n   * ```typescript\n   * style('x*y', (xVal, yVal) => {\n   *   const style = { lineWidth: 2, stroke: '#1890ff' };\n   *   if (xVal === 'a') {\n   *     style.lineDash = [ 2, 2 ];\n   *   }\n   *   return style;\n   * });\n   * ```\n   *\n   * @param field 数据字段或者样式配置规则。\n   * @param styleFunc Optional, 样式配置回调函数。\n   * @returns\n   */\n  public style(field: string, styleFunc: StyleCallback): Geometry;\n  public style(field: StyleOption | LooseObject | string, styleFunc?: StyleCallback): Geometry {\n    if (isString(field)) {\n      const fields = parseFields(field);\n      this.styleOption = {\n        fields,\n        callback: styleFunc,\n      };\n    } else {\n      const { fields, callback, cfg } = field as StyleOption;\n      if (fields || callback || cfg) {\n        this.styleOption = field;\n      } else {\n        this.styleOption = {\n          cfg: field,\n        };\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * 配置 Geometry 显示的 tooltip 内容。\n   *\n   * `tooltip(false)` 代表关闭 tooltip。\n   * `tooltip(true)` 代表开启 tooltip。\n   *\n   * Geometry 默认允许 tooltip 展示，我们可以使用以下方法对 tooltip 的展示内容进行配置：\n   *\n   * @example\n   * ```typescript\n   * // data: [{x: 'a', y: 10}]\n   * tooltip({\n   *   fields: [ 'x' ],\n   * });\n   * ```\n   * ![](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*268uQ50if60AAAAAAAAAAABkARQnAQ)\n   *\n   * ```typescript\n   * tooltip({\n   *   fields: [ 'x', 'y' ],\n   * });\n   * ```\n   * ![](https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*A_ujSa8QhtcAAAAAAAAAAABkARQnAQ)\n   *\n   * tooltip() 方法同样支持数据映射及回调用法：\n   *\n   * @example\n   * ```typescript\n   * chart.tooltip({\n   *   itemTpl: '<li>{x}: {y}</li>',\n   * });\n   *\n   * chart.line()\n   *   .position('x*y')\n   *   .tooltip({\n   *     fields: [ 'x', 'y' ],\n   *     callback: (x, y) => {\n   *       return {\n   *         x,\n   *         y,\n   *       };\n   *     },\n   *   });\n   * ```\n   *\n   * 其返回的值必须为对象，该值中的属性同 chart.tooltip() 的 itemTpl 模板相对应，返回的变量可用于 itemTpl 的字符串模板。\n   *\n   * @param field tooltip 配置信息。\n   * @returns\n   */\n  public tooltip(field: GeometryTooltipOption | boolean): Geometry;\n  /**\n   * @example\n   * ```typescript\n   * // data: [{x: 'a', y: 10}]\n   *\n   * // 等同于 tooltip({ fields: [ 'x' ] })\n   * tooltip('x');\n   *\n   * // 等同于 tooltip({ fields: [ 'x', 'y' ] })\n   * tooltip('x*y');\n   *\n   * // 等同于 tooltip({ fields: [ 'x', 'y' ], callback: (x, y) => { x, y } })\n   * tooltip('x*y', (x, y) => {\n   *   return {\n   *     x,\n   *     y,\n   *   };\n   * });\n   * ```\n   *\n   * @param field 参与映射的字段。\n   * @param cfg Optional, 回调函数\n   * @returns\n   */\n  public tooltip(field: string, cfg?: TooltipCallback): Geometry;\n  public tooltip(field: GeometryTooltipOption | boolean | string, cfg?: TooltipCallback): Geometry {\n    if (isString(field)) {\n      const fields = parseFields(field);\n      this.tooltipOption = {\n        fields,\n        callback: cfg,\n      };\n    } else {\n      this.tooltipOption = field;\n    }\n\n    return this;\n  }\n\n  /**\n   * Geometry 动画配置。\n   *\n   * + `animate(false)` 关闭动画\n   * + `animate(true)` 开启动画，默认开启。\n   *\n   * 我们将动画分为四个场景：\n   * 1. appear: 图表第一次加载时的入场动画；\n   * 2. enter: 图表绘制完成，发生更新后，产生的新图形的进场动画；\n   * 3. update: 图表绘制完成，数据发生变更后，有状态变更的图形的更新动画；\n   * 4. leave: 图表绘制完成，数据发生变更后，被销毁图形的销毁动画。\n   *\n   * @example\n   * ```typescript\n   * animate({\n   *   enter: {\n   *     duration: 1000, // enter 动画执行时间\n   *   },\n   *   leave: false, // 关闭 leave 销毁动画\n   * });\n   * ```\n   *\n   * @param cfg 动画配置\n   * @returns\n   */\n  public animate(cfg: AnimateOption | boolean): Geometry {\n    this.animateOption = cfg;\n    return this;\n  }\n\n  /**\n   * Geometry label 配置。\n   *\n   * @example\n   * ```ts\n   * // data: [ {x: 1, y: 2, z: 'a'}, {x: 2, y: 2, z: 'b'} ]\n   * // 在每个图形上显示 z 字段对应的数值\n   * label({\n   *   fields: [ 'z' ]\n   * });\n   *\n   * label(false); // 不展示 label\n   *\n   * // 在每个图形上显示 x 字段对应的数值，同时配置文本颜色为红色\n   * label('x', {\n   *   style: {\n   *     fill: 'red',\n   *   },\n   * })\n   *\n   * // 以 type 类型的 label 渲染每个图形上显示 x 字段对应的数值，同时格式化文本内容\n   * label('x', (xValue) => {\n   *   return {\n   *     content: xValue + '%',\n   *   };\n   * }, {\n   *   type: 'base' // 声明 label 类型\n   * })\n   * ```\n   *\n   * @param field\n   * @returns label\n   */\n  public label(field: LabelOption | false | string): Geometry;\n  public label(field: string, secondParam: GeometryLabelCfg | LabelCallback): Geometry;\n  public label(field: string, secondParam: LabelCallback, thirdParam: GeometryLabelCfg): Geometry;\n  public label(\n    field: string | LabelOption | false,\n    secondParam?: GeometryLabelCfg | LabelCallback,\n    thirdParam?: GeometryLabelCfg\n  ): Geometry {\n    if (isString(field)) {\n      const labelOption: LabelOption = {};\n      const fields = parseFields(field);\n      labelOption.fields = fields;\n      if (isFunction(secondParam)) {\n        labelOption.callback = secondParam;\n      } else if (isPlainObject(secondParam)) {\n        labelOption.cfg = secondParam;\n      }\n\n      if (thirdParam) {\n        labelOption.cfg = thirdParam;\n      }\n      this.labelOption = labelOption;\n    } else {\n      this.labelOption = field;\n    }\n\n    return this;\n  }\n\n  /**\n   * 设置状态对应的样式。\n   *\n   * @example\n   * ```ts\n   * chart.interval().state({\n   *   selected: {\n   *     animate: { duration: 100, easing: 'easeLinear' },\n   *     style: {\n   *       lineWidth: 2,\n   *       stroke: '#000',\n   *     },\n   *   },\n   * });\n   * ```\n   *\n   * 如果图形 shape 是由多个 shape 组成，即为一个 G.Group 对象，那么针对 group 中的每个 shape，我们需要使用下列方式进行状态样式设置：\n   * 如果我们为 group 中的每个 shape 设置了 'name' 属性(shape.set('name', 'xx'))，则以 'name' 作为 key，否则默认以索引值（即 shape 的 添加顺序）为 key。\n   *\n   * ```ts\n   * chart.interval().shape('groupShape').state({\n   *   selected: {\n   *     style: {\n   *       0: { lineWidth: 2 },\n   *       1: { fillOpacity: 1 },\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   * @param cfg 状态样式\n   */\n  public state(cfg: StateOption) {\n    this.stateOption = cfg;\n    return this;\n  }\n\n  /**\n   * 用于向 shape 中传入自定义的数据。目前可能仅仅可能用于在自定义 shape 的时候，像自定义 shape 中传入自定义的数据，方便实现自定义 shape 的配置能力。\n   *\n   * @example\n   * ```ts\n   * chart.interval().customInfo({ yourData: 'hello, g2!' });\n   * ```\n   *\n   * 然后在自定义 shape 的时候，可以拿到这个信息。\n   *\n   * ```ts\n   * registerShape('interval', 'your-shape', {\n   *   draw(shapeInfo, container) {\n   *     const { customInfo } = shapeInfo;\n   *     console.log(customInfo); // will log { yourData: 'hello, g2!' }.\n   *   }\n   * });\n   * ```\n   *\n   * @param cfg\n   */\n  public customInfo(cfg: any) {\n    this.customOption = cfg;\n    return this;\n  }\n\n  /**\n   * 初始化 Geomtry 实例：\n   * 创建 [[Attribute]] and [[Scale]] 实例，进行数据处理，包括分组、数值化以及数据调整。\n   */\n  public init(cfg: InitCfg = {}) {\n    this.setCfg(cfg);\n    this.initAttributes(); // 创建图形属性\n\n    // 数据加工：分组 -> 数字化 -> adjust\n    this.processData(this.data);\n\n    // 调整 scale\n    this.adjustScale();\n  }\n\n  /**\n   * Geometry 更新。\n   * @param [cfg] 更新的配置\n   */\n  public update(cfg: InitCfg = {}) {\n    const { data, isDataChanged, isCoordinateChanged } = cfg;\n    const { attributeOption, lastAttributeOption } = this;\n\n    if (!isEqual(attributeOption, lastAttributeOption)) {\n      // 映射发生改变，则重新创建图形属性\n      this.init(cfg);\n    } else if (data && (isDataChanged || !isEqual(data, this.data))) {\n      // 数据发生变化\n      this.setCfg(cfg);\n      this.initAttributes(); // 创建图形属性\n      this.processData(data); // 数据加工：分组 -> 数字化 -> adjust\n    } else {\n      // 有可能 coordinate 变化\n      this.setCfg(cfg);\n    }\n\n    // 调整 scale\n    this.adjustScale();\n    this.isCoordinateChanged = isCoordinateChanged;\n  }\n\n  /**\n   * 将原始数据映射至图形空间，同时创建图形对象。\n   */\n  public paint(isUpdate: boolean = false) {\n    if (this.animateOption) {\n      this.animateOption = deepMix({}, getDefaultAnimateCfg(this.type, this.coordinate), this.animateOption);\n    }\n\n    this.defaultSize = undefined;\n    this.elements = [];\n    this.elementsMap = {};\n    const offscreenGroup = this.getOffscreenGroup();\n    offscreenGroup.clear();\n\n    const beforeMappingData = this.beforeMappingData;\n    const dataArray = this.beforeMapping(beforeMappingData);\n\n    const mappingArray = [];\n    for (let index = 0, length = dataArray.length; index < length; index++) {\n      const eachGroup = dataArray[index];\n      const mappingData = this.mapping(eachGroup);\n      mappingArray.push(mappingData);\n      this.createElements(mappingData, index, isUpdate);\n    }\n\n    if (this.canDoGroupAnimation(isUpdate)) {\n      // 如果用户没有配置 appear.animation，就默认走整体动画\n      const container = this.container;\n      const type = this.type;\n      const coordinate = this.coordinate;\n      const animateCfg = get(this.animateOption, 'appear');\n      const yScale = this.getYScale();\n      const yMinPoint = coordinate.convert({\n        x: 0,\n        y: yScale.scale(this.getYMinValue()),\n      });\n      doGroupAppearAnimate(container, animateCfg, type, coordinate, yMinPoint);\n    }\n\n    // 添加 label\n    if (this.labelOption) {\n      this.renderLabels(flatten(mappingArray), isUpdate);\n    }\n\n    this.dataArray = mappingArray;\n\n    // 销毁被删除的 elements\n    each(this.lastElementsMap, (deletedElement: Element) => {\n      // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n      deletedElement.animate = this.animateOption;\n      deletedElement.destroy();\n    });\n\n    this.lastElementsMap = this.elementsMap;\n\n    // 缓存，用于更新\n    this.lastAttributeOption = {\n      ...this.attributeOption,\n    };\n\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  }\n\n  /**\n   * 清空当前 Geometry，配置项仍保留，但是内部创建的对象全部清空。\n   * @override\n   */\n  public clear() {\n    const { container, geometryLabel, offscreenGroup } = this;\n    if (container) {\n      container.clear();\n    }\n\n    if (geometryLabel) {\n      geometryLabel.clear();\n    }\n\n    if (offscreenGroup) {\n      offscreenGroup.clear();\n    }\n\n    // 属性恢复至出厂状态\n    this.scaleDefs = undefined;\n    this.attributes = {};\n    this.scales = {};\n    this.elementsMap = {};\n    this.lastElementsMap = {};\n    this.elements = [];\n    this.adjusts = {};\n    this.dataArray = null;\n    this.beforeMappingData = null;\n    this.lastAttributeOption = undefined;\n    this.defaultSize = undefined;\n    this.idFields = [];\n    this.groupScales = undefined;\n    this.hasSorted = false;\n    this.isCoordinateChanged = false;\n  }\n\n  /**\n   * 销毁 Geometry 实例。\n   */\n  public destroy() {\n    this.clear();\n    const container = this.container;\n    container.remove(true);\n\n    if (this.offscreenGroup) {\n      this.offscreenGroup.remove(true);\n      this.offscreenGroup = null;\n    }\n\n    if (this.geometryLabel) {\n      this.geometryLabel.destroy();\n      this.geometryLabel = null;\n    }\n    this.theme = undefined;\n    this.shapeFactory = undefined;\n\n    super.destroy();\n  }\n\n  /**\n   * 获取决定分组的图形属性对应的 scale 实例。\n   * @returns\n   */\n  public getGroupScales(): Scale[] {\n    return this.groupScales;\n  }\n\n  /**\n   * 根据名字获取图形属性实例。\n   */\n  public getAttribute(name: string): Attribute {\n    return this.attributes[name];\n  }\n\n  /** 获取 x 轴对应的 scale 实例。 */\n  public getXScale(): Scale {\n    return this.getAttribute('position').scales[0];\n  }\n\n  /** 获取 y 轴对应的 scale 实例。 */\n  public getYScale(): Scale {\n    return this.getAttribute('position').scales[1];\n  }\n\n  /**\n   * 获取决定分组的图形属性实例。\n   */\n  public getGroupAttributes(): Attribute[] {\n    const rst = [];\n    each(this.attributes, (attr: Attribute) => {\n      if (GROUP_ATTRS.includes(attr.type)) {\n        rst.push(attr);\n      }\n    });\n    return rst;\n  }\n\n  /** 获取图形属性默认的映射值。 */\n  public getDefaultValue(attrName: string) {\n    let value: any;\n    const attr = this.getAttribute(attrName);\n    if (attr && isEmpty(attr.scales)) {\n      // 获取映射至常量的值\n      value = attr.values[0];\n    }\n    return value;\n  }\n\n  /**\n   * 获取该数据发生图形映射后对应的 Attribute 图形空间数据。\n   * @param attr Attribute 图形属性实例。\n   * @param obj 需要进行映射的原始数据。\n   * @returns\n   */\n  public getAttributeValues(attr: Attribute, obj: Datum) {\n    const params = [];\n    const scales = attr.scales;\n    for (let index = 0, length = scales.length; index < length; index++) {\n      const scale = scales[index];\n      const field = scale.field;\n      if (scale.isIdentity) {\n        params.push(scale.values);\n      } else {\n        params.push(obj[field]);\n      }\n    }\n\n    return attr.mapping(...params);\n  }\n\n  public getAdjust(adjustType: string) {\n    return this.adjusts[adjustType];\n  }\n\n  /**\n   * 获取 shape 对应的 marker 样式。\n   * @param shapeName shape 具体名字\n   * @param cfg marker 信息\n   * @returns\n   */\n  public getShapeMarker(shapeName: string, cfg: ShapeMarkerCfg): ShapeMarkerAttrs {\n    const shapeFactory = this.getShapeFactory();\n    return shapeFactory.getMarker(shapeName, cfg);\n  }\n\n  /**\n   * 根据一定的规则查找 Geometry 的 Elements。\n   *\n   * ```typescript\n   * getElementsBy((element) => {\n   *   const data = element.getData();\n   *\n   *   return data.a === 'a';\n   * });\n   * ```\n   *\n   * @param condition 定义查找规则的回调函数。\n   * @returns\n   */\n  public getElementsBy(condition: (element: Element) => boolean): Element[] {\n    return this.elements.filter((element) => {\n      return condition(element);\n    });\n  }\n\n  /**\n   * 获取数据对应的唯一 id。\n   * @param data Element 对应的绘制数据\n   * @returns\n   */\n  public getElementId(data: MappingDatum | MappingDatum[]) {\n    data = isArray(data) ? data[0] : data;\n    const originData = data[FIELD_ORIGIN];\n\n    // 如果用户声明了使用哪些字段作为 id 值\n    if (this.idFields.length) {\n      let elementId = originData[this.idFields[0]];\n      for (let index = 1; index < this.idFields.length; index++) {\n        elementId += '-' + originData[this.idFields[index]];\n      }\n\n      return elementId;\n    }\n\n    const type = this.type;\n    const xScale = this.getXScale();\n    const yScale = this.getYScale();\n    const xField = xScale.field || 'x';\n    const yField = yScale.field || 'y';\n    const yVal = originData[yField];\n    let xVal;\n    if (xScale.type === 'identity') {\n      xVal = xScale.values[0];\n    } else {\n      xVal = originData[xField];\n    }\n\n    let id: string;\n    if (type === 'interval' || type === 'schema') {\n      id = `${xVal}`;\n    } else if (type === 'line' || type === 'area' || type === 'path') {\n      id = type;\n    } else {\n      id = `${xVal}-${yVal}`;\n    }\n\n    let groupScales = this.groupScales;\n    if (isEmpty(groupScales)) {\n      groupScales = get(this.getAttribute('color'), 'scales', []);\n    }\n\n    for (let index = 0, length = groupScales.length; index < length; index++) {\n      const groupScale = groupScales[index];\n      const field = groupScale.field;\n      id = `${id}-${originData[field]}`;\n    }\n\n    // 用户在进行 dodge 类型的 adjust 调整的时候设置了 dodgeBy 属性\n    const dodgeAdjust = this.getAdjust('dodge');\n    if (dodgeAdjust) {\n      const dodgeBy = dodgeAdjust.dodgeBy;\n      if (dodgeBy) {\n        id = `${id}-${originData[dodgeBy]}`;\n      }\n    }\n\n    if (this.getAdjust('jitter')) {\n      id = `${id}-${data.x}-${data.y}`;\n    }\n\n    return id;\n  }\n\n  /**\n   * 获取所有需要创建 scale 的字段名称。\n   */\n  public getScaleFields(): string[] {\n    const fields = [];\n    const tmpMap = {};\n    const { attributeOption, labelOption, tooltipOption } = this;\n    // 获取图形属性上的 fields\n    for (const attributeType in attributeOption) {\n      if (attributeOption.hasOwnProperty(attributeType)) {\n        const eachOpt = attributeOption[attributeType];\n        if (eachOpt.fields) {\n          uniq(eachOpt.fields, fields, tmpMap);\n        } else if (eachOpt.values) {\n          // 考虑 size(10), shape('circle') 等场景\n          uniq(eachOpt.values, fields, tmpMap);\n        }\n      }\n    }\n    // 获取 label 上的字段\n    if (labelOption && labelOption.fields) {\n      uniq(labelOption.fields, fields, tmpMap);\n    }\n\n    // 获取 tooltip 上的字段\n    if (isObject(tooltipOption) && tooltipOption.fields) {\n      uniq(tooltipOption.fields, fields, tmpMap);\n    }\n\n    return fields;\n  }\n\n  /**\n   * 显示或者隐藏 geometry。\n   * @param visible\n   */\n  public changeVisible(visible: boolean) {\n    super.changeVisible(visible);\n    const elements = this.elements;\n    for (let index = 0, length = elements.length; index < length; index++) {\n      const element = elements[index];\n      element.changeVisible(visible);\n    }\n    if (visible) {\n      if (this.container) {\n        this.container.show();\n      }\n      if (this.labelsContainer) {\n        this.labelsContainer.show();\n      }\n    } else {\n      if (this.container) {\n        this.container.hide();\n      }\n      if (this.labelsContainer) {\n        this.labelsContainer.hide();\n      }\n    }\n  }\n\n  /**\n   * 获取当前配置中的所有分组 & 分类的字段。\n   * @return fields string[]\n   */\n  public getGroupFields(): string[] {\n    const groupFields = [];\n    const tmpMap = {}; // 用于去重过滤\n    for (let index = 0, length = GROUP_ATTRS.length; index < length; index++) {\n      const attributeName = GROUP_ATTRS[index];\n      const cfg = this.attributeOption[attributeName];\n      if (cfg && cfg.fields) {\n        uniq(cfg.fields, groupFields, tmpMap);\n      }\n    }\n\n    return groupFields;\n  }\n\n  /**\n   * 获得图形的 x y 字段。\n   */\n  public getXYFields() {\n    const [x, y] = this.attributeOption.position.fields;\n    return [x, y];\n  }\n\n  /**\n   * 获取该 Geometry 下所有生成的 shapes。\n   * @returns shapes\n   */\n  public getShapes(): (IShape | IGroup)[] {\n    return this.elements.map((element: Element) => element.shape);\n  }\n\n  /**\n   * 获取虚拟 Group。\n   * @returns\n   */\n  public getOffscreenGroup() {\n    if (!this.offscreenGroup) {\n      const GroupCtor = this.container.getGroupBase(); // 获取分组的构造函数\n      this.offscreenGroup = new GroupCtor({});\n    }\n    return this.offscreenGroup;\n  }\n\n  // 对数据进行排序\n  public sort(mappingArray: Data[]) {\n    if (!this.hasSorted) {\n      // 未发生过排序\n      const xScale = this.getXScale();\n      const xField = xScale.field;\n      for (let index = 0; index < mappingArray.length; index++) {\n        const itemArr = mappingArray[index];\n        itemArr.sort((obj1: Datum, obj2: Datum) => {\n          return xScale.translate(obj1[FIELD_ORIGIN][xField]) - xScale.translate(obj2[FIELD_ORIGIN][xField]);\n        });\n      }\n    }\n\n    this.hasSorted = true;\n  }\n\n  /**\n   * 调整度量范围。主要针对发生层叠以及一些特殊需求的 Geometry，比如 Interval 下的柱状图 Y 轴默认从 0 开始。\n   */\n  protected adjustScale() {\n    const yScale = this.getYScale();\n    // 如果数据发生过 stack adjust，需要调整下 yScale 的数据范围\n    if (yScale && this.getAdjust('stack')) {\n      this.updateStackRange(yScale, this.beforeMappingData);\n    }\n  }\n\n  /**\n   * 获取当前 Geometry 对应的 Shape 工厂实例。\n   */\n  protected getShapeFactory() {\n    const shapeType = this.shapeType;\n    if (!getShapeFactory(shapeType)) {\n      return;\n    }\n    if (!this.shapeFactory) {\n      this.shapeFactory = clone(getShapeFactory(shapeType)); // 防止多个 view 共享一个 shapeFactory 实例，导致 coordinate 被篡改\n    }\n    // 因为这里缓存了 shapeFactory，但是外部可能会变更 coordinate，导致无法重新设置到 shapeFactory 中\n    this.shapeFactory.coordinate = this.coordinate;\n    // theme 原因同上\n    this.shapeFactory.theme = this.theme.geometries[shapeType] || {};\n\n    return this.shapeFactory;\n  }\n\n  /**\n   * 获取每个 Shape 对应的关键点数据。\n   * @param obj 经过分组 -> 数字化 -> adjust 调整后的数据记录\n   * @returns\n   */\n  protected createShapePointsCfg(obj: Datum): S {\n    const xScale = this.getXScale();\n    const yScale = this.getYScale();\n    const x = this.normalizeValues(obj[xScale.field], xScale);\n    let y; // 存在没有 y 的情况\n\n    if (yScale) {\n      y = this.normalizeValues(obj[yScale.field], yScale);\n    } else {\n      y = obj.y ? obj.y : 0.1;\n    }\n\n    return {\n      x,\n      y,\n      y0: yScale ? yScale.scale(this.getYMinValue()) : undefined,\n    } as S;\n  }\n\n  /**\n   * 创建 Element 实例。\n   * @param mappingDatum Element 对应的绘制数据\n   * @param [isUpdate] 是否处于更新阶段\n   * @returns element 返回创建的 Element 实例\n   */\n  protected createElement(mappingDatum: MappingDatum, isUpdate: boolean = false): Element {\n    const { container } = this;\n\n    const shapeCfg = this.getDrawCfg(mappingDatum); // 获取绘制图形的配置信息\n    const shapeFactory = this.getShapeFactory();\n\n    const element = new Element({\n      shapeFactory,\n      container,\n      offscreenGroup: this.getOffscreenGroup(),\n    });\n    element.animate = this.animateOption;\n    element.geometry = this;\n    element.draw(shapeCfg, isUpdate); // 绘制\n\n    return element;\n  }\n\n  /**\n   * 获取每条数据对应的图形绘制数据。\n   * @param mappingDatum 映射后的数据\n   * @returns draw cfg\n   */\n  protected getDrawCfg(mappingDatum: MappingDatum): ShapeInfo {\n    const originData = mappingDatum[FIELD_ORIGIN]; // 原始数据\n    const cfg: ShapeInfo = {\n      mappingData: mappingDatum, // 映射后的数据\n      data: originData, // 原始数据\n      x: mappingDatum.x,\n      y: mappingDatum.y,\n      color: mappingDatum.color,\n      size: mappingDatum.size,\n      isInCircle: this.coordinate.isPolar,\n      customInfo: this.customOption,\n    };\n\n    let shapeName = mappingDatum.shape;\n    if (!shapeName && this.getShapeFactory()) {\n      shapeName = this.getShapeFactory().defaultShapeType;\n    }\n    cfg.shape = shapeName;\n    // 获取默认样式\n    const theme = this.theme.geometries[this.shapeType];\n    cfg.defaultStyle = get(theme, [shapeName, 'default'], {}).style;\n    if (!cfg.defaultStyle && this.getShapeFactory()) {\n      cfg.defaultStyle = this.getShapeFactory().getDefaultStyle(theme);\n    }\n\n    const styleOption = this.styleOption;\n    if (styleOption) {\n      cfg.style = this.getStyleCfg(styleOption, originData);\n    }\n    if (this.generatePoints) {\n      cfg.points = mappingDatum.points;\n      cfg.nextPoints = mappingDatum.nextPoints;\n    }\n\n    return cfg;\n  }\n\n  /**\n   * 创建所有的 Elements。\n   * @param mappingData\n   * @param [isUpdate]\n   * @returns elements\n   */\n  protected createElements(mappingData: MappingDatum[], index: number, isUpdate: boolean = false): Element[] {\n    const { lastElementsMap, elementsMap, elements } = this;\n    for (let subIndex = 0, length = mappingData.length; subIndex < length; subIndex++) {\n      const mappingDatum = mappingData[subIndex];\n      let id = this.getElementId(mappingDatum);\n      if (elementsMap[id]) {\n        // 存在重复数据，则根据再根据 index 进行区分\n        id = `${id}-${index}-${subIndex}`;\n      }\n\n      let result = lastElementsMap[id];\n      if (!result) {\n        // 创建新的 element\n        result = this.createElement(mappingDatum, isUpdate);\n      } else {\n        // element 已经创建\n        const currentShapeCfg = this.getDrawCfg(mappingDatum);\n        const preShapeCfg = result.getModel();\n        if (this.isCoordinateChanged || isModelChange(currentShapeCfg, preShapeCfg)) {\n          result.animate = this.animateOption;\n          // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n          result.update(currentShapeCfg); // 更新对应的 element\n        }\n\n        delete lastElementsMap[id];\n      }\n\n      elements.push(result);\n      elementsMap[id] = result;\n    }\n\n    // 对 elements 的 zIndex 进行反序\n    if (this.zIndexReversed) {\n      const length = elements.length;\n      elements.forEach((ele, idx) => {\n        ele.shape.setZIndex(length - idx);\n      });\n    }\n\n    return elements;\n  }\n\n  /**\n   * 获取渲染的 label 类型。\n   */\n  protected getLabelType(): string {\n    const { labelOption, coordinate, type } = this;\n    const { type: coordinateType, isTransposed } = coordinate;\n    let labelType = get(labelOption, ['cfg', 'type']);\n    if (!labelType) {\n      // 用户未定义，则进行默认的逻辑\n      if (coordinateType === 'polar') {\n        // 极坐标下使用通用的极坐标文本，转置则使用饼图\n        labelType = isTransposed ? 'pie' : 'polar';\n      } else if (coordinateType === 'theta') {\n        // theta 坐标系下使用饼图文本\n        labelType = 'pie';\n      } else if (type === 'interval' || type === 'polygon') {\n        labelType = 'interval';\n      } else {\n        labelType = 'base';\n      }\n    }\n\n    return labelType;\n  }\n\n  /**\n   * 获取 Y 轴上的最小值。\n   */\n  protected getYMinValue(): number {\n    const yScale = this.getYScale();\n    const { min, max } = yScale;\n    let value: number;\n\n    if (min >= 0) {\n      value = min;\n    } else if (max <= 0) {\n      // 当值全位于负区间时，需要保证 ymin 在区域内，不可为 0\n      value = max;\n    } else {\n      value = 0;\n    }\n    return value;\n  }\n\n  // 创建图形属性相关的配置项\n  private createAttrOption(attrName: string, field: AttributeOption | string | number, cfg?) {\n    if (isNil(field) || isObject(field)) {\n      if (isObject(field) && isEqual(Object.keys(field), ['values'])) {\n        // shape({ values: [ 'funnel' ] })\n        set(this.attributeOption, attrName, {\n          fields: field.values,\n        });\n      } else {\n        set(this.attributeOption, attrName, field);\n      }\n    } else {\n      const attrCfg: AttributeOption = {};\n      if (isNumber(field)) {\n        // size(3)\n        attrCfg.values = [field];\n      } else {\n        attrCfg.fields = parseFields(field);\n      }\n\n      if (cfg) {\n        if (isFunction(cfg)) {\n          attrCfg.callback = cfg;\n        } else {\n          attrCfg.values = cfg;\n        }\n      }\n\n      set(this.attributeOption, attrName, attrCfg);\n    }\n  }\n\n  protected initAttributes() {\n    const { attributes, attributeOption, theme, shapeType } = this;\n    this.groupScales = [];\n    const tmpMap = {};\n\n    // 遍历每一个 attrOption，各自创建 Attribute 实例\n    for (const attrType in attributeOption) {\n      if (attributeOption.hasOwnProperty(attrType)) {\n        const option: AttributeOption = attributeOption[attrType];\n        if (!option) {\n          return;\n        }\n        const attrCfg: AttributeInstanceCfg = {\n          ...option,\n        };\n        const { callback, values, fields = [] } = attrCfg;\n\n        // 获取每一个字段对应的 scale\n        const scales = fields.map((field) => {\n          const scale = this.scales[field];\n          if (scale.isCategory && !tmpMap[field] && GROUP_ATTRS.includes(attrType)) {\n            this.groupScales.push(scale);\n            tmpMap[field] = true;\n          }\n          return scale;\n        });\n\n        attrCfg.scales = scales;\n\n        if (attrType !== 'position' && scales.length === 1 && scales[0].type === 'identity') {\n          // 用户在图形通道上声明了常量字段 color('red'), size(5)\n          attrCfg.values = scales[0].values;\n        } else if (!callback && !values) {\n          // 用户没有指定任何规则，则使用默认的映射规则\n          if (attrType === 'size') {\n            attrCfg.values = theme.sizes;\n          } else if (attrType === 'shape') {\n            attrCfg.values = theme.shapes[shapeType] || [];\n          } else if (attrType === 'color') {\n            if (scales.length) {\n              // 根据数值个数使用对应的色板\n              attrCfg.values = scales[0].values.length <= 10 ? theme.colors10 : theme.colors20;\n            } else {\n              attrCfg.values = theme.colors10;\n            }\n          }\n        }\n        const AttributeCtor = getAttributeClass(attrType);\n        attributes[attrType] = new AttributeCtor(attrCfg);\n      }\n    }\n  }\n\n  // 处理数据：分组 -> 数字化 -> adjust 调整\n  private processData(data: Data) {\n    this.hasSorted = false;\n    const { scales } = this.getAttribute('position');\n    const categoryScales = scales.filter((scale: Scale) => scale.isCategory);\n\n    const groupedArray = this.groupData(data); // 数据分组\n    const beforeAdjust = [];\n    for (let i = 0, len = groupedArray.length; i < len; i++) {\n      const subData = groupedArray[i];\n      const arr = [];\n      for (let j = 0, subLen = subData.length; j < subLen; j++) {\n        const originData = subData[j];\n        const item = {};\n        // tslint:disable-next-line: forin\n        for (const k in originData) {\n          item[k] = originData[k];\n        }\n        item[FIELD_ORIGIN] = originData;\n\n        // 将分类数据翻译成数据, 仅对位置相关的度量进行数字化处理\n        for (const scale of categoryScales) {\n          const field = scale.field;\n          item[field] = scale.translate(item[field]);\n        }\n        arr.push(item);\n      }\n      beforeAdjust.push(arr);\n    }\n\n    const dataArray = this.adjustData(beforeAdjust); // 进行 adjust 数据调整\n    this.beforeMappingData = dataArray;\n\n    return dataArray;\n  }\n\n  // 调整数据\n  private adjustData(dataArray: Data[]): Data[] {\n    const adjustOption = this.adjustOption;\n    const { intervalPadding, dodgePadding, theme } = this;\n    // 兼容theme配置\n    const maxColumnWidth = this.maxColumnWidth || theme.maxColumnWidth;\n    const minColumnWidth = this.minColumnWidth || theme.minColumnWidth;\n    const columnWidthRatio = this.columnWidthRatio || theme.columnWidthRatio;\n    let result = dataArray;\n\n    if (adjustOption) {\n      const xScale = this.getXScale();\n      const yScale = this.getYScale();\n      const xField = xScale.field;\n      const yField = yScale ? yScale.field : null;\n      const xDimensionLength = getXDimensionLength(this.coordinate);\n      const groupNum = xScale.values.length;\n      // 传入size计算相关参数，默认宽度、最大最小宽度约束\n      const sizeAttr = this.getAttribute('size');\n      let defaultSize;\n      if (sizeAttr) {\n        defaultSize = sizeAttr.values[0];\n      }\n      for (let i = 0, len = adjustOption.length; i < len; i++) {\n        const adjust = adjustOption[i];\n        const adjustCfg: AdjustInstanceCfg = {\n          xField,\n          yField,\n          intervalPadding,\n          dodgePadding,\n          xDimensionLength,\n          groupNum,\n          defaultSize,\n          maxColumnWidth,\n          minColumnWidth,\n          columnWidthRatio,\n          ...adjust,\n        };\n        const type = adjust.type;\n        if (type === 'dodge') {\n          const adjustNames = [];\n          if (xScale.isCategory || xScale.type === 'identity') {\n            adjustNames.push('x');\n          } else if (!yScale) {\n            adjustNames.push('y');\n          } else {\n            throw new Error('dodge is not support linear attribute, please use category attribute!');\n          }\n          adjustCfg.adjustNames = adjustNames;\n          // 每个分组内每条柱子的宽度占比，用户不可指定，用户需要通过 columnWidthRatio 指定\n          // 兼容theme配置\n          adjustCfg.dodgeRatio = columnWidthRatio;\n        } else if (type === 'stack') {\n          const coordinate = this.coordinate;\n          if (!yScale) {\n            // 一维的情况下获取高度和默认size\n            adjustCfg.height = coordinate.getHeight();\n            const size = this.getDefaultValue('size') || 3;\n            adjustCfg.size = size;\n          }\n          // 不进行 transpose 时，用户又没有设置这个参数时，默认从上向下\n          if (!coordinate.isTransposed && isNil(adjustCfg.reverseOrder)) {\n            adjustCfg.reverseOrder = true;\n          }\n        }\n        const adjustCtor = getAdjustClass(type);\n        const adjustInstance = new adjustCtor(adjustCfg);\n\n        result = adjustInstance.process(result);\n\n        this.adjusts[type] = adjustInstance;\n      }\n    }\n\n    return result;\n  }\n\n  // 对数据进行分组\n  private groupData(data: Data): Data[] {\n    const groupScales = this.getGroupScales();\n    const scaleDefs = this.scaleDefs;\n    const appendConditions = {};\n    const groupFields = [];\n    for (let index = 0; index < groupScales.length; index++) {\n      const scale = groupScales[index];\n      const field = scale.field;\n      groupFields.push(field);\n      if (get(scaleDefs, [field, 'values'])) {\n        // 用户通过 view.scale() 接口指定了 values 属性\n        appendConditions[field] = scaleDefs[field].values;\n      }\n    }\n\n    return group(data, groupFields, appendConditions);\n  }\n\n  // 更新发生层叠后的数据对应的度量范围\n  private updateStackRange(scale: Scale, dataArray: Data[]) {\n    const mergeArray = flatten(dataArray);\n    const field = scale.field;\n    let min = scale.min;\n    let max = scale.max;\n    for (let index = 0; index < mergeArray.length; index++) {\n      const obj = mergeArray[index];\n      const tmpMin = Math.min.apply(null, obj[field]);\n      const tmpMax = Math.max.apply(null, obj[field]);\n      if (tmpMin < min) {\n        min = tmpMin;\n      }\n      if (tmpMax > max) {\n        max = tmpMax;\n      }\n    }\n    const scaleDefs = this.scaleDefs;\n    const cfg: LooseObject = {};\n    if (min < scale.min && !get(scaleDefs, [field, 'min'])) {\n      // 用户如果在列定义中定义了 min，则以用户定义的为准\n      cfg.min = min;\n    }\n    if (max > scale.max && !get(scaleDefs, [field, 'max'])) {\n      // 用户如果在列定义中定义了 max\n      cfg.max = max;\n    }\n\n    scale.change(cfg);\n  }\n\n  // 将数据映射至图形空间前的操作：排序以及关键点的生成\n  private beforeMapping(beforeMappingData: Data[]) {\n    // 当初加 clone 是因为 points 的引用关系，导致更新失败，可是现在貌似复现不出来了，所以暂时不进行 clone\n    // const source = clone(beforeMappingData);\n    const source = beforeMappingData;\n    if (this.sortable) {\n      this.sort(source);\n    }\n    if (this.generatePoints) {\n      // 需要生成关键点\n      for (let index = 0, length = source.length; index < length; index++) {\n        const currentData = source[index];\n        this.generateShapePoints(currentData);\n        const nextData = source[index + 1];\n        if (nextData) {\n          this.generateShapePoints(nextData);\n          currentData[0].nextPoints = nextData[0].points;\n        }\n      }\n    }\n\n    return source;\n  }\n\n  // 生成 shape 的关键点\n  private generateShapePoints(data: Data) {\n    const shapeFactory = this.getShapeFactory();\n    const shapeAttr = this.getAttribute('shape');\n    for (let index = 0; index < data.length; index++) {\n      const obj = data[index];\n      const cfg = this.createShapePointsCfg(obj);\n      const shape = shapeAttr ? this.getAttributeValues(shapeAttr, obj) : null;\n      const points = shapeFactory.getShapePoints(shape, cfg);\n      obj.points = points;\n    }\n  }\n\n  // 将数据归一化\n  private normalizeValues(values, scale) {\n    let rst = [];\n    if (isArray(values)) {\n      for (let index = 0; index < values.length; index++) {\n        const value = values[index];\n        rst.push(scale.scale(value));\n      }\n    } else {\n      rst = scale.scale(values);\n    }\n    return rst;\n  }\n\n  // 将数据映射至图形空间\n  private mapping(data: Data): MappingDatum[] {\n    const attributes = this.attributes;\n    const mappingData = [];\n    for (let index = 0; index < data.length; index++) {\n      const record = data[index];\n      const newRecord: MappingDatum = {\n        _origin: record[FIELD_ORIGIN],\n        points: record.points,\n        nextPoints: record.nextPoints,\n      };\n      for (const k in attributes) {\n        if (attributes.hasOwnProperty(k)) {\n          const attr = attributes[k];\n          const names = attr.names;\n          const values = this.getAttributeValues(attr, record);\n          if (names.length > 1) {\n            // position 之类的生成多个字段的属性\n            for (let j = 0; j < values.length; j += 1) {\n              const val = values[j];\n              const name = names[j];\n              newRecord[name] = isArray(val) && val.length === 1 ? val[0] : val; // 只有一个值时返回第一个属性值\n            }\n          } else {\n            // values.length === 1 的判断是以下情况，获取用户设置的图形属性值\n            // shape('a', ['dot', 'dash']), color('a', ['red', 'yellow'])\n            newRecord[names[0]] = values.length === 1 ? values[0] : values;\n          }\n        }\n      }\n\n      this.convertPoint(newRecord); // 将 x、y 转换成画布坐标\n      mappingData.push(newRecord);\n    }\n\n    return mappingData;\n  }\n\n  // 将归一化的坐标值转换成画布坐标\n  private convertPoint(mappingRecord: MappingDatum) {\n    const { x, y } = mappingRecord;\n\n    let rstX;\n    let rstY;\n    let obj;\n    const coordinate = this.coordinate;\n    if (isArray(x) && isArray(y)) {\n      rstX = [];\n      rstY = [];\n      for (let i = 0, j = 0, xLen = x.length, yLen = y.length; i < xLen && j < yLen; i += 1, j += 1) {\n        obj = coordinate.convert({\n          x: x[i],\n          y: y[j],\n        });\n        rstX.push(obj.x);\n        rstY.push(obj.y);\n      }\n    } else if (isArray(y)) {\n      rstY = [];\n      for (let index = 0; index < y.length; index++) {\n        const yVal = y[index];\n        obj = coordinate.convert({\n          x: x as number,\n          y: yVal,\n        });\n        if (rstX && rstX !== obj.x) {\n          if (!isArray(rstX)) {\n            rstX = [rstX];\n          }\n          rstX.push(obj.x);\n        } else {\n          rstX = obj.x;\n        }\n        rstY.push(obj.y);\n      }\n    } else if (isArray(x)) {\n      rstX = [];\n      for (let index = 0; index < x.length; index++) {\n        const xVal = x[index];\n        obj = coordinate.convert({\n          x: xVal,\n          y,\n        });\n        if (rstY && rstY !== obj.y) {\n          if (!isArray(rstY)) {\n            rstY = [rstY];\n          }\n          rstY.push(obj.y);\n        } else {\n          rstY = obj.y;\n        }\n        rstX.push(obj.x);\n      }\n    } else {\n      const point = coordinate.convert({\n        x,\n        y,\n      });\n      rstX = point.x;\n      rstY = point.y;\n    }\n    mappingRecord.x = rstX;\n    mappingRecord.y = rstY;\n  }\n\n  // 获取 style 配置\n  private getStyleCfg(styleOption: StyleOption, originData: Datum) {\n    const { fields = [], callback, cfg } = styleOption;\n    if (cfg) {\n      // 用户直接配置样式属性\n      return cfg;\n    }\n\n    const params = fields.map((field) => {\n      return originData[field];\n    });\n\n    return callback(...params);\n  }\n\n  private setCfg(cfg: InitCfg) {\n    const { coordinate, data, theme, scaleDefs } = cfg;\n    if (coordinate) {\n      this.coordinate = coordinate;\n    }\n    if (data) {\n      this.data = data;\n    }\n    if (scaleDefs) {\n      this.scaleDefs = scaleDefs;\n      this.idFields = [];\n      each(scaleDefs, (scaleDef, field) => {\n        if (scaleDef && scaleDef.key) {\n          this.idFields.push(field);\n        }\n      });\n    }\n    if (theme) {\n      this.theme = this.userTheme ? deepMix({}, theme, this.userTheme) : theme; // 支持 geometry 层级的主题设置\n    }\n  }\n\n  private renderLabels(mappingArray: MappingDatum[], isUpdate: boolean = false) {\n    let geometryLabel = this.geometryLabel;\n\n    if (!geometryLabel) {\n      // 初次创建\n      const labelType = this.getLabelType();\n      const GeometryLabelsCtor = getGeometryLabel(labelType);\n      geometryLabel = new GeometryLabelsCtor(this);\n      this.geometryLabel = geometryLabel;\n    }\n    geometryLabel.render(mappingArray, isUpdate);\n\n    // 将 label 同 element 进行关联\n    const labelsMap = geometryLabel.labelsRenderer.shapesMap;\n    each(this.elementsMap, (element: Element, id) => {\n      const labels = filterLabelsById(id, labelsMap); // element 实例同 label 进行绑定\n      if (labels.length) {\n        element.labelShape = labels;\n        for (let i = 0; i < labels.length; i++) {\n          const label = labels[i];\n          const labelChildren = label.getChildren();\n          for (let j = 0; j < labelChildren.length; j++) {\n            const child = labelChildren[j];\n            child.cfg.name = ['element', 'label'];\n            child.cfg.element = element;\n          }\n        }\n      }\n    });\n  }\n  /**\n   * 是否需要进行群组入场动画\n   * 规则：\n   * 1. 如果发生更新，则不进行\n   * 2. 如果用户关闭 geometry 动画，则不进行\n   * 3. 如果用户关闭了 appear 动画，则不进行\n   * 4. 如果用户配置了 appear.animation，则不进行\n   */\n  private canDoGroupAnimation(isUpdate: boolean) {\n    return (\n      !isUpdate &&\n      this.animateOption &&\n      (get(this.animateOption, 'appear') === undefined ||\n        (get(this.animateOption, 'appear') && get(this.animateOption, ['appear', 'animation']) === undefined))\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}