{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport { getElements, getElementsByState } from '../util';\nimport { clearHighlight } from './highlight-util';\nimport StateAction from './state';\nimport { ELEMENT_STATE } from '../../../constant';\nexport var STATUS_UNACTIVE = ELEMENT_STATE.INACTIVE;\nexport var STATUS_ACTIVE = ELEMENT_STATE.ACTIVE;\n/**\n * @ignore\n * highlight，指定图形高亮，其他图形变暗\n */\n\nvar ElementHighlight =\n/** @class */\nfunction (_super) {\n  __extends(ElementHighlight, _super);\n\n  function ElementHighlight() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.stateName = STATUS_ACTIVE;\n    return _this;\n  } // 多个元素设置、取消 highlight\n\n\n  ElementHighlight.prototype.setElementsStateByItem = function (elements, field, item, enable) {\n    var _this = this;\n\n    var callback = function (el) {\n      return _this.isMathItem(el, field, item);\n    };\n\n    this.setHighlightBy(elements, callback, enable);\n  }; // 设置元素的 highlight\n\n\n  ElementHighlight.prototype.setElementHighlight = function (el, callback) {\n    if (callback(el)) {\n      if (el.hasState(STATUS_UNACTIVE)) {\n        el.setState(STATUS_UNACTIVE, false);\n      }\n\n      el.setState(STATUS_ACTIVE, true);\n    } else if (!el.hasState(STATUS_ACTIVE)) {\n      el.setState(STATUS_UNACTIVE, true);\n    }\n  };\n\n  ElementHighlight.prototype.setHighlightBy = function (elements, callback, enable) {\n    var _this = this;\n\n    if (enable) {\n      // 如果是设置 highlight ，则将匹配的 element 设置成 active，\n      // 其他如果不是 active，则设置成 unactive\n      each(elements, function (el) {\n        _this.setElementHighlight(el, callback);\n      });\n    } else {\n      // 如果取消 highlight，则要检测是否全部取消 highlight\n      var activeElements = getElementsByState(this.context.view, STATUS_ACTIVE);\n      var allCancel_1 = true; // 检测所有 activeElements 都要取消 highlight\n\n      each(activeElements, function (el) {\n        if (!callback(el)) {\n          allCancel_1 = false;\n          return false;\n        }\n      });\n\n      if (allCancel_1) {\n        // 都要取消，则取消所有的 active，unactive 状态\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(elements, function (el) {\n          if (callback(el)) {\n            if (el.hasState(STATUS_ACTIVE)) {\n              el.setState(STATUS_ACTIVE, false);\n            }\n\n            el.setState(STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  }; // 单个元素设置和取消 highlight\n\n\n  ElementHighlight.prototype.setElementState = function (element, enable) {\n    var view = this.context.view;\n    var elements = getElements(view);\n    this.setHighlightBy(elements, function (el) {\n      return element === el;\n    }, enable);\n  };\n\n  ElementHighlight.prototype.highlight = function () {\n    this.setState();\n  }; // 清理掉所有的 active， unactive 状态\n\n\n  ElementHighlight.prototype.clear = function () {\n    var view = this.context.view;\n    clearHighlight(view);\n  };\n\n  return ElementHighlight;\n}(StateAction);\n\nexport default ElementHighlight;","map":{"version":3,"sources":["../../../../src/interaction/action/element/highlight.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport { ListItem } from '../../../dependents';\nimport Element from '../../../geometry/element/';\nimport { getElements, getElementsByState } from '../util';\nimport { clearHighlight } from './highlight-util';\nimport StateAction from './state';\n\nimport { ELEMENT_STATE } from '../../../constant';\n\nexport const STATUS_UNACTIVE = ELEMENT_STATE.INACTIVE;\nexport const STATUS_ACTIVE = ELEMENT_STATE.ACTIVE;\nexport type Callback = (el) => boolean;\n\n/**\n * @ignore\n * highlight，指定图形高亮，其他图形变暗\n */\nclass ElementHighlight extends StateAction {\n  protected stateName: string = STATUS_ACTIVE;\n\n  // 多个元素设置、取消 highlight\n  protected setElementsStateByItem(elements: Element[], field: string, item: ListItem, enable: boolean) {\n    const callback = (el) => this.isMathItem(el, field, item);\n    this.setHighlightBy(elements, callback, enable);\n  }\n\n  // 设置元素的 highlight\n  protected setElementHighlight(el: Element, callback: Callback) {\n    if (callback(el)) {\n      if (el.hasState(STATUS_UNACTIVE)) {\n        el.setState(STATUS_UNACTIVE, false);\n      }\n      el.setState(STATUS_ACTIVE, true);\n    } else if (!el.hasState(STATUS_ACTIVE)) {\n      el.setState(STATUS_UNACTIVE, true);\n    }\n  }\n\n  protected setHighlightBy(elements: Element[], callback: Callback, enable: boolean) {\n    if (enable) {\n      // 如果是设置 highlight ，则将匹配的 element 设置成 active，\n      // 其他如果不是 active，则设置成 unactive\n      each(elements, (el) => {\n        this.setElementHighlight(el, callback);\n      });\n    } else {\n      // 如果取消 highlight，则要检测是否全部取消 highlight\n      const activeElements = getElementsByState(this.context.view, STATUS_ACTIVE);\n      let allCancel = true;\n      // 检测所有 activeElements 都要取消 highlight\n      each(activeElements, (el) => {\n        if (!callback(el)) {\n          allCancel = false;\n          return false;\n        }\n      });\n      if (allCancel) {\n        // 都要取消，则取消所有的 active，unactive 状态\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(elements, (el) => {\n          if (callback(el)) {\n            if (el.hasState(STATUS_ACTIVE)) {\n              el.setState(STATUS_ACTIVE, false);\n            }\n            el.setState(STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  }\n\n  // 单个元素设置和取消 highlight\n  protected setElementState(element: Element, enable: boolean) {\n    const view = this.context.view;\n    const elements = getElements(view);\n    this.setHighlightBy(elements, (el) => element === el, enable);\n  }\n\n  public highlight() {\n    this.setState();\n  }\n\n  // 清理掉所有的 active， unactive 状态\n  public clear() {\n    const view = this.context.view;\n    clearHighlight(view);\n  }\n}\n\nexport default ElementHighlight;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}