{"ast":null,"code":"import { isArray } from '@antv/util';\nimport { getSplinePath } from './path';\n\nfunction isValueEmpty(value) {\n  if (value) {\n    return false;\n  }\n\n  return value === null || value === undefined || isNaN(value);\n}\n\nfunction isYNil(point) {\n  if (isArray(point)) {\n    // 特殊处理 area 的关键点数据，其关键点结构为 [{x: 0, y: 1}, {x: 0, y: 2}]\n    return isValueEmpty(point[1].y);\n  }\n\n  var value = point.y;\n  return isArray(value) ? isValueEmpty(value[0]) : isValueEmpty(value);\n}\n/**\n * @ignore\n * 分割数据，用于处理在一组点数据中，y 对应的数值存在 null/undefined/NaN 的情况\n * 应用于折线图、区域图以及路径图\n *\n * ```typescript\n * // return [[{x: 1, y: 2}, {x: 3, y: 3}]]\n * getPathPoints([{x: 1, y: 2}, {x: 2, y: null}, {x: 3, y: 3}], true);\n * // return [[{x: 1, y: 2}], [{x: 3, y: 3}]]\n * getPathPoints([{x: 1, y: 2}, {x: 2, y: null}, {x: 3, y: 3}], false);\n * // return [[[{ x: 1, y: 10 }, { x: 2, y: 2 }], [{ x: 9, y: 34 }, { x: 1, y: 1 }]]]\n * getPathPoints([\n *   [{ x: 1, y: 10 }, { x: 2, y: 2 }],\n *   [{ x: 4, y: 2 }, { x: 8, y: NaN }],\n *   [{ x: 9, y: 34 }, { x: 1, y: 1 }],\n * ], true);\n * ```\n *\n * @param points 要进行处理点集合\n * @param connectNulls 是否连接空值数据\n * @param showSinglePoint 是否展示孤立点\n * @returns 返回处理后的点集合\n */\n\n\nexport function getPathPoints(points, connectNulls, showSinglePoint) {\n  if (connectNulls === void 0) {\n    connectNulls = false;\n  }\n\n  if (showSinglePoint === void 0) {\n    showSinglePoint = true;\n  }\n\n  if (!points.length || points.length === 1 && !showSinglePoint) {\n    // 空或者只有一个点并配置不展示时\n    return [];\n  }\n\n  if (connectNulls) {\n    // 即 y 值为空的场景\n    var filtered = [];\n\n    for (var i = 0, len = points.length; i < len; i++) {\n      var point = points[i];\n\n      if (!isYNil(point)) {\n        filtered.push(point);\n      }\n    }\n\n    return [filtered];\n  }\n\n  var result = [];\n  var tmp = [];\n\n  for (var i = 0, len = points.length; i < len; i++) {\n    var point = points[i];\n\n    if (isYNil(point)) {\n      if (tmp.length) {\n        if (!(tmp.length === 1 && !showSinglePoint)) {\n          // 如果前段数据只有一个字段并且不需要展示时则不加入\n          result.push(tmp);\n        }\n\n        tmp = [];\n      }\n    } else {\n      tmp.push(point);\n    }\n  }\n\n  if (tmp.length) {\n    result.push(tmp);\n  }\n\n  return result;\n}\n/**\n * 获取小提琴图的边界 path\n * @param points\n * @returns\n */\n\nexport function getViolinPath(points) {\n  var path = [];\n\n  for (var i = 0; i < points.length; i++) {\n    var point = points[i];\n\n    if (point) {\n      var action = i === 0 ? 'M' : 'L';\n      path.push([action, point.x, point.y]);\n    }\n  }\n\n  var first = points[0];\n\n  if (first) {\n    path.push(['L', first.x, first.y]);\n    path.push(['z']);\n  }\n\n  return path;\n}\n/**\n * 获取小提琴图 平滑的边界 path\n * @param points\n * @returns\n */\n\nexport function getSmoothViolinPath(points) {\n  var half = points.length / 2;\n  var leftPoints = [];\n  var rightPoints = [];\n\n  for (var i = 0; i < points.length; i++) {\n    if (i < half) {\n      leftPoints.push(points[i]);\n    } else {\n      rightPoints.push(points[i]);\n    }\n  }\n\n  var leftPath = getSplinePath(leftPoints, false);\n  var rightPath = getSplinePath(rightPoints, false);\n\n  if (rightPoints.length) {\n    leftPath.push(['L', rightPoints[0].x, rightPoints[0].y]);\n  }\n\n  rightPath.shift();\n  var path = leftPath.concat(rightPath);\n\n  if (leftPoints.length) {\n    path.push(['L', leftPoints[0].x, leftPoints[0].y]);\n  }\n\n  path.push(['z']);\n  return path;\n}","map":{"version":3,"sources":["../../../../src/geometry/shape/util/get-path-points.ts"],"names":[],"mappings":"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","sourcesContent":["import { isArray } from '@antv/util';\nimport { PathCommand } from '../../../dependents';\nimport { Point, RangePoint, ShapeVertices } from '../../../interface';\nimport { getSplinePath } from './path';\n\nfunction isValueEmpty(value) {\n  if (value) {\n    return false;\n  }\n  return value === null || value === undefined || isNaN(value);\n}\n\nfunction isYNil(point: Point[] | RangePoint) {\n  if (isArray(point)) {\n    // 特殊处理 area 的关键点数据，其关键点结构为 [{x: 0, y: 1}, {x: 0, y: 2}]\n    return isValueEmpty(point[1].y);\n  }\n  const value = point.y;\n  return isArray(value) ? isValueEmpty(value[0]) : isValueEmpty(value);\n}\n\n/**\n * @ignore\n * 分割数据，用于处理在一组点数据中，y 对应的数值存在 null/undefined/NaN 的情况\n * 应用于折线图、区域图以及路径图\n *\n * ```typescript\n * // return [[{x: 1, y: 2}, {x: 3, y: 3}]]\n * getPathPoints([{x: 1, y: 2}, {x: 2, y: null}, {x: 3, y: 3}], true);\n * // return [[{x: 1, y: 2}], [{x: 3, y: 3}]]\n * getPathPoints([{x: 1, y: 2}, {x: 2, y: null}, {x: 3, y: 3}], false);\n * // return [[[{ x: 1, y: 10 }, { x: 2, y: 2 }], [{ x: 9, y: 34 }, { x: 1, y: 1 }]]]\n * getPathPoints([\n *   [{ x: 1, y: 10 }, { x: 2, y: 2 }],\n *   [{ x: 4, y: 2 }, { x: 8, y: NaN }],\n *   [{ x: 9, y: 34 }, { x: 1, y: 1 }],\n * ], true);\n * ```\n *\n * @param points 要进行处理点集合\n * @param connectNulls 是否连接空值数据\n * @param showSinglePoint 是否展示孤立点\n * @returns 返回处理后的点集合\n */\nexport function getPathPoints(points: ShapeVertices, connectNulls: boolean = false, showSinglePoint: boolean = true) {\n  if (!points.length || (points.length === 1 && !showSinglePoint)) {\n    // 空或者只有一个点并配置不展示时\n    return [];\n  }\n\n  if (connectNulls) {\n    // 即 y 值为空的场景\n    const filtered = [];\n    for (let i = 0, len = points.length; i < len; i++) {\n      const point = points[i];\n      if (!isYNil(point)) {\n        filtered.push(point);\n      }\n    }\n    return [filtered];\n  }\n\n  const result = [];\n  let tmp = [];\n  for (let i = 0, len = points.length; i < len; i++) {\n    const point = points[i];\n    if (isYNil(point)) {\n      if (tmp.length) {\n        if (!(tmp.length === 1 && !showSinglePoint)) {\n          // 如果前段数据只有一个字段并且不需要展示时则不加入\n          result.push(tmp);\n        }\n        tmp = [];\n      }\n    } else {\n      tmp.push(point);\n    }\n  }\n\n  if (tmp.length) {\n    result.push(tmp);\n  }\n  return result;\n}\n\n/**\n * 获取小提琴图的边界 path\n * @param points\n * @returns\n */\nexport function getViolinPath(points: ShapeVertices): PathCommand[] {\n  const path = [];\n  for (let i = 0; i < points.length; i++) {\n    const point = points[i] as Point;\n    if (point) {\n      const action = i === 0 ? 'M' : 'L';\n      path.push([action, point.x, point.y]);\n    }\n  }\n  const first = points[0] as Point;\n  if (first) {\n    path.push(['L', first.x, first.y]);\n    path.push(['z']);\n  }\n  return path;\n}\n\n/**\n * 获取小提琴图 平滑的边界 path\n * @param points\n * @returns\n */\nexport function getSmoothViolinPath(points: ShapeVertices): PathCommand[] {\n  const half = points.length / 2;\n  const leftPoints = [];\n  const rightPoints = [];\n  for (let i = 0; i < points.length; i++) {\n    if (i < half) {\n      leftPoints.push(points[i]);\n    } else {\n      rightPoints.push(points[i]);\n    }\n  }\n  const leftPath = getSplinePath(leftPoints, false);\n  const rightPath = getSplinePath(rightPoints, false);\n  if (rightPoints.length) {\n    leftPath.push(['L', rightPoints[0].x, rightPoints[0].y]);\n  }\n  rightPath.shift();\n  const path = leftPath.concat(rightPath);\n  if (leftPoints.length) {\n    path.push(['L', leftPoints[0].x, leftPoints[0].y]);\n  }\n  path.push(['z']);\n  return path;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}