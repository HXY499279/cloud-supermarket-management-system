{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { each } from '@antv/util';\nimport { COMPONENT_TYPE } from '../../constant';\nimport { BBox } from '../../util/bbox';\nimport { isAutoPadding, parsePadding } from '../../util/padding';\nimport { PaddingCal } from './padding-cal';\n/**\n * @ignore\n * 根据 view 中的组件，计算实际的 padding 数值\n * @param view\n */\n\nexport function calculatePadding(view) {\n  var padding = view.padding; // 如果不是 auto padding，那么直接解析之后返回\n\n  if (!isAutoPadding(padding)) {\n    return new (PaddingCal.bind.apply(PaddingCal, __spreadArrays([void 0], parsePadding(padding))))();\n  } // 是 auto padding，根据组件的情况，来计算 padding\n\n\n  var viewBBox = view.viewBBox;\n  var paddingCal = new PaddingCal();\n  var axisComponents = [];\n  var paddingComponents = [];\n  var otherComponents = [];\n  each(view.getComponents(), function (co) {\n    var type = co.type;\n\n    if (type === COMPONENT_TYPE.AXIS) {\n      axisComponents.push(co);\n    } else if ([COMPONENT_TYPE.LEGEND, COMPONENT_TYPE.SLIDER, COMPONENT_TYPE.SCROLLBAR].includes(type)) {\n      paddingComponents.push(co);\n    } else if (type !== COMPONENT_TYPE.GRID && type !== COMPONENT_TYPE.TOOLTIP) {\n      otherComponents.push(co);\n    }\n  }); // 进行坐标轴布局，应该是取 padding 的并集，而不是进行相加\n\n  each(axisComponents, function (co) {\n    var component = co.component;\n    var bboxObject = component.getLayoutBBox();\n    var componentBBox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height);\n    var exceed = componentBBox.exceed(viewBBox); // 在对组件分组之后，先对 axis 进行处理，然后取最大的超出即可。\n\n    paddingCal.max(exceed);\n  }); // 有 padding 的组件布局\n\n  each(paddingComponents, function (co) {\n    var component = co.component,\n        direction = co.direction;\n    var bboxObject = component.getLayoutBBox();\n    var componentPadding = component.get('padding');\n    var componentBBox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height).expand(componentPadding); // 按照方向计算 padding\n\n    paddingCal.inc(componentBBox, direction);\n  }); // 其他组件布局\n\n  each(otherComponents, function (co) {\n    var component = co.component,\n        direction = co.direction;\n    var bboxObject = component.getLayoutBBox();\n    var componentBBox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height); // 按照方向计算 padding\n\n    paddingCal.inc(componentBBox, direction);\n  });\n  return paddingCal;\n}","map":{"version":3,"sources":["../../../src/chart/layout/auto.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport { COMPONENT_TYPE } from '../../constant';\nimport { ComponentOption, Padding } from '../../interface';\nimport { BBox } from '../../util/bbox';\nimport { isAutoPadding, parsePadding } from '../../util/padding';\nimport View from '../view';\nimport { PaddingCal } from './padding-cal';\n\n/**\n * @ignore\n * 根据 view 中的组件，计算实际的 padding 数值\n * @param view\n */\nexport function calculatePadding(view: View): PaddingCal {\n  const padding = view.padding;\n\n  // 如果不是 auto padding，那么直接解析之后返回\n  if (!isAutoPadding(padding)) {\n    return new PaddingCal(...parsePadding(padding));\n  }\n\n  // 是 auto padding，根据组件的情况，来计算 padding\n  const { viewBBox } = view;\n\n  const paddingCal = new PaddingCal();\n\n  const axisComponents = [];\n  const paddingComponents = [];\n  const otherComponents = [];\n\n  each(view.getComponents(), (co: ComponentOption) => {\n    const { type } = co;\n    if (type === COMPONENT_TYPE.AXIS) {\n      axisComponents.push(co);\n    } else if ([COMPONENT_TYPE.LEGEND, COMPONENT_TYPE.SLIDER, COMPONENT_TYPE.SCROLLBAR].includes(type)) {\n      paddingComponents.push(co);\n    } else if (type !== COMPONENT_TYPE.GRID && type !== COMPONENT_TYPE.TOOLTIP) {\n      otherComponents.push(co);\n    }\n  });\n\n  // 进行坐标轴布局，应该是取 padding 的并集，而不是进行相加\n  each(axisComponents, (co: ComponentOption) => {\n    const { component } = co;\n    const bboxObject = component.getLayoutBBox();\n    const componentBBox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height);\n\n    const exceed = componentBBox.exceed(viewBBox);\n\n    // 在对组件分组之后，先对 axis 进行处理，然后取最大的超出即可。\n    paddingCal.max(exceed);\n  });\n\n  // 有 padding 的组件布局\n  each(paddingComponents, (co: ComponentOption) => {\n    const { component, direction } = co;\n    const bboxObject = component.getLayoutBBox();\n    const componentPadding: Padding = component.get('padding');\n    const componentBBox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height).expand(\n      componentPadding\n    );\n    // 按照方向计算 padding\n    paddingCal.inc(componentBBox, direction);\n  });\n\n  // 其他组件布局\n  each(otherComponents, (co: ComponentOption) => {\n    const { component, direction } = co;\n    const bboxObject = component.getLayoutBBox();\n    const componentBBox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height);\n    // 按照方向计算 padding\n    paddingCal.inc(componentBBox, direction);\n  });\n\n  return paddingCal;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}