{"ast":null,"code":"import { BBox } from '../../../../util/bbox';\nimport { findLabelTextShape } from '../../util';\n\nfunction shouldInShapeSingle(geometry, label, shape) {\n  var coordinate = geometry.coordinate;\n  var textShape = findLabelTextShape(label);\n  var textBBox = BBox.fromObject(textShape.getCanvasBBox());\n  var shapeBBox = BBox.fromObject(shape.getBBox());\n  return coordinate.isTransposed ? shapeBBox.height >= textBBox.height : shapeBBox.width >= textBBox.width;\n}\n\nfunction shouldInShape(geometry, labels, shapes) {\n  var isStack = !!geometry.getAdjust('stack');\n  return isStack || labels.every(function (label, index) {\n    var shape = shapes[index];\n    return shouldInShapeSingle(geometry, label, shape);\n  });\n}\n\nfunction moveInShape(geometry, label, shape) {\n  var coordinate = geometry.coordinate;\n  var shapeBBox = BBox.fromObject(shape.getBBox());\n  var textShape = findLabelTextShape(label);\n\n  if (coordinate.isTransposed) {\n    // 水平方向：条形图系列\n    textShape.attr({\n      x: shapeBBox.minX + shapeBBox.width / 2,\n      textAlign: 'center'\n    });\n  } else {\n    // 垂直方向：柱形图系列\n    textShape.attr({\n      y: shapeBBox.minY + shapeBBox.height / 2,\n      textBaseline: 'middle'\n    });\n  }\n}\n/**\n * 适用于 interval geometry 的数据标签位置自动调整布局方法\n * @param items\n * @param labels\n * @param shapes\n */\n\n\nexport function intervalAdjustPosition(items, labels, shapes) {\n  var _a;\n\n  if (shapes.length === 0) {\n    return;\n  }\n\n  var element = (_a = shapes[0]) === null || _a === void 0 ? void 0 : _a.get('element');\n  var geometry = element === null || element === void 0 ? void 0 : element.geometry;\n\n  if (!geometry || geometry.type !== 'interval') {\n    return;\n  }\n\n  var inShape = shouldInShape(geometry, labels, shapes);\n\n  if (inShape) {\n    shapes.forEach(function (shape, index) {\n      var label = labels[index];\n      moveInShape(geometry, label, shape);\n    });\n  }\n}","map":{"version":3,"sources":["../../../../../src/geometry/label/layout/interval/adjust-position.ts"],"names":[],"mappings":"AACA,SAAS,IAAT,QAAqB,uBAArB;AAIA,SAAS,kBAAT,QAAmC,YAAnC;;AAEA,SAAS,mBAAT,CAA6B,QAA7B,EAAiD,KAAjD,EAAgE,KAAhE,EAA+E;AAC7E,MAAM,UAAU,GAAG,QAAQ,CAAC,UAA5B;AACA,MAAM,SAAS,GAAG,kBAAkB,CAAC,KAAD,CAApC;AACA,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAL,CAAgB,SAAS,CAAC,aAAV,EAAhB,CAAjB;AACA,MAAM,SAAS,GAAG,IAAI,CAAC,UAAL,CAAgB,KAAK,CAAC,OAAN,EAAhB,CAAlB;AAEA,SAAO,UAAU,CAAC,YAAX,GAA0B,SAAS,CAAC,MAAV,IAAoB,QAAQ,CAAC,MAAvD,GAAgE,SAAS,CAAC,KAAV,IAAmB,QAAQ,CAAC,KAAnG;AACD;;AAED,SAAS,aAAT,CAAuB,QAAvB,EAA2C,MAA3C,EAA6D,MAA7D,EAAwF;AACtF,MAAM,OAAO,GAAG,CAAC,CAAC,QAAQ,CAAC,SAAT,CAAmB,OAAnB,CAAlB;AAEA,SACE,OAAO,IACP,MAAM,CAAC,KAAP,CAAa,UAAC,KAAD,EAAgB,KAAhB,EAA6B;AACxC,QAAM,KAAK,GAAG,MAAM,CAAC,KAAD,CAApB;AACA,WAAO,mBAAmB,CAAC,QAAD,EAAW,KAAX,EAAkB,KAAlB,CAA1B;AACD,GAHD,CAFF;AAOD;;AAED,SAAS,WAAT,CAAqB,QAArB,EAAyC,KAAzC,EAAwD,KAAxD,EAAuE;AACrE,MAAM,UAAU,GAAG,QAAQ,CAAC,UAA5B;AACA,MAAM,SAAS,GAAG,IAAI,CAAC,UAAL,CAAgB,KAAK,CAAC,OAAN,EAAhB,CAAlB;AACA,MAAM,SAAS,GAAG,kBAAkB,CAAC,KAAD,CAApC;;AAEA,MAAI,UAAU,CAAC,YAAf,EAA6B;AAC3B;AACA,IAAA,SAAS,CAAC,IAAV,CAAe;AACb,MAAA,CAAC,EAAE,SAAS,CAAC,IAAV,GAAiB,SAAS,CAAC,KAAV,GAAkB,CADzB;AAEb,MAAA,SAAS,EAAE;AAFE,KAAf;AAID,GAND,MAMO;AACL;AACA,IAAA,SAAS,CAAC,IAAV,CAAe;AACb,MAAA,CAAC,EAAE,SAAS,CAAC,IAAV,GAAiB,SAAS,CAAC,MAAV,GAAmB,CAD1B;AAEb,MAAA,YAAY,EAAE;AAFD,KAAf;AAID;AACF;AAED;;;;;AAKG;;;AACH,OAAM,SAAU,sBAAV,CAAiC,KAAjC,EAAqD,MAArD,EAAuE,MAAvE,EAAkG;;;AACtG,MAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;AACvB;AACD;;AACD,MAAM,OAAO,GAAA,CAAA,EAAA,GAAY,MAAM,CAAC,CAAD,CAAlB,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,KAAA,CAArB,GAAqB,EAAA,CAAE,GAAF,CAAM,SAAN,CAAlC;AACA,MAAM,QAAQ,GAAa,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,QAApC;;AACA,MAAI,CAAC,QAAD,IAAa,QAAQ,CAAC,IAAT,KAAkB,UAAnC,EAA+C;AAC7C;AACD;;AAED,MAAM,OAAO,GAAG,aAAa,CAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,CAA7B;;AACA,MAAI,OAAJ,EAAa;AACX,IAAA,MAAM,CAAC,OAAP,CAAe,UAAC,KAAD,EAAyB,KAAzB,EAAsC;AACnD,UAAM,KAAK,GAAG,MAAM,CAAC,KAAD,CAApB;AACA,MAAA,WAAW,CAAC,QAAD,EAAW,KAAX,EAAkB,KAAlB,CAAX;AACD,KAHD;AAID;AACF","sourcesContent":["import { IElement, IGroup, IShape } from '../../../../dependents';\nimport { BBox } from '../../../../util/bbox';\nimport Geometry from '../../../base';\nimport Element from '../../../element';\nimport { LabelItem } from '../../interface';\nimport { findLabelTextShape } from '../../util';\n\nfunction shouldInShapeSingle(geometry: Geometry, label: IGroup, shape: IElement): boolean {\n  const coordinate = geometry.coordinate;\n  const textShape = findLabelTextShape(label);\n  const textBBox = BBox.fromObject(textShape.getCanvasBBox());\n  const shapeBBox = BBox.fromObject(shape.getBBox());\n\n  return coordinate.isTransposed ? shapeBBox.height >= textBBox.height : shapeBBox.width >= textBBox.width;\n}\n\nfunction shouldInShape(geometry: Geometry, labels: IGroup[], shapes: IShape[] | IGroup[]): boolean {\n  const isStack = !!geometry.getAdjust('stack');\n\n  return (\n    isStack ||\n    labels.every((label: IGroup, index: number) => {\n      const shape = shapes[index];\n      return shouldInShapeSingle(geometry, label, shape);\n    })\n  );\n}\n\nfunction moveInShape(geometry: Geometry, label: IGroup, shape: IElement): void {\n  const coordinate = geometry.coordinate;\n  const shapeBBox = BBox.fromObject(shape.getBBox());\n  const textShape = findLabelTextShape(label);\n\n  if (coordinate.isTransposed) {\n    // 水平方向：条形图系列\n    textShape.attr({\n      x: shapeBBox.minX + shapeBBox.width / 2,\n      textAlign: 'center',\n    });\n  } else {\n    // 垂直方向：柱形图系列\n    textShape.attr({\n      y: shapeBBox.minY + shapeBBox.height / 2,\n      textBaseline: 'middle',\n    });\n  }\n}\n\n/**\n * 适用于 interval geometry 的数据标签位置自动调整布局方法\n * @param items\n * @param labels\n * @param shapes\n */\nexport function intervalAdjustPosition(items: LabelItem[], labels: IGroup[], shapes: IShape[] | IGroup[]) {\n  if (shapes.length === 0) {\n    return;\n  }\n  const element: Element = shapes[0]?.get('element');\n  const geometry: Geometry = element?.geometry;\n  if (!geometry || geometry.type !== 'interval') {\n    return;\n  }\n\n  const inShape = shouldInShape(geometry, labels, shapes);\n  if (inShape) {\n    shapes.forEach((shape: IShape | IGroup, index: number) => {\n      const label = labels[index];\n      moveInShape(geometry, label, shape);\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}