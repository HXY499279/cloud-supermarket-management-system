{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AbstractGroup } from '@antv/g-base';\nimport * as Shape from './shape';\nimport { applyAttrsToContext, drawChildren, refreshElement } from './util/draw';\nimport { each, max, min } from '@antv/util';\nimport { intersectRect } from './util/util';\n\nvar Group =\n/** @class */\nfunction (_super) {\n  __extends(Group, _super);\n\n  function Group() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n\n\n  Group.prototype.onCanvasChange = function (changeType) {\n    refreshElement(this, changeType);\n  };\n\n  Group.prototype.getShapeBase = function () {\n    return Shape;\n  };\n\n  Group.prototype.getGroupBase = function () {\n    return Group;\n  }; // 同 shape 中的方法重复了\n\n\n  Group.prototype._applyClip = function (context, clip) {\n    if (clip) {\n      context.save(); // 将 clip 的属性挂载到 context 上\n\n      applyAttrsToContext(context, clip); // 绘制 clip 路径\n\n      clip.createPath(context);\n      context.restore(); // 裁剪\n\n      context.clip();\n\n      clip._afterDraw();\n    }\n  }; // 这个方法以前直接使用的 getCanvasBBox，由于 group 上没有缓存，所以每次重新计算，导致性能开销比较大\n  // 大概能够节省全局渲染 15-20% 的性能，如果不在这里加缓存优化后 10W 个节点无法达到 5-6 ms，大概能够 30-40ms\n\n\n  Group.prototype.cacheCanvasBBox = function () {\n    var children = this.cfg.children;\n    var xArr = [];\n    var yArr = [];\n    each(children, function (child) {\n      var bbox = child.cfg.cacheCanvasBBox; // isInview 的判定是一旦图形或者分组渲染就要计算是否在视图内，\n      // 这个判定 10W 个图形下差不多能够节省 5-6 ms 的开销\n\n      if (bbox && child.cfg.isInView) {\n        xArr.push(bbox.minX, bbox.maxX);\n        yArr.push(bbox.minY, bbox.maxY);\n      }\n    });\n    var bbox = null;\n\n    if (xArr.length) {\n      var minX = min(xArr);\n      var maxX = max(xArr);\n      var minY = min(yArr);\n      var maxY = max(yArr);\n      bbox = {\n        minX: minX,\n        minY: minY,\n        x: minX,\n        y: minY,\n        maxX: maxX,\n        maxY: maxY,\n        width: maxX - minX,\n        height: maxY - minY\n      };\n      var canvas = this.cfg.canvas;\n\n      if (canvas) {\n        var viewRange = canvas.getViewRange(); // 如果这个地方判定 isInView == false 设置 bbox 为 false 的话，拾取的性能会更高\n        // 但是目前 10W 图形的拾取在 2-5ms 内，这个优化意义不大，可以后期观察再看\n\n        this.set('isInView', intersectRect(bbox, viewRange));\n      }\n    } else {\n      this.set('isInView', false);\n    }\n\n    this.set('cacheCanvasBBox', bbox);\n  };\n\n  Group.prototype.draw = function (context, region) {\n    var children = this.cfg.children;\n    var allowDraw = region ? this.cfg.refresh : true; // 局部刷新需要判定\n    // 这个地方需要判定，在 G6 的场景每个 group 都有 transform 的场景下性能会开销非常大\n    // 通过 refresh 的判定，可以不刷新没有发生过变化的分组，不在视窗内的分组等等\n    // 如果想进一步提升局部渲染性能，可以进一步优化 refresh 的判定，依然有潜力\n\n    if (children.length && allowDraw) {\n      context.save(); // group 上的矩阵和属性也会应用到上下文上\n      // 先将 attrs 应用到上下文中，再设置 clip。因为 clip 应该被当前元素的 matrix 所影响\n\n      applyAttrsToContext(context, this);\n\n      this._applyClip(context, this.getClip());\n\n      drawChildren(context, children, region);\n      context.restore();\n      this.cacheCanvasBBox();\n    } // 这里的成本比较大，如果不绘制则不再\n    // this.set('cacheCanvasBBox', this.getCanvasBBox());\n\n\n    this.cfg.refresh = null; // 绘制后，消除更新标记\n\n    this.set('hasChanged', false);\n  }; // 绘制时被跳过，一般发生在分组隐藏时\n\n\n  Group.prototype.skipDraw = function () {\n    this.set('cacheCanvasBBox', null);\n    this.set('hasChanged', false);\n  };\n\n  return Group;\n}(AbstractGroup);\n\nexport default Group;","map":{"version":3,"sources":["../src/group.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { AbstractGroup } from '@antv/g-base';\nimport * as Shape from './shape';\nimport { applyAttrsToContext, drawChildren, refreshElement } from './util/draw';\nimport { each, max, min } from '@antv/util';\nimport { intersectRect } from './util/util';\nvar Group = /** @class */ (function (_super) {\n    __extends(Group, _super);\n    function Group() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * 一些方法调用会引起画布变化\n     * @param {ChangeType} changeType 改变的类型\n     */\n    Group.prototype.onCanvasChange = function (changeType) {\n        refreshElement(this, changeType);\n    };\n    Group.prototype.getShapeBase = function () {\n        return Shape;\n    };\n    Group.prototype.getGroupBase = function () {\n        return Group;\n    };\n    // 同 shape 中的方法重复了\n    Group.prototype._applyClip = function (context, clip) {\n        if (clip) {\n            context.save();\n            // 将 clip 的属性挂载到 context 上\n            applyAttrsToContext(context, clip);\n            // 绘制 clip 路径\n            clip.createPath(context);\n            context.restore();\n            // 裁剪\n            context.clip();\n            clip._afterDraw();\n        }\n    };\n    // 这个方法以前直接使用的 getCanvasBBox，由于 group 上没有缓存，所以每次重新计算，导致性能开销比较大\n    // 大概能够节省全局渲染 15-20% 的性能，如果不在这里加缓存优化后 10W 个节点无法达到 5-6 ms，大概能够 30-40ms\n    Group.prototype.cacheCanvasBBox = function () {\n        var children = this.cfg.children;\n        var xArr = [];\n        var yArr = [];\n        each(children, function (child) {\n            var bbox = child.cfg.cacheCanvasBBox;\n            // isInview 的判定是一旦图形或者分组渲染就要计算是否在视图内，\n            // 这个判定 10W 个图形下差不多能够节省 5-6 ms 的开销\n            if (bbox && child.cfg.isInView) {\n                xArr.push(bbox.minX, bbox.maxX);\n                yArr.push(bbox.minY, bbox.maxY);\n            }\n        });\n        var bbox = null;\n        if (xArr.length) {\n            var minX = min(xArr);\n            var maxX = max(xArr);\n            var minY = min(yArr);\n            var maxY = max(yArr);\n            bbox = {\n                minX: minX,\n                minY: minY,\n                x: minX,\n                y: minY,\n                maxX: maxX,\n                maxY: maxY,\n                width: maxX - minX,\n                height: maxY - minY,\n            };\n            var canvas = this.cfg.canvas;\n            if (canvas) {\n                var viewRange = canvas.getViewRange();\n                // 如果这个地方判定 isInView == false 设置 bbox 为 false 的话，拾取的性能会更高\n                // 但是目前 10W 图形的拾取在 2-5ms 内，这个优化意义不大，可以后期观察再看\n                this.set('isInView', intersectRect(bbox, viewRange));\n            }\n        }\n        else {\n            this.set('isInView', false);\n        }\n        this.set('cacheCanvasBBox', bbox);\n    };\n    Group.prototype.draw = function (context, region) {\n        var children = this.cfg.children;\n        var allowDraw = region ? this.cfg.refresh : true; // 局部刷新需要判定\n        // 这个地方需要判定，在 G6 的场景每个 group 都有 transform 的场景下性能会开销非常大\n        // 通过 refresh 的判定，可以不刷新没有发生过变化的分组，不在视窗内的分组等等\n        // 如果想进一步提升局部渲染性能，可以进一步优化 refresh 的判定，依然有潜力\n        if (children.length && allowDraw) {\n            context.save();\n            // group 上的矩阵和属性也会应用到上下文上\n            // 先将 attrs 应用到上下文中，再设置 clip。因为 clip 应该被当前元素的 matrix 所影响\n            applyAttrsToContext(context, this);\n            this._applyClip(context, this.getClip());\n            drawChildren(context, children, region);\n            context.restore();\n            this.cacheCanvasBBox();\n        }\n        // 这里的成本比较大，如果不绘制则不再\n        // this.set('cacheCanvasBBox', this.getCanvasBBox());\n        this.cfg.refresh = null;\n        // 绘制后，消除更新标记\n        this.set('hasChanged', false);\n    };\n    // 绘制时被跳过，一般发生在分组隐藏时\n    Group.prototype.skipDraw = function () {\n        this.set('cacheCanvasBBox', null);\n        this.set('hasChanged', false);\n    };\n    return Group;\n}(AbstractGroup));\nexport default Group;\n//# sourceMappingURL=group.js.map"]},"metadata":{},"sourceType":"module"}