{"ast":null,"code":"import { assign } from '@antv/util';\n/**\n * Action 的基类\n */\n\nvar Action =\n/** @class */\nfunction () {\n  function Action(context, cfg) {\n    this.context = context;\n    this.cfg = cfg;\n    context.addAction(this);\n  }\n  /**\n   * 设置配置项传入的值\n   * @param cfg\n   */\n\n\n  Action.prototype.applyCfg = function (cfg) {\n    assign(this, cfg);\n  };\n  /**\n   * Inits action，提供给子类用于继承\n   */\n\n\n  Action.prototype.init = function () {\n    this.applyCfg(this.cfg);\n  };\n  /**\n   * Destroys action\n   */\n\n\n  Action.prototype.destroy = function () {\n    // 移除 action\n    this.context.removeAction(this); // 清空\n\n    this.context = null;\n  };\n\n  return Action;\n}();\n\nexport default Action;","map":{"version":3,"sources":["../../../src/interaction/action/base.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,YAAvB;AAGA;;AAEG;;AACH,IAAA,MAAA;AAAA;AAAA,YAAA;AAUE,WAAA,MAAA,CAAY,OAAZ,EAA0C,GAA1C,EAAiD;AAC/C,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,GAAL,GAAW,GAAX;AACA,IAAA,OAAO,CAAC,SAAR,CAAkB,IAAlB;AACD;AAED;;;AAGG;;;AACO,EAAA,MAAA,CAAA,SAAA,CAAA,QAAA,GAAV,UAAmB,GAAnB,EAAsB;AACpB,IAAA,MAAM,CAAC,IAAD,EAAO,GAAP,CAAN;AACD,GAFS;AAIV;;AAEG;;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA;AACE,SAAK,QAAL,CAAc,KAAK,GAAnB;AACD,GAFM;AAIP;;AAEG;;;AACI,EAAA,MAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACE;AACA,SAAK,OAAL,CAAa,YAAb,CAA0B,IAA1B,EAFF,CAGE;;AACA,SAAK,OAAL,GAAe,IAAf;AACD,GALM;;AAMT,SAAA,MAAA;AAAC,CAxCD,EAAA;;AA0CA,eAAe,MAAf","sourcesContent":["import { assign } from '@antv/util';\nimport { IAction, IInteractionContext, LooseObject } from '../../interface';\n\n/**\n * Action 的基类\n */\nabstract class Action<T = LooseObject> implements IAction {\n  /** Action 名字 */\n  public name;\n  /** 上下文对象 */\n  public context: IInteractionContext;\n  /** Action 配置 */\n  protected cfg: T;\n  /** 配置项的字段，自动负值到 this 上 */\n  protected cfgFields: string[];\n\n  constructor(context: IInteractionContext, cfg?: T) {\n    this.context = context;\n    this.cfg = cfg;\n    context.addAction(this);\n  }\n\n  /**\n   * 设置配置项传入的值\n   * @param cfg\n   */\n  protected applyCfg(cfg) {\n    assign(this, cfg);\n  }\n\n  /**\n   * Inits action，提供给子类用于继承\n   */\n  public init() {\n    this.applyCfg(this.cfg);\n  }\n\n  /**\n   * Destroys action\n   */\n  public destroy() {\n    // 移除 action\n    this.context.removeAction(this);\n    // 清空\n    this.context = null;\n  }\n}\n\nexport default Action;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}