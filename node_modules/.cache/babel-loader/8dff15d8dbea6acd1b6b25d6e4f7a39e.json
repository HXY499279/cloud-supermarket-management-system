{"ast":null,"code":"import { DAY, HOUR, MINUTE, MONTH, SECOND, YEAR } from '../util/time';\n\nfunction getYear(date) {\n  return new Date(date).getFullYear();\n}\n\nfunction createYear(year) {\n  return new Date(year, 0, 1).getTime();\n}\n\nfunction getMonth(date) {\n  return new Date(date).getMonth();\n}\n\nfunction diffMonth(min, max) {\n  var minYear = getYear(min);\n  var maxYear = getYear(max);\n  var minMonth = getMonth(min);\n  var maxMonth = getMonth(max);\n  return (maxYear - minYear) * 12 + (maxMonth - minMonth) % 12;\n}\n\nfunction creatMonth(year, month) {\n  return new Date(year, month, 1).getTime();\n}\n\nfunction diffDay(min, max) {\n  return Math.ceil((max - min) / DAY);\n}\n\nfunction diffHour(min, max) {\n  return Math.ceil((max - min) / HOUR);\n}\n\nfunction diffMinus(min, max) {\n  return Math.ceil((max - min) / (60 * 1000));\n}\n/**\n * 计算 time 的 ticks，对 month, year 进行 pretty 处理\n * @param cfg 度量的配置项\n * @returns 计算后的 ticks\n */\n\n\nexport default function timePretty(cfg) {\n  var min = cfg.min,\n      max = cfg.max,\n      minTickInterval = cfg.minTickInterval,\n      tickCount = cfg.tickCount;\n  var tickInterval = cfg.tickInterval;\n  var ticks = []; // 指定 tickInterval 后 tickCount 不生效，需要重新计算\n\n  if (!tickInterval) {\n    tickInterval = (max - min) / tickCount; // 如果设置了最小间距，则使用最小间距\n\n    if (minTickInterval && tickInterval < minTickInterval) {\n      tickInterval = minTickInterval;\n    }\n  }\n\n  var minYear = getYear(min); // 如果间距大于 1 年，则将开始日期从整年开始\n\n  if (tickInterval > YEAR) {\n    var maxYear = getYear(max);\n    var yearInterval = Math.ceil(tickInterval / YEAR);\n\n    for (var i = minYear; i <= maxYear + yearInterval; i = i + yearInterval) {\n      ticks.push(createYear(i));\n    }\n  } else if (tickInterval > MONTH) {\n    // 大于月时\n    var monthInterval = Math.ceil(tickInterval / MONTH);\n    var mmMoth = getMonth(min);\n    var dMonths = diffMonth(min, max);\n\n    for (var i = 0; i <= dMonths + monthInterval; i = i + monthInterval) {\n      ticks.push(creatMonth(minYear, i + mmMoth));\n    }\n  } else if (tickInterval > DAY) {\n    // 大于天\n    var date = new Date(min);\n    var year = date.getFullYear();\n    var month = date.getMonth();\n    var mday = date.getDate();\n    var day = Math.ceil(tickInterval / DAY);\n    var ddays = diffDay(min, max);\n\n    for (var i = 0; i < ddays + day; i = i + day) {\n      ticks.push(new Date(year, month, mday + i).getTime());\n    }\n  } else if (tickInterval > HOUR) {\n    // 大于小时\n    var date = new Date(min);\n    var year = date.getFullYear();\n    var month = date.getMonth();\n    var day = date.getDate();\n    var hour = date.getHours();\n    var hours = Math.ceil(tickInterval / HOUR);\n    var dHours = diffHour(min, max);\n\n    for (var i = 0; i <= dHours + hours; i = i + hours) {\n      ticks.push(new Date(year, month, day, hour + i).getTime());\n    }\n  } else if (tickInterval > MINUTE) {\n    // 大于分钟\n    var dMinus = diffMinus(min, max);\n    var minutes = Math.ceil(tickInterval / MINUTE);\n\n    for (var i = 0; i <= dMinus + minutes; i = i + minutes) {\n      ticks.push(min + i * MINUTE);\n    }\n  } else {\n    // 小于分钟\n    var interval = tickInterval;\n\n    if (interval < SECOND) {\n      interval = SECOND;\n    }\n\n    var minSecond = Math.floor(min / SECOND) * SECOND;\n    var dSeconds = Math.ceil((max - min) / SECOND);\n    var seconds = Math.ceil(interval / SECOND);\n\n    for (var i = 0; i < dSeconds + seconds; i = i + seconds) {\n      ticks.push(minSecond + i * SECOND);\n    }\n  } // 最好是能从算法能解决这个问题，但是如果指定了 tickInterval，计算 ticks，也只能这么算，所以\n  // 打印警告提示\n\n\n  if (ticks.length >= 512) {\n    console.warn(\"Notice: current ticks length(\" + ticks.length + \") >= 512, may cause performance issues, even out of memory. Because of the configure \\\"tickInterval\\\"(in milliseconds, current is \" + tickInterval + \") is too small, increase the value to solve the problem!\");\n  }\n\n  return ticks;\n}","map":{"version":3,"sources":["../../src/tick-method/time-pretty.ts"],"names":[],"mappings":"AACA,SAAS,GAAT,EAA+B,IAA/B,EAAqC,MAArC,EAA6C,KAA7C,EAAoD,MAApD,EAA4D,IAA5D,QAAwE,cAAxE;;AAEA,SAAS,OAAT,CAAiB,IAAjB,EAA6B;AAC3B,SAAO,IAAI,IAAJ,CAAS,IAAT,EAAe,WAAf,EAAP;AACD;;AAED,SAAS,UAAT,CAAoB,IAApB,EAAgC;AAC9B,SAAO,IAAI,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,OAArB,EAAP;AACD;;AAED,SAAS,QAAT,CAAkB,IAAlB,EAA8B;AAC5B,SAAO,IAAI,IAAJ,CAAS,IAAT,EAAe,QAAf,EAAP;AACD;;AAED,SAAS,SAAT,CAAmB,GAAnB,EAAgC,GAAhC,EAA2C;AACzC,MAAM,OAAO,GAAG,OAAO,CAAC,GAAD,CAAvB;AACA,MAAM,OAAO,GAAG,OAAO,CAAC,GAAD,CAAvB;AACA,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAD,CAAzB;AACA,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAD,CAAzB;AACA,SAAO,CAAC,OAAO,GAAG,OAAX,IAAsB,EAAtB,GAA4B,CAAC,QAAQ,GAAG,QAAZ,IAAwB,EAA3D;AACD;;AAED,SAAS,UAAT,CAAoB,IAApB,EAAkC,KAAlC,EAA+C;AAC7C,SAAO,IAAI,IAAJ,CAAS,IAAT,EAAe,KAAf,EAAsB,CAAtB,EAAyB,OAAzB,EAAP;AACD;;AAED,SAAS,OAAT,CAAiB,GAAjB,EAA8B,GAA9B,EAAyC;AACvC,SAAO,IAAI,CAAC,IAAL,CAAU,CAAC,GAAG,GAAG,GAAP,IAAc,GAAxB,CAAP;AACD;;AAED,SAAS,QAAT,CAAkB,GAAlB,EAA+B,GAA/B,EAA0C;AACxC,SAAO,IAAI,CAAC,IAAL,CAAU,CAAC,GAAG,GAAG,GAAP,IAAc,IAAxB,CAAP;AACD;;AAED,SAAS,SAAT,CAAmB,GAAnB,EAAgC,GAAhC,EAA2C;AACzC,SAAO,IAAI,CAAC,IAAL,CAAU,CAAC,GAAG,GAAG,GAAP,KAAe,KAAK,IAApB,CAAV,CAAP;AACD;AAED;;;;AAIG;;;AACH,eAAc,SAAU,UAAV,CAAqB,GAArB,EAAqC;AACzC,MAAA,GAAG,GAAsC,GAAG,CAAzC,GAAH;AAAA,MAAK,GAAG,GAAiC,GAAG,CAApC,GAAR;AAAA,MAAU,eAAe,GAAgB,GAAG,CAAnB,eAAzB;AAAA,MAA2B,SAAS,GAAK,GAAG,CAAR,SAApC;AACF,MAAA,YAAY,GAAK,GAAG,CAAR,YAAZ;AACN,MAAM,KAAK,GAAa,EAAxB,CAHiD,CAIjD;;AACA,MAAI,CAAC,YAAL,EAAmB;AACjB,IAAA,YAAY,GAAG,CAAC,GAAG,GAAG,GAAP,IAAc,SAA7B,CADiB,CAEjB;;AACA,QAAI,eAAe,IAAI,YAAY,GAAG,eAAtC,EAAuD;AACrD,MAAA,YAAY,GAAG,eAAf;AACD;AACF;;AACD,MAAM,OAAO,GAAG,OAAO,CAAC,GAAD,CAAvB,CAZiD,CAajD;;AACA,MAAI,YAAY,GAAG,IAAnB,EAAyB;AACvB,QAAM,OAAO,GAAG,OAAO,CAAC,GAAD,CAAvB;AACA,QAAM,YAAY,GAAG,IAAI,CAAC,IAAL,CAAU,YAAY,GAAG,IAAzB,CAArB;;AACA,SAAK,IAAI,CAAC,GAAG,OAAb,EAAsB,CAAC,IAAI,OAAO,GAAG,YAArC,EAAmD,CAAC,GAAG,CAAC,GAAG,YAA3D,EAAyE;AACvE,MAAA,KAAK,CAAC,IAAN,CAAW,UAAU,CAAC,CAAD,CAArB;AACD;AACF,GAND,MAMO,IAAI,YAAY,GAAG,KAAnB,EAA0B;AAC/B;AACA,QAAM,aAAa,GAAG,IAAI,CAAC,IAAL,CAAU,YAAY,GAAG,KAAzB,CAAtB;AACA,QAAM,MAAM,GAAG,QAAQ,CAAC,GAAD,CAAvB;AACA,QAAM,OAAO,GAAG,SAAS,CAAC,GAAD,EAAM,GAAN,CAAzB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,IAAI,OAAO,GAAG,aAA/B,EAA8C,CAAC,GAAG,CAAC,GAAG,aAAtD,EAAqE;AACnE,MAAA,KAAK,CAAC,IAAN,CAAW,UAAU,CAAC,OAAD,EAAU,CAAC,GAAG,MAAd,CAArB;AACD;AACF,GARM,MAQA,IAAI,YAAY,GAAG,GAAnB,EAAwB;AAC7B;AACA,QAAM,IAAI,GAAG,IAAI,IAAJ,CAAS,GAAT,CAAb;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,WAAL,EAAb;AACA,QAAM,KAAK,GAAG,IAAI,CAAC,QAAL,EAAd;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,OAAL,EAAb;AACA,QAAM,GAAG,GAAG,IAAI,CAAC,IAAL,CAAU,YAAY,GAAG,GAAzB,CAAZ;AACA,QAAM,KAAK,GAAG,OAAO,CAAC,GAAD,EAAM,GAAN,CAArB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,GAAG,GAA5B,EAAiC,CAAC,GAAG,CAAC,GAAG,GAAzC,EAA8C;AAC5C,MAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,IAAT,EAAe,KAAf,EAAsB,IAAI,GAAG,CAA7B,EAAgC,OAAhC,EAAX;AACD;AACF,GAXM,MAWA,IAAI,YAAY,GAAG,IAAnB,EAAyB;AAC9B;AACA,QAAM,IAAI,GAAG,IAAI,IAAJ,CAAS,GAAT,CAAb;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,WAAL,EAAb;AACA,QAAM,KAAK,GAAG,IAAI,CAAC,QAAL,EAAd;AACA,QAAM,GAAG,GAAG,IAAI,CAAC,OAAL,EAAZ;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,QAAL,EAAb;AACA,QAAM,KAAK,GAAG,IAAI,CAAC,IAAL,CAAU,YAAY,GAAG,IAAzB,CAAd;AACA,QAAM,MAAM,GAAG,QAAQ,CAAC,GAAD,EAAM,GAAN,CAAvB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,IAAI,MAAM,GAAG,KAA9B,EAAqC,CAAC,GAAG,CAAC,GAAG,KAA7C,EAAoD;AAClD,MAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,IAAT,EAAe,KAAf,EAAsB,GAAtB,EAA2B,IAAI,GAAG,CAAlC,EAAqC,OAArC,EAAX;AACD;AACF,GAZM,MAYA,IAAI,YAAY,GAAG,MAAnB,EAA2B;AAChC;AACA,QAAM,MAAM,GAAG,SAAS,CAAC,GAAD,EAAM,GAAN,CAAxB;AACA,QAAM,OAAO,GAAG,IAAI,CAAC,IAAL,CAAU,YAAY,GAAG,MAAzB,CAAhB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,IAAI,MAAM,GAAG,OAA9B,EAAuC,CAAC,GAAG,CAAC,GAAG,OAA/C,EAAwD;AACtD,MAAA,KAAK,CAAC,IAAN,CAAW,GAAG,GAAG,CAAC,GAAG,MAArB;AACD;AACF,GAPM,MAOA;AACL;AACA,QAAI,QAAQ,GAAG,YAAf;;AACA,QAAI,QAAQ,GAAG,MAAf,EAAuB;AACrB,MAAA,QAAQ,GAAG,MAAX;AACD;;AACD,QAAM,SAAS,GAAG,IAAI,CAAC,KAAL,CAAW,GAAG,GAAG,MAAjB,IAA2B,MAA7C;AACA,QAAM,QAAQ,GAAG,IAAI,CAAC,IAAL,CAAU,CAAC,GAAG,GAAG,GAAP,IAAc,MAAxB,CAAjB;AACA,QAAM,OAAO,GAAG,IAAI,CAAC,IAAL,CAAU,QAAQ,GAAG,MAArB,CAAhB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,GAAG,OAA/B,EAAwC,CAAC,GAAG,CAAC,GAAG,OAAhD,EAAyD;AACvD,MAAA,KAAK,CAAC,IAAN,CAAW,SAAS,GAAG,CAAC,GAAG,MAA3B;AACD;AACF,GAtEgD,CAwEjD;AACA;;;AACA,MAAI,KAAK,CAAC,MAAN,IAAgB,GAApB,EAAyB;AACvB,IAAA,OAAO,CAAC,IAAR,CAAa,kCAAgC,KAAK,CAAC,MAAtC,GAA4C,oIAA5C,GAA+K,YAA/K,GAA2L,0DAAxM;AACD;;AAED,SAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["import { DAY, HOUR, MINUTE, MONTH, SECOND, YEAR } from '../util/time';\nfunction getYear(date) {\n    return new Date(date).getFullYear();\n}\nfunction createYear(year) {\n    return new Date(year, 0, 1).getTime();\n}\nfunction getMonth(date) {\n    return new Date(date).getMonth();\n}\nfunction diffMonth(min, max) {\n    var minYear = getYear(min);\n    var maxYear = getYear(max);\n    var minMonth = getMonth(min);\n    var maxMonth = getMonth(max);\n    return (maxYear - minYear) * 12 + ((maxMonth - minMonth) % 12);\n}\nfunction creatMonth(year, month) {\n    return new Date(year, month, 1).getTime();\n}\nfunction diffDay(min, max) {\n    return Math.ceil((max - min) / DAY);\n}\nfunction diffHour(min, max) {\n    return Math.ceil((max - min) / HOUR);\n}\nfunction diffMinus(min, max) {\n    return Math.ceil((max - min) / (60 * 1000));\n}\n/**\n * 计算 time 的 ticks，对 month, year 进行 pretty 处理\n * @param cfg 度量的配置项\n * @returns 计算后的 ticks\n */\nexport default function timePretty(cfg) {\n    var min = cfg.min, max = cfg.max, minTickInterval = cfg.minTickInterval, tickCount = cfg.tickCount;\n    var tickInterval = cfg.tickInterval;\n    var ticks = [];\n    // 指定 tickInterval 后 tickCount 不生效，需要重新计算\n    if (!tickInterval) {\n        tickInterval = (max - min) / tickCount;\n        // 如果设置了最小间距，则使用最小间距\n        if (minTickInterval && tickInterval < minTickInterval) {\n            tickInterval = minTickInterval;\n        }\n    }\n    var minYear = getYear(min);\n    // 如果间距大于 1 年，则将开始日期从整年开始\n    if (tickInterval > YEAR) {\n        var maxYear = getYear(max);\n        var yearInterval = Math.ceil(tickInterval / YEAR);\n        for (var i = minYear; i <= maxYear + yearInterval; i = i + yearInterval) {\n            ticks.push(createYear(i));\n        }\n    }\n    else if (tickInterval > MONTH) {\n        // 大于月时\n        var monthInterval = Math.ceil(tickInterval / MONTH);\n        var mmMoth = getMonth(min);\n        var dMonths = diffMonth(min, max);\n        for (var i = 0; i <= dMonths + monthInterval; i = i + monthInterval) {\n            ticks.push(creatMonth(minYear, i + mmMoth));\n        }\n    }\n    else if (tickInterval > DAY) {\n        // 大于天\n        var date = new Date(min);\n        var year = date.getFullYear();\n        var month = date.getMonth();\n        var mday = date.getDate();\n        var day = Math.ceil(tickInterval / DAY);\n        var ddays = diffDay(min, max);\n        for (var i = 0; i < ddays + day; i = i + day) {\n            ticks.push(new Date(year, month, mday + i).getTime());\n        }\n    }\n    else if (tickInterval > HOUR) {\n        // 大于小时\n        var date = new Date(min);\n        var year = date.getFullYear();\n        var month = date.getMonth();\n        var day = date.getDate();\n        var hour = date.getHours();\n        var hours = Math.ceil(tickInterval / HOUR);\n        var dHours = diffHour(min, max);\n        for (var i = 0; i <= dHours + hours; i = i + hours) {\n            ticks.push(new Date(year, month, day, hour + i).getTime());\n        }\n    }\n    else if (tickInterval > MINUTE) {\n        // 大于分钟\n        var dMinus = diffMinus(min, max);\n        var minutes = Math.ceil(tickInterval / MINUTE);\n        for (var i = 0; i <= dMinus + minutes; i = i + minutes) {\n            ticks.push(min + i * MINUTE);\n        }\n    }\n    else {\n        // 小于分钟\n        var interval = tickInterval;\n        if (interval < SECOND) {\n            interval = SECOND;\n        }\n        var minSecond = Math.floor(min / SECOND) * SECOND;\n        var dSeconds = Math.ceil((max - min) / SECOND);\n        var seconds = Math.ceil(interval / SECOND);\n        for (var i = 0; i < dSeconds + seconds; i = i + seconds) {\n            ticks.push(minSecond + i * SECOND);\n        }\n    }\n    // 最好是能从算法能解决这个问题，但是如果指定了 tickInterval，计算 ticks，也只能这么算，所以\n    // 打印警告提示\n    if (ticks.length >= 512) {\n        console.warn(\"Notice: current ticks length(\" + ticks.length + \") >= 512, may cause performance issues, even out of memory. Because of the configure \\\"tickInterval\\\"(in milliseconds, current is \" + tickInterval + \") is too small, increase the value to solve the problem!\");\n    }\n    return ticks;\n}\n//# sourceMappingURL=time-pretty.js.map"]},"metadata":{},"sourceType":"module"}