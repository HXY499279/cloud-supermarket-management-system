{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { registerShape } from '../base';\nimport { BACKGROUND_SHAPE } from '../constant';\nimport { getBackgroundRectStyle, getStyle } from '../util/get-style';\nimport { getBackgroundRectPath, getRectPath } from './util';\n/** 描边柱状图 */\n\nregisterShape('interval', 'hollow-rect', {\n  draw: function (cfg, container) {\n    var style = getStyle(cfg, true, false);\n    var group = container;\n    var backgroundCfg = cfg === null || cfg === void 0 ? void 0 : cfg.background;\n\n    if (backgroundCfg) {\n      group = container.addGroup();\n      var backgroundStyle = getBackgroundRectStyle(cfg);\n      var backgroundPath = getBackgroundRectPath(cfg, this.parsePoints(cfg.points), this.coordinate);\n      group.addShape('path', {\n        attrs: __assign(__assign({}, backgroundStyle), {\n          path: backgroundPath\n        }),\n        zIndex: -1,\n        name: BACKGROUND_SHAPE\n      });\n    }\n\n    var path = this.parsePath(getRectPath(cfg.points));\n    var shape = group.addShape('path', {\n      attrs: __assign(__assign({}, style), {\n        path: path\n      }),\n      name: 'interval'\n    });\n    return backgroundCfg ? group : shape;\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color,\n        isInPolar = markerCfg.isInPolar;\n\n    if (isInPolar) {\n      return {\n        symbol: 'circle',\n        style: {\n          r: 4.5,\n          stroke: color,\n          fill: null\n        }\n      };\n    }\n\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        stroke: color,\n        fill: null\n      }\n    };\n  }\n});","map":{"version":3,"sources":["../../../../src/geometry/shape/interval/hollow-rect.ts"],"names":[],"mappings":";AAGA,SAAS,aAAT,QAA8B,SAA9B;AACA,SAAS,gBAAT,QAAiC,aAAjC;AACA,SAAS,sBAAT,EAAiC,QAAjC,QAAiD,mBAAjD;AACA,SAAS,qBAAT,EAAgC,WAAhC,QAAmD,QAAnD;AAEA;;AACA,aAAa,CAAC,UAAD,EAAa,aAAb,EAA4B;AACvC,EAAA,IAAI,EAAJ,UAAK,GAAL,EAAqB,SAArB,EAAsC;AACpC,QAAM,KAAK,GAAG,QAAQ,CAAC,GAAD,EAAM,IAAN,EAAY,KAAZ,CAAtB;AACA,QAAI,KAAK,GAAG,SAAZ;AACA,QAAM,aAAa,GAAG,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAG,KAAA,CAAH,GAAA,GAAG,CAAE,UAA3B;;AACA,QAAI,aAAJ,EAAmB;AACjB,MAAA,KAAK,GAAG,SAAS,CAAC,QAAV,EAAR;AACA,UAAM,eAAe,GAAG,sBAAsB,CAAC,GAAD,CAA9C;AACA,UAAM,cAAc,GAAG,qBAAqB,CAAC,GAAD,EAAM,KAAK,WAAL,CAAiB,GAAG,CAAC,MAArB,CAAN,EAA+C,KAAK,UAApD,CAA5C;AACA,MAAA,KAAK,CAAC,QAAN,CAAe,MAAf,EAAuB;AACrB,QAAA,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACA,eADA,CAAA,EACe;AAClB,UAAA,IAAI,EAAE;AADY,SADf,CADgB;AAKrB,QAAA,MAAM,EAAE,CAAC,CALY;AAMrB,QAAA,IAAI,EAAE;AANe,OAAvB;AAQD;;AAED,QAAM,IAAI,GAAG,KAAK,SAAL,CAAe,WAAW,CAAC,GAAG,CAAC,MAAL,CAA1B,CAAb;AACA,QAAM,KAAK,GAAG,KAAK,CAAC,QAAN,CAAe,MAAf,EAAuB;AACnC,MAAA,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACA,KADA,CAAA,EACK;AACR,QAAA,IAAI,EAAA;AADI,OADL,CAD8B;AAKnC,MAAA,IAAI,EAAE;AAL6B,KAAvB,CAAd;AAQA,WAAO,aAAa,GAAG,KAAH,GAAW,KAA/B;AACD,GA7BsC;AA8BvC,EAAA,SAAS,EAAT,UAAU,SAAV,EAAmC;AACzB,QAAA,KAAK,GAAgB,SAAS,CAAzB,KAAL;AAAA,QAAO,SAAS,GAAK,SAAS,CAAd,SAAhB;;AACR,QAAI,SAAJ,EAAe;AACb,aAAO;AACL,QAAA,MAAM,EAAE,QADH;AAEL,QAAA,KAAK,EAAE;AACL,UAAA,CAAC,EAAE,GADE;AAEL,UAAA,MAAM,EAAE,KAFH;AAGL,UAAA,IAAI,EAAE;AAHD;AAFF,OAAP;AAQD;;AAED,WAAO;AACL,MAAA,MAAM,EAAE,QADH;AAEL,MAAA,KAAK,EAAE;AACL,QAAA,CAAC,EAAE,CADE;AAEL,QAAA,MAAM,EAAE,KAFH;AAGL,QAAA,IAAI,EAAE;AAHD;AAFF,KAAP;AAQD;AAnDsC,CAA5B,CAAb","sourcesContent":["import { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg } from '../../../interface';\n\nimport { registerShape } from '../base';\nimport { BACKGROUND_SHAPE } from '../constant';\nimport { getBackgroundRectStyle, getStyle } from '../util/get-style';\nimport { getBackgroundRectPath, getRectPath } from './util';\n\n/** 描边柱状图 */\nregisterShape('interval', 'hollow-rect', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const style = getStyle(cfg, true, false);\n    let group = container;\n    const backgroundCfg = cfg?.background;\n    if (backgroundCfg) {\n      group = container.addGroup();\n      const backgroundStyle = getBackgroundRectStyle(cfg);\n      const backgroundPath = getBackgroundRectPath(cfg, this.parsePoints(cfg.points) as Point[], this.coordinate);\n      group.addShape('path', {\n        attrs: {\n          ...backgroundStyle,\n          path: backgroundPath,\n        },\n        zIndex: -1,\n        name: BACKGROUND_SHAPE,\n      });\n    }\n\n    const path = this.parsePath(getRectPath(cfg.points as Point[]));\n    const shape = group.addShape('path', {\n      attrs: {\n        ...style,\n        path,\n      },\n      name: 'interval',\n    });\n\n    return backgroundCfg ? group : shape;\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color, isInPolar } = markerCfg;\n    if (isInPolar) {\n      return {\n        symbol: 'circle',\n        style: {\n          r: 4.5,\n          stroke: color,\n          fill: null,\n        },\n      };\n    }\n\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        stroke: color,\n        fill: null,\n      },\n    };\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}