{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport Action from '../base';\nimport { getDelegationObject, getScaleByField, isList, isSlider } from '../util';\n/**\n * 数据过滤。\n * @ignore\n */\n\nvar DataFilter =\n/** @class */\nfunction (_super) {\n  __extends(DataFilter, _super);\n\n  function DataFilter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DataFilter.prototype.filterView = function (view, field, filter) {\n    var _this = this; // 只有存在这个 scale 时才生效\n\n\n    if (view.getScaleByField(field)) {\n      view.filter(field, filter);\n    }\n\n    if (view.views && view.views.length) {\n      each(view.views, function (subView) {\n        _this.filterView(subView, field, filter);\n      });\n    }\n  };\n  /**\n   * 过滤数据\n   */\n\n\n  DataFilter.prototype.filter = function () {\n    var delegateObject = getDelegationObject(this.context);\n\n    if (delegateObject) {\n      var view = this.context.view;\n      var component = delegateObject.component;\n      var field = component.get('field'); // 列表类的组件能够触发\n\n      if (isList(delegateObject)) {\n        if (field) {\n          var unCheckedItems = component.getItemsByState('unchecked');\n          var scale_1 = getScaleByField(view, field);\n          var names_1 = unCheckedItems.map(function (item) {\n            return item.name;\n          });\n\n          if (names_1.length) {\n            this.filterView(view, field, function (value) {\n              var text = scale_1.getText(value);\n              return !names_1.includes(text);\n            });\n          } else {\n            this.filterView(view, field, null);\n          }\n\n          view.render(true);\n        }\n      } else if (isSlider(delegateObject)) {\n        var range = component.getValue();\n        var min_1 = range[0],\n            max_1 = range[1];\n        this.filterView(view, field, function (value) {\n          return value >= min_1 && value <= max_1;\n        });\n        view.render(true);\n      }\n    }\n  };\n\n  return DataFilter;\n}(Action);\n\nexport default DataFilter;","map":{"version":3,"sources":["../../../../src/interaction/action/data/filter.ts"],"names":[],"mappings":";AAAA,SAAS,IAAT,QAAqB,YAArB;AAEA,OAAO,MAAP,MAAmB,SAAnB;AACA,SAAS,mBAAT,EAA8B,eAA9B,EAA+C,MAA/C,EAAuD,QAAvD,QAAuE,SAAvE;AAEA;;;AAGG;;AACH,IAAA,UAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyB,EAAA,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;;AAAzB,WAAA,UAAA,GAAA;;AA+CC;;AA9CS,EAAA,UAAA,CAAA,SAAA,CAAA,UAAA,GAAR,UAAmB,IAAnB,EAA+B,KAA/B,EAAsC,MAAtC,EAA4C;AAA5C,QAAA,KAAA,GAAA,IAAA,CAA4C,CAC1C;;;AACA,QAAI,IAAI,CAAC,eAAL,CAAqB,KAArB,CAAJ,EAAiC;AAC/B,MAAA,IAAI,CAAC,MAAL,CAAY,KAAZ,EAAmB,MAAnB;AACD;;AACD,QAAI,IAAI,CAAC,KAAL,IAAc,IAAI,CAAC,KAAL,CAAW,MAA7B,EAAqC;AACnC,MAAA,IAAI,CAAC,IAAI,CAAC,KAAN,EAAa,UAAC,OAAD,EAAQ;AACvB,QAAA,KAAI,CAAC,UAAL,CAAgB,OAAhB,EAAyB,KAAzB,EAAgC,MAAhC;AACD,OAFG,CAAJ;AAGD;AACF,GAVO;AAWR;;AAEG;;;AACI,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACE,QAAM,cAAc,GAAG,mBAAmB,CAAC,KAAK,OAAN,CAA1C;;AACA,QAAI,cAAJ,EAAoB;AAClB,UAAM,IAAI,GAAG,KAAK,OAAL,CAAa,IAA1B;AACQ,UAAA,SAAS,GAAK,cAAc,CAAnB,SAAT;AACR,UAAM,KAAK,GAAG,SAAS,CAAC,GAAV,CAAc,OAAd,CAAd,CAHkB,CAIlB;;AACA,UAAI,MAAM,CAAC,cAAD,CAAV,EAA4B;AAC1B,YAAI,KAAJ,EAAW;AACT,cAAM,cAAc,GAAG,SAAS,CAAC,eAAV,CAA0B,WAA1B,CAAvB;AACA,cAAM,OAAK,GAAG,eAAe,CAAC,IAAD,EAAO,KAAP,CAA7B;AACA,cAAM,OAAK,GAAa,cAAc,CAAC,GAAf,CAAmB,UAAC,IAAD,EAAK;AAAK,mBAAA,IAAI,CAAJ,IAAA;AAAS,WAAtC,CAAxB;;AACA,cAAI,OAAK,CAAC,MAAV,EAAkB;AAChB,iBAAK,UAAL,CAAgB,IAAhB,EAAsB,KAAtB,EAA6B,UAAC,KAAD,EAAM;AACjC,kBAAM,IAAI,GAAG,OAAK,CAAC,OAAN,CAAc,KAAd,CAAb;AACA,qBAAO,CAAC,OAAK,CAAC,QAAN,CAAe,IAAf,CAAR;AACD,aAHD;AAID,WALD,MAKO;AACL,iBAAK,UAAL,CAAgB,IAAhB,EAAsB,KAAtB,EAA6B,IAA7B;AACD;;AACD,UAAA,IAAI,CAAC,MAAL,CAAY,IAAZ;AACD;AACF,OAfD,MAeO,IAAI,QAAQ,CAAC,cAAD,CAAZ,EAA8B;AACnC,YAAM,KAAK,GAAG,SAAS,CAAC,QAAV,EAAd;AACO,YAAA,KAAG,GAAS,KAAK,CAAd,CAAc,CAAjB;AAAA,YAAK,KAAG,GAAI,KAAK,CAAT,CAAS,CAAjB;AACP,aAAK,UAAL,CAAgB,IAAhB,EAAsB,KAAtB,EAA6B,UAAC,KAAD,EAAM;AACjC,iBAAO,KAAK,IAAI,KAAT,IAAgB,KAAK,IAAI,KAAhC;AACD,SAFD;AAGA,QAAA,IAAI,CAAC,MAAL,CAAY,IAAZ;AACD;AACF;AACF,GA/BM;;AAgCT,SAAA,UAAA;AAAC,CA/CD,CAAyB,MAAzB,CAAA;;AAiDA,eAAe,UAAf","sourcesContent":["import { each } from '@antv/util';\nimport { View } from 'src/chart';\nimport Action from '../base';\nimport { getDelegationObject, getScaleByField, isList, isSlider } from '../util';\n\n/**\n * 数据过滤。\n * @ignore\n */\nclass DataFilter extends Action {\n  private filterView(view: View, field, filter) {\n    // 只有存在这个 scale 时才生效\n    if (view.getScaleByField(field)) {\n      view.filter(field, filter);\n    }\n    if (view.views && view.views.length) {\n      each(view.views, (subView) => {\n        this.filterView(subView, field, filter);\n      });\n    }\n  }\n  /**\n   * 过滤数据\n   */\n  public filter() {\n    const delegateObject = getDelegationObject(this.context);\n    if (delegateObject) {\n      const view = this.context.view;\n      const { component } = delegateObject;\n      const field = component.get('field');\n      // 列表类的组件能够触发\n      if (isList(delegateObject)) {\n        if (field) {\n          const unCheckedItems = component.getItemsByState('unchecked');\n          const scale = getScaleByField(view, field);\n          const names: string[] = unCheckedItems.map((item) => item.name);\n          if (names.length) {\n            this.filterView(view, field, (value) => {\n              const text = scale.getText(value);\n              return !names.includes(text);\n            });\n          } else {\n            this.filterView(view, field, null);\n          }\n          view.render(true);\n        }\n      } else if (isSlider(delegateObject)) {\n        const range = component.getValue();\n        const [min, max] = range;\n        this.filterView(view, field, (value) => {\n          return value >= min && value <= max;\n        });\n        view.render(true);\n      }\n    }\n  }\n}\n\nexport default DataFilter;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}