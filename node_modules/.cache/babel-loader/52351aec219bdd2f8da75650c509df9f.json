{"ast":null,"code":"import { clone, isPlainObject, lowerCase, mix } from '@antv/util';\nimport GrammarInteraction from './grammar-interaction';\nvar Interactions = {};\n/**\n * 根据交互行为名字获取对应的交互类\n * @param name 交互名字\n * @returns 交互类\n */\n\nexport function getInteraction(name) {\n  return Interactions[lowerCase(name)];\n}\n/**\n * 注册交互行为\n * @param name 交互行为名字\n * @param interaction 交互类\n */\n\nexport function registerInteraction(name, interaction) {\n  Interactions[lowerCase(name)] = interaction;\n}\n/**\n * 创建交互实例\n * @param name 交互名\n * @param view 交互应用的 View 实例\n * @param cfg 交互行为配置\n */\n\nexport function createInteraction(name, view, cfg) {\n  var interaciton = getInteraction(name);\n\n  if (!interaciton) {\n    return null;\n  }\n\n  if (isPlainObject(interaciton)) {\n    // 如果不 clone 则会多个 interaction 实例共享 step 的定义\n    var steps = mix(clone(interaciton), cfg);\n    return new GrammarInteraction(view, steps);\n  } else {\n    var cls = interaciton;\n    return new cls(view, cfg);\n  }\n}\nexport { default as Interaction } from './interaction';\nexport { Action, registerAction, getActionClass } from './action';","map":{"version":3,"sources":["../../src/interaction/index.ts"],"names":[],"mappings":"AAAA,SAAS,KAAT,EAAgB,aAAhB,EAA+B,SAA/B,EAA0C,GAA1C,QAAqD,YAArD;AAGA,OAAO,kBAAP,MAAqD,uBAArD;AAGA,IAAM,YAAY,GAAgB,EAAlC;AAEA;;;;AAIG;;AACH,OAAM,SAAU,cAAV,CAAyB,IAAzB,EAAqC;AACzC,SAAO,YAAY,CAAC,SAAS,CAAC,IAAD,CAAV,CAAnB;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,mBAAV,CAA8B,IAA9B,EAA4C,WAA5C,EAAkG;AACtG,EAAA,YAAY,CAAC,SAAS,CAAC,IAAD,CAAV,CAAZ,GAAgC,WAAhC;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAA0C,IAA1C,EAAsD,GAAtD,EAAuE;AAC3E,MAAM,WAAW,GAAG,cAAc,CAAC,IAAD,CAAlC;;AACA,MAAI,CAAC,WAAL,EAAkB;AAChB,WAAO,IAAP;AACD;;AACD,MAAI,aAAa,CAAC,WAAD,CAAjB,EAAgC;AAC9B;AACA,QAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,WAAD,CAAN,EAAqB,GAArB,CAAjB;AACA,WAAO,IAAI,kBAAJ,CAAuB,IAAvB,EAA6B,KAA7B,CAAP;AACD,GAJD,MAIO;AACL,QAAM,GAAG,GAAG,WAAZ;AACA,WAAO,IAAI,GAAJ,CAAQ,IAAR,EAAc,GAAd,CAAP;AACD;AACF;AAED,SAAS,OAAO,IAAI,WAApB,QAAuC,eAAvC;AACA,SAAS,MAAT,EAAiB,cAAjB,EAAiC,cAAjC,QAAuD,UAAvD","sourcesContent":["import { clone, isPlainObject, lowerCase, mix } from '@antv/util';\nimport { View } from '../chart';\nimport { LooseObject } from '../interface';\nimport GrammarInteraction, { InteractionSteps } from './grammar-interaction';\nimport { InteractionConstructor } from './interaction';\n\nconst Interactions: LooseObject = {};\n\n/**\n * 根据交互行为名字获取对应的交互类\n * @param name 交互名字\n * @returns 交互类\n */\nexport function getInteraction(name: string): InteractionSteps | InteractionConstructor {\n  return Interactions[lowerCase(name)];\n}\n\n/**\n * 注册交互行为\n * @param name 交互行为名字\n * @param interaction 交互类\n */\nexport function registerInteraction(name: string, interaction: InteractionSteps | InteractionConstructor) {\n  Interactions[lowerCase(name)] = interaction;\n}\n\n/**\n * 创建交互实例\n * @param name 交互名\n * @param view 交互应用的 View 实例\n * @param cfg 交互行为配置\n */\nexport function createInteraction(name: string, view: View, cfg?: LooseObject) {\n  const interaciton = getInteraction(name);\n  if (!interaciton) {\n    return null;\n  }\n  if (isPlainObject(interaciton)) {\n    // 如果不 clone 则会多个 interaction 实例共享 step 的定义\n    const steps = mix(clone(interaciton), cfg) as InteractionSteps;\n    return new GrammarInteraction(view, steps);\n  } else {\n    const cls = interaciton as InteractionConstructor;\n    return new cls(view, cfg);\n  }\n}\n\nexport { default as Interaction } from './interaction';\nexport { Action, registerAction, getActionClass } from './action';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}