{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { deepMix, each, filter, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { getAnglePoint, getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * 镜像分面\n */\n\nvar Circle =\n/** @class */\nfunction (_super) {\n  __extends(Circle, _super);\n\n  function Circle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Circle.prototype.getDefaultCfg = function () {\n    return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n      type: 'circle',\n      showTitle: true,\n      title: _super.prototype.getDefaultTitleCfg.call(this)\n    });\n  };\n\n  Circle.prototype.render = function () {\n    _super.prototype.render.call(this);\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  };\n  /**\n   * 根据总数和当前索引，计算分面的 region\n   * @param count\n   * @param index\n   */\n\n\n  Circle.prototype.getRegion = function (count, index) {\n    var r = 1 / 2; // 画布半径\n    // 画布圆心\n\n    var center = {\n      x: 0.5,\n      y: 0.5\n    }; // 每隔分面间隔的弧度\n\n    var avgAngle = Math.PI * 2 / count; // 当前分面所在的弧度\n\n    var angle = -1 * Math.PI / 2 + avgAngle * index; // TODO 没看懂\n\n    var facetR = r / (1 + 1 / Math.sin(avgAngle / 2)); // 分面的中心点\n\n    var middle = getAnglePoint(center, r - facetR, angle);\n    var startAngle = Math.PI * 5 / 4; // 右上角\n\n    var endAngle = Math.PI * 1 / 4; // 左下角\n\n    return {\n      start: getAnglePoint(middle, facetR, startAngle),\n      end: getAnglePoint(middle, facetR, endAngle)\n    };\n  };\n\n  Circle.prototype.afterEachView = function (view, facet) {\n    this.processAxis(view, facet);\n  };\n\n  Circle.prototype.beforeEachView = function (view, facet) {};\n\n  Circle.prototype.generateFacets = function (data) {\n    var _this = this;\n\n    var _a = this.cfg,\n        fields = _a.fields,\n        type = _a.type;\n    var field = fields[0];\n\n    if (!field) {\n      throw new Error('No `fields` specified!');\n    }\n\n    var values = this.getFieldValues(data, field);\n    var count = values.length;\n    var rst = [];\n    values.forEach(function (value, index) {\n      var conditions = [{\n        field: field,\n        value: value,\n        values: values\n      }];\n      var facetData = filter(data, _this.getFacetDataFilter(conditions));\n      var facet = {\n        type: type,\n        data: facetData,\n        region: _this.getRegion(count, index),\n        columnValue: value,\n        columnField: field,\n        columnIndex: index,\n        columnValuesLength: count,\n        rowValue: null,\n        rowField: null,\n        rowIndex: 0,\n        rowValuesLength: 1\n      };\n      rst.push(facet);\n    });\n    return rst;\n  };\n\n  Circle.prototype.getXAxisOption = function (x, axes, option, facet) {\n    // 不做任何处理\n    return option;\n  };\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n\n\n  Circle.prototype.getYAxisOption = function (y, axes, option, facet) {\n    // 不做任何处理\n    return option;\n  };\n  /**\n   * facet title\n   */\n\n\n  Circle.prototype.renderTitle = function () {\n    var _this = this;\n\n    each(this.facets, function (facet) {\n      var columnValue = facet.columnValue,\n          view = facet.view;\n      var formatter = get(_this.cfg.title, 'formatter');\n      var config = deepMix({\n        position: ['50%', '0%'],\n        content: formatter ? formatter(columnValue) : columnValue\n      }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.title);\n      view.annotation().text(config);\n    });\n  };\n\n  return Circle;\n}(Facet);\n\nexport default Circle;","map":{"version":3,"sources":["../../src/facet/circle.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, each, filter, get } from '@antv/util';\nimport { AxisCfg, CircleCfg, CircleData, Datum } from '../interface';\n\nimport View from '../chart/view';\nimport { DIRECTION } from '../constant';\nimport { getAnglePoint, getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * 镜像分面\n */\nexport default class Circle extends Facet<CircleCfg, CircleData> {\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'circle',\n      showTitle: true,\n      title: super.getDefaultTitleCfg(),\n    });\n  }\n\n  public render() {\n    super.render();\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  /**\n   * 根据总数和当前索引，计算分面的 region\n   * @param count\n   * @param index\n   */\n  protected getRegion(count: number, index: number) {\n    const r = 1 / 2; // 画布半径\n    // 画布圆心\n    const center = { x: 0.5, y: 0.5 };\n    // 每隔分面间隔的弧度\n    const avgAngle = (Math.PI * 2) / count;\n\n    // 当前分面所在的弧度\n    const angle = (-1 * Math.PI) / 2 + avgAngle * index;\n    // TODO 没看懂\n    const facetR = r / (1 + 1 / Math.sin(avgAngle / 2));\n    // 分面的中心点\n    const middle = getAnglePoint(center, r - facetR, angle);\n    const startAngle = (Math.PI * 5) / 4; // 右上角\n    const endAngle = (Math.PI * 1) / 4; // 左下角\n\n    return {\n      start: getAnglePoint(middle, facetR, startAngle),\n      end: getAnglePoint(middle, facetR, endAngle),\n    };\n  }\n\n  protected afterEachView(view: View, facet: CircleData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: CircleData) {}\n\n  protected generateFacets(data: Datum[]): CircleData[] {\n    const { fields, type } = this.cfg;\n    const [field] = fields;\n    if (!field) {\n      throw new Error('No `fields` specified!');\n    }\n\n    const values = this.getFieldValues(data, field);\n    const count = values.length;\n\n    const rst = [];\n    values.forEach((value: any, index: number) => {\n      const conditions = [{ field, value, values }];\n      const facetData = filter(data, this.getFacetDataFilter(conditions));\n\n      const facet: CircleData = {\n        type,\n        data: facetData,\n        region: this.getRegion(count, index),\n\n        columnValue: value,\n        columnField: field,\n        columnIndex: index,\n        columnValuesLength: count,\n\n        rowValue: null,\n        rowField: null,\n        rowIndex: 0,\n        rowValuesLength: 1,\n      };\n      rst.push(facet);\n    });\n    return rst;\n  }\n\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: CircleData): object {\n    // 不做任何处理\n    return option;\n  }\n\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: CircleData): object {\n    // 不做任何处理\n    return option;\n  }\n\n  /**\n   * facet title\n   */\n  private renderTitle() {\n    each(this.facets, (facet: CircleData) => {\n      const { columnValue, view } = facet;\n      const formatter = get(this.cfg.title, 'formatter');\n\n      const config = deepMix(\n        {\n          position: ['50%', '0%'] as [string, string],\n          content: formatter ? formatter(columnValue) : columnValue,\n        },\n        getFactTitleConfig(DIRECTION.TOP),\n        this.cfg.title\n      );\n\n      view.annotation().text(config);\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}