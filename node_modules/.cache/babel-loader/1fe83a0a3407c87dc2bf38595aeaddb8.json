{"ast":null,"code":"import { each, get } from '@antv/util';\nimport { getComponents, isInBox } from './action/util';\n/**\n * 交互的上下文\n */\n\nvar Context =\n/** @class */\nfunction () {\n  function Context(view) {\n    /** 当前所有的 Action */\n    this.actions = [];\n    /** 当前事件对象 */\n\n    this.event = null;\n    this.cacheMap = {};\n    this.view = view;\n  }\n  /**\n   * 缓存信息\n   * @param params 缓存的字段\n   *  - 如果一个字段则获取缓存\n   *  - 两个字段则设置缓存\n   */\n\n\n  Context.prototype.cache = function () {\n    var params = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      params[_i] = arguments[_i];\n    }\n\n    if (params.length === 1) {\n      return this.cacheMap[params[0]];\n    } else if (params.length === 2) {\n      this.cacheMap[params[0]] = params[1];\n    }\n  };\n  /**\n   * 获取 Action\n   * @param name Action 的名称\n   */\n\n\n  Context.prototype.getAction = function (name) {\n    return this.actions.find(function (action) {\n      return action.name === name;\n    });\n  };\n  /**\n   * 获取 Action\n   * @param action Action 对象\n   */\n\n\n  Context.prototype.addAction = function (action) {\n    this.actions.push(action);\n  };\n  /**\n   * 移除 Action\n   * @param action Action 对象\n   */\n\n\n  Context.prototype.removeAction = function (action) {\n    var actions = this.actions;\n    var index = this.actions.indexOf(action);\n\n    if (index >= 0) {\n      actions.splice(index, 1);\n    }\n  };\n  /**\n   * 获取当前的点\n   */\n\n\n  Context.prototype.getCurrentPoint = function () {\n    var event = this.event;\n\n    if (event) {\n      if (event.target instanceof HTMLElement) {\n        var canvas = this.view.getCanvas();\n        var point = canvas.getPointByClient(event.clientX, event.clientY);\n        return point;\n      } else {\n        return {\n          x: event.x,\n          y: event.y\n        };\n      }\n    }\n\n    return null;\n  };\n  /**\n   * 获取当前 shape\n   * @returns current shape\n   */\n\n\n  Context.prototype.getCurrentShape = function () {\n    return get(this.event, ['gEvent', 'shape']);\n  };\n  /**\n   * 当前的触发是否在 View 内\n   */\n\n\n  Context.prototype.isInPlot = function () {\n    var point = this.getCurrentPoint();\n\n    if (point) {\n      return this.view.isPointInPlot(point);\n    }\n\n    return false;\n  };\n  /**\n   * 是否在指定的图形内\n   * @param name shape 的 name\n   */\n\n\n  Context.prototype.isInShape = function (name) {\n    var shape = this.getCurrentShape(); // 不再考虑在 shape 的 parent 内的情况\n\n    if (shape) {\n      return shape.get('name') === name;\n    }\n\n    return false;\n  };\n  /**\n   * 当前的触发是组件内部\n   * @param name 组件名，可以为空\n   */\n\n\n  Context.prototype.isInComponent = function (name) {\n    var components = getComponents(this.view);\n    var point = this.getCurrentPoint();\n\n    if (point) {\n      return !!components.find(function (component) {\n        var bbox = component.getBBox();\n\n        if (name) {\n          return component.get('name') === name && isInBox(bbox, point);\n        } else {\n          return isInBox(bbox, point);\n        }\n      });\n    }\n\n    return false;\n  };\n  /**\n   * 销毁\n   */\n\n\n  Context.prototype.destroy = function () {\n    this.view = null;\n    this.event = null; // 先销毁 action 再清空，一边遍历，一边删除，所以数组需要更新引用\n\n    each(this.actions.slice(), function (action) {\n      action.destroy();\n    });\n    this.actions = null;\n    this.cacheMap = null;\n  };\n\n  return Context;\n}();\n\nexport default Context;","map":{"version":3,"sources":["../../src/interaction/context.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, get } from '@antv/util';\nimport { View } from '../chart';\nimport { BBox, IShape, Point } from '../dependents';\nimport { IAction, IInteractionContext, LooseObject } from '../interface';\nimport { getComponents, isInBox } from './action/util';\n\n/**\n * 交互的上下文\n */\nexport default class Context implements IInteractionContext {\n  /** 当前所有的 Action */\n  public actions: IAction[] = [];\n  /** 当前 View 实例 */\n  public view: View;\n  /** 当前事件对象 */\n  public event: LooseObject = null;\n\n  private cacheMap: LooseObject = {};\n\n  constructor(view: View) {\n    this.view = view;\n  }\n\n  /**\n   * 缓存信息\n   * @param params 缓存的字段\n   *  - 如果一个字段则获取缓存\n   *  - 两个字段则设置缓存\n   */\n  public cache(...params) {\n    if (params.length === 1) {\n      return this.cacheMap[params[0]];\n    } else if (params.length === 2) {\n      this.cacheMap[params[0]] = params[1];\n    }\n  }\n\n  /**\n   * 获取 Action\n   * @param name Action 的名称\n   */\n  public getAction(name: string): IAction {\n    return this.actions.find((action) => action.name === name);\n  }\n\n  /**\n   * 获取 Action\n   * @param action Action 对象\n   */\n  public addAction(action: IAction) {\n    this.actions.push(action);\n  }\n\n  /**\n   * 移除 Action\n   * @param action Action 对象\n   */\n  public removeAction(action: IAction) {\n    const actions = this.actions;\n    const index = this.actions.indexOf(action);\n    if (index >= 0) {\n      actions.splice(index, 1);\n    }\n  }\n\n  /**\n   * 获取当前的点\n   */\n  public getCurrentPoint(): Point {\n    const event = this.event;\n    if (event) {\n      if (event.target instanceof HTMLElement) {\n        const canvas = this.view.getCanvas();\n        const point = canvas.getPointByClient(event.clientX, event.clientY);\n        return point;\n      } else {\n        return {\n          x: event.x,\n          y: event.y,\n        };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * 获取当前 shape\n   * @returns current shape\n   */\n  public getCurrentShape(): IShape {\n    return get(this.event, ['gEvent', 'shape']);\n  }\n\n  /**\n   * 当前的触发是否在 View 内\n   */\n  public isInPlot() {\n    const point = this.getCurrentPoint();\n    if (point) {\n      return this.view.isPointInPlot(point);\n    }\n    return false;\n  }\n\n  /**\n   * 是否在指定的图形内\n   * @param name shape 的 name\n   */\n  public isInShape(name) {\n    const shape = this.getCurrentShape(); // 不再考虑在 shape 的 parent 内的情况\n    if (shape) {\n      return shape.get('name') === name;\n    }\n    return false;\n  }\n\n  /**\n   * 当前的触发是组件内部\n   * @param name 组件名，可以为空\n   */\n  public isInComponent(name?: string) {\n    const components = getComponents(this.view);\n    const point = this.getCurrentPoint();\n    if (point) {\n      return !!components.find((component) => {\n        const bbox = component.getBBox() as BBox;\n        if (name) {\n          return component.get('name') === name && isInBox(bbox, point);\n        } else {\n          return isInBox(bbox, point);\n        }\n      });\n    }\n    return false;\n  }\n\n  /**\n   * 销毁\n   */\n  public destroy() {\n    this.view = null;\n    this.event = null;\n    // 先销毁 action 再清空，一边遍历，一边删除，所以数组需要更新引用\n    each(this.actions.slice(), (action) => {\n      action.destroy();\n    });\n    this.actions = null;\n    this.cacheMap = null;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}