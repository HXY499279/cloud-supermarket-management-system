{"ast":null,"code":"import isPointInPolygon from './point-in-polygon';\nimport getLineIntersect from './get-line-intersect';\nimport { each } from '@antv/util';\n\nfunction parseToLines(points) {\n  var lines = [];\n  var count = points.length;\n\n  for (var i = 0; i < count - 1; i++) {\n    var point = points[i];\n    var next = points[i + 1];\n    lines.push({\n      from: {\n        x: point[0],\n        y: point[1]\n      },\n      to: {\n        x: next[0],\n        y: next[1]\n      }\n    });\n  }\n\n  if (lines.length > 1) {\n    var first = points[0];\n    var last = points[count - 1];\n    lines.push({\n      from: {\n        x: last[0],\n        y: last[1]\n      },\n      to: {\n        x: first[0],\n        y: first[1]\n      }\n    });\n  }\n\n  return lines;\n}\n\nfunction lineIntersectPolygon(lines, line) {\n  var isIntersect = false;\n  each(lines, function (l) {\n    if (getLineIntersect(l.from, l.to, line.from, line.to)) {\n      isIntersect = true;\n      return false;\n    }\n  });\n  return isIntersect;\n}\n\nfunction getBBox(points) {\n  var xArr = points.map(function (p) {\n    return p[0];\n  });\n  var yArr = points.map(function (p) {\n    return p[1];\n  });\n  return {\n    minX: Math.min.apply(null, xArr),\n    maxX: Math.max.apply(null, xArr),\n    minY: Math.min.apply(null, yArr),\n    maxY: Math.max.apply(null, yArr)\n  };\n}\n\nfunction intersectBBox(box1, box2) {\n  return !(box2.minX > box1.maxX || box2.maxX < box1.minX || box2.minY > box1.maxY || box2.maxY < box1.minY);\n}\n\nexport default function isPolygonsIntersect(points1, points2) {\n  // 空数组，或者一个点返回 false\n  if (points1.length < 2 || points2.length < 2) {\n    return false;\n  }\n\n  var bbox1 = getBBox(points1);\n  var bbox2 = getBBox(points2); // 判定包围盒是否相交，比判定点是否在多边形内要快的多，可以筛选掉大多数情况\n\n  if (!intersectBBox(bbox1, bbox2)) {\n    return false;\n  }\n\n  var isIn = false; // 判定点是否在多边形内部，一旦有一个点在另一个多边形内，则返回\n\n  each(points2, function (point) {\n    if (isPointInPolygon(points1, point[0], point[1])) {\n      isIn = true;\n      return false;\n    }\n  });\n\n  if (isIn) {\n    return true;\n  } // 两个多边形都需要判定\n\n\n  each(points1, function (point) {\n    if (isPointInPolygon(points2, point[0], point[1])) {\n      isIn = true;\n      return false;\n    }\n  });\n\n  if (isIn) {\n    return true;\n  }\n\n  var lines1 = parseToLines(points1);\n  var lines2 = parseToLines(points2);\n  var isIntersect = false;\n  each(lines2, function (line) {\n    if (lineIntersectPolygon(lines1, line)) {\n      isIntersect = true;\n      return false;\n    }\n  });\n  return isIntersect;\n}","map":{"version":3,"sources":["../src/is-polygons-intersect.ts"],"names":[],"mappings":"AACA,OAAO,gBAAP,MAA6B,oBAA7B;AACA,OAAO,gBAAP,MAA6B,sBAA7B;AACA,SAAQ,IAAR,QAAmB,YAAnB;;AAEA,SAAS,YAAT,CAAsB,MAAtB,EAA4B;AAC1B,MAAM,KAAK,GAAG,EAAd;AACA,MAAM,KAAK,GAAG,MAAM,CAAC,MAArB;;AACA,OAAI,IAAI,CAAC,GAAG,CAAZ,EAAe,CAAC,GAAG,KAAK,GAAG,CAA3B,EAA8B,CAAC,EAA/B,EAAmC;AACjC,QAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAApB;AACA,QAAM,IAAI,GAAG,MAAM,CAAC,CAAC,GAAG,CAAL,CAAnB;AACA,IAAA,KAAK,CAAC,IAAN,CAAW;AACT,MAAA,IAAI,EAAE;AACJ,QAAA,CAAC,EAAE,KAAK,CAAC,CAAD,CADJ;AAEJ,QAAA,CAAC,EAAE,KAAK,CAAC,CAAD;AAFJ,OADG;AAKT,MAAA,EAAE,EAAE;AACF,QAAA,CAAC,EAAE,IAAI,CAAC,CAAD,CADL;AAEF,QAAA,CAAC,EAAE,IAAI,CAAC,CAAD;AAFL;AALK,KAAX;AAUD;;AACD,MAAI,KAAK,CAAC,MAAN,GAAe,CAAnB,EAAsB;AACpB,QAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAApB;AACA,QAAM,IAAI,GAAG,MAAM,CAAC,KAAK,GAAG,CAAT,CAAnB;AACA,IAAA,KAAK,CAAC,IAAN,CAAW;AACT,MAAA,IAAI,EAAE;AACJ,QAAA,CAAC,EAAE,IAAI,CAAC,CAAD,CADH;AAEJ,QAAA,CAAC,EAAE,IAAI,CAAC,CAAD;AAFH,OADG;AAKT,MAAA,EAAE,EAAE;AACF,QAAA,CAAC,EAAE,KAAK,CAAC,CAAD,CADN;AAEF,QAAA,CAAC,EAAE,KAAK,CAAC,CAAD;AAFN;AALK,KAAX;AAUD;;AACD,SAAO,KAAP;AACD;;AAED,SAAS,oBAAT,CAA8B,KAA9B,EAAqC,IAArC,EAAyC;AACvC,MAAI,WAAW,GAAG,KAAlB;AACA,EAAA,IAAI,CAAC,KAAD,EAAQ,UAAA,CAAA,EAAC;AACX,QAAI,gBAAgB,CAAC,CAAC,CAAC,IAAH,EAAS,CAAC,CAAC,EAAX,EAAe,IAAI,CAAC,IAApB,EAA0B,IAAI,CAAC,EAA/B,CAApB,EAAwD;AACtD,MAAA,WAAW,GAAG,IAAd;AACA,aAAO,KAAP;AACD;AACF,GALG,CAAJ;AAMA,SAAO,WAAP;AACD;;AASD,SAAS,OAAT,CAAiB,MAAjB,EAAuB;AACrB,MAAM,IAAI,GAAG,MAAM,CAAC,GAAP,CAAW,UAAA,CAAA,EAAC;AAAI,WAAA,CAAC,CAAD,CAAC,CAAD;AAAI,GAApB,CAAb;AACA,MAAM,IAAI,GAAG,MAAM,CAAC,GAAP,CAAW,UAAA,CAAA,EAAC;AAAI,WAAA,CAAC,CAAD,CAAC,CAAD;AAAI,GAApB,CAAb;AACA,SAAO;AACL,IAAA,IAAI,EAAE,IAAI,CAAC,GAAL,CAAS,KAAT,CAAe,IAAf,EAAqB,IAArB,CADD;AAEL,IAAA,IAAI,EAAE,IAAI,CAAC,GAAL,CAAS,KAAT,CAAe,IAAf,EAAqB,IAArB,CAFD;AAGL,IAAA,IAAI,EAAE,IAAI,CAAC,GAAL,CAAS,KAAT,CAAe,IAAf,EAAqB,IAArB,CAHD;AAIL,IAAA,IAAI,EAAE,IAAI,CAAC,GAAL,CAAS,KAAT,CAAe,IAAf,EAAqB,IAArB;AAJD,GAAP;AAMD;;AAED,SAAS,aAAT,CAAuB,IAAvB,EAAkC,IAAlC,EAA2C;AACzC,SAAO,EAAE,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAAjB,IAAyB,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAA1C,IAAkD,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAAnE,IAA2E,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAA9F,CAAP;AACD;;AAED,eAAc,SAAU,mBAAV,CAA8B,OAA9B,EAAuC,OAAvC,EAA8C;AAC1D;AACA,MAAI,OAAO,CAAC,MAAR,GAAiB,CAAjB,IAAsB,OAAO,CAAC,MAAR,GAAiB,CAA3C,EAA8C;AAC5C,WAAO,KAAP;AACD;;AAED,MAAM,KAAK,GAAG,OAAO,CAAC,OAAD,CAArB;AACA,MAAM,KAAK,GAAG,OAAO,CAAC,OAAD,CAArB,CAP0D,CAQ1D;;AACA,MAAI,CAAC,aAAa,CAAC,KAAD,EAAQ,KAAR,CAAlB,EAAkC;AAChC,WAAO,KAAP;AACD;;AAED,MAAI,IAAI,GAAG,KAAX,CAb0D,CAc1D;;AACA,EAAA,IAAI,CAAC,OAAD,EAAU,UAAA,KAAA,EAAK;AACjB,QAAI,gBAAgB,CAAC,OAAD,EAAU,KAAK,CAAC,CAAD,CAAf,EAAoB,KAAK,CAAC,CAAD,CAAzB,CAApB,EAAmD;AACjD,MAAA,IAAI,GAAG,IAAP;AACA,aAAO,KAAP;AACD;AACF,GALG,CAAJ;;AAMA,MAAI,IAAJ,EAAU;AACR,WAAO,IAAP;AACD,GAvByD,CAwB1D;;;AACA,EAAA,IAAI,CAAC,OAAD,EAAU,UAAA,KAAA,EAAK;AACjB,QAAI,gBAAgB,CAAC,OAAD,EAAU,KAAK,CAAC,CAAD,CAAf,EAAoB,KAAK,CAAC,CAAD,CAAzB,CAApB,EAAmD;AACjD,MAAA,IAAI,GAAG,IAAP;AACA,aAAO,KAAP;AACD;AACF,GALG,CAAJ;;AAMA,MAAI,IAAJ,EAAU;AACR,WAAO,IAAP;AACD;;AAED,MAAM,MAAM,GAAG,YAAY,CAAC,OAAD,CAA3B;AACA,MAAM,MAAM,GAAG,YAAY,CAAC,OAAD,CAA3B;AACA,MAAI,WAAW,GAAG,KAAlB;AACA,EAAA,IAAI,CAAC,MAAD,EAAS,UAAA,IAAA,EAAI;AACf,QAAI,oBAAoB,CAAC,MAAD,EAAS,IAAT,CAAxB,EAAwC;AACtC,MAAA,WAAW,GAAG,IAAd;AACA,aAAO,KAAP;AACD;AACF,GALG,CAAJ;AAMA,SAAO,WAAP;AACD","sourceRoot":"","sourcesContent":["import isPointInPolygon from './point-in-polygon';\nimport getLineIntersect from './get-line-intersect';\nimport { each } from '@antv/util';\nfunction parseToLines(points) {\n    var lines = [];\n    var count = points.length;\n    for (var i = 0; i < count - 1; i++) {\n        var point = points[i];\n        var next = points[i + 1];\n        lines.push({\n            from: {\n                x: point[0],\n                y: point[1]\n            },\n            to: {\n                x: next[0],\n                y: next[1]\n            }\n        });\n    }\n    if (lines.length > 1) {\n        var first = points[0];\n        var last = points[count - 1];\n        lines.push({\n            from: {\n                x: last[0],\n                y: last[1]\n            },\n            to: {\n                x: first[0],\n                y: first[1]\n            }\n        });\n    }\n    return lines;\n}\nfunction lineIntersectPolygon(lines, line) {\n    var isIntersect = false;\n    each(lines, function (l) {\n        if (getLineIntersect(l.from, l.to, line.from, line.to)) {\n            isIntersect = true;\n            return false;\n        }\n    });\n    return isIntersect;\n}\nfunction getBBox(points) {\n    var xArr = points.map(function (p) { return p[0]; });\n    var yArr = points.map(function (p) { return p[1]; });\n    return {\n        minX: Math.min.apply(null, xArr),\n        maxX: Math.max.apply(null, xArr),\n        minY: Math.min.apply(null, yArr),\n        maxY: Math.max.apply(null, yArr)\n    };\n}\nfunction intersectBBox(box1, box2) {\n    return !(box2.minX > box1.maxX || box2.maxX < box1.minX || box2.minY > box1.maxY || box2.maxY < box1.minY);\n}\nexport default function isPolygonsIntersect(points1, points2) {\n    // 空数组，或者一个点返回 false\n    if (points1.length < 2 || points2.length < 2) {\n        return false;\n    }\n    var bbox1 = getBBox(points1);\n    var bbox2 = getBBox(points2);\n    // 判定包围盒是否相交，比判定点是否在多边形内要快的多，可以筛选掉大多数情况\n    if (!intersectBBox(bbox1, bbox2)) {\n        return false;\n    }\n    var isIn = false;\n    // 判定点是否在多边形内部，一旦有一个点在另一个多边形内，则返回\n    each(points2, function (point) {\n        if (isPointInPolygon(points1, point[0], point[1])) {\n            isIn = true;\n            return false;\n        }\n    });\n    if (isIn) {\n        return true;\n    }\n    // 两个多边形都需要判定\n    each(points1, function (point) {\n        if (isPointInPolygon(points2, point[0], point[1])) {\n            isIn = true;\n            return false;\n        }\n    });\n    if (isIn) {\n        return true;\n    }\n    var lines1 = parseToLines(points1);\n    var lines2 = parseToLines(points2);\n    var isIntersect = false;\n    each(lines2, function (line) {\n        if (lineIntersectPolygon(lines1, line)) {\n            isIntersect = true;\n            return false;\n        }\n    });\n    return isIntersect;\n}\n//# sourceMappingURL=is-polygons-intersect.js.map"]},"metadata":{},"sourceType":"module"}