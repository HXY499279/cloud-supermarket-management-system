{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * 镜像分面\n */\n\nvar Matrix =\n/** @class */\nfunction (_super) {\n  __extends(Matrix, _super);\n\n  function Matrix() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Matrix.prototype.getDefaultCfg = function () {\n    return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n      type: 'matrix',\n      showTitle: false,\n      columnTitle: __assign({}, _super.prototype.getDefaultTitleCfg.call(this)),\n      rowTitle: __assign({}, _super.prototype.getDefaultTitleCfg.call(this))\n    });\n  };\n\n  Matrix.prototype.render = function () {\n    _super.prototype.render.call(this);\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  };\n\n  Matrix.prototype.afterEachView = function (view, facet) {\n    this.processAxis(view, facet);\n  };\n\n  Matrix.prototype.beforeEachView = function (view, facet) {};\n\n  Matrix.prototype.generateFacets = function (data) {\n    var _a = this.cfg,\n        fields = _a.fields,\n        type = _a.type; // 矩阵中行列相等，等于指定的字段个数\n\n    var rowValuesLength = fields.length;\n    var columnValuesLength = rowValuesLength;\n    var rst = [];\n\n    for (var i = 0; i < columnValuesLength; i++) {\n      var columnField = fields[i];\n\n      for (var j = 0; j < rowValuesLength; j++) {\n        var rowField = fields[j];\n        var facet = {\n          type: type,\n          data: data,\n          region: this.getRegion(rowValuesLength, columnValuesLength, i, j),\n          columnValue: columnField,\n          rowValue: rowField,\n          columnField: columnField,\n          rowField: rowField,\n          columnIndex: i,\n          rowIndex: j,\n          columnValuesLength: columnValuesLength,\n          rowValuesLength: rowValuesLength\n        };\n        rst.push(facet);\n      }\n    }\n\n    return rst;\n  };\n  /**\n   * 设置 x 坐标轴的文本、title 是否显示\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n\n\n  Matrix.prototype.getXAxisOption = function (x, axes, option, facet) {\n    // 最后一行显示\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return __assign(__assign({}, option), {\n        label: null,\n        title: null\n      });\n    }\n\n    return option;\n  };\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n\n\n  Matrix.prototype.getYAxisOption = function (y, axes, option, facet) {\n    // 第一列显示\n    if (facet.columnIndex !== 0) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    }\n\n    return option;\n  };\n  /**\n   * facet title\n   */\n\n\n  Matrix.prototype.renderTitle = function () {\n    var _this = this;\n\n    each(this.facets, function (facet, facetIndex) {\n      var columnIndex = facet.columnIndex,\n          rowIndex = facet.rowIndex,\n          columnValuesLength = facet.columnValuesLength,\n          rowValuesLength = facet.rowValuesLength,\n          columnValue = facet.columnValue,\n          rowValue = facet.rowValue,\n          view = facet.view; // top\n\n      if (rowIndex === 0) {\n        var formatter = get(_this.cfg.columnTitle, 'formatter');\n        var config = deepMix({\n          position: ['50%', '0%'],\n          content: formatter ? formatter(columnValue) : columnValue\n        }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.columnTitle);\n        view.annotation().text(config);\n      } // right\n\n\n      if (columnIndex === columnValuesLength - 1) {\n        var formatter = get(_this.cfg.rowTitle, 'formatter');\n        var config = deepMix({\n          position: ['100%', '50%'],\n          content: formatter ? formatter(rowValue) : rowValue\n        }, getFactTitleConfig(DIRECTION.RIGHT), _this.cfg.rowTitle);\n        view.annotation().text(config);\n      }\n    });\n  };\n\n  return Matrix;\n}(Facet);\n\nexport default Matrix;","map":{"version":3,"sources":["../../src/facet/matrix.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, each, get } from '@antv/util';\nimport { DIRECTION } from '../constant';\nimport { AxisCfg, Datum, MatrixCfg, MatrixData } from '../interface';\n\nimport View from '../chart/view';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * 镜像分面\n */\nexport default class Matrix extends Facet<MatrixCfg, MatrixData> {\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'matrix',\n      showTitle: false,\n      columnTitle: {\n        ...super.getDefaultTitleCfg(),\n      },\n      rowTitle: {\n        ...super.getDefaultTitleCfg(),\n      },\n    });\n  }\n\n  public render() {\n    super.render();\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  protected afterEachView(view: View, facet: MatrixData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: MatrixData) {}\n\n  protected generateFacets(data: Datum[]): MatrixData[] {\n    const { fields, type } = this.cfg;\n\n    // 矩阵中行列相等，等于指定的字段个数\n    const rowValuesLength = fields.length;\n    const columnValuesLength = rowValuesLength;\n\n    const rst = [];\n    for (let i = 0; i < columnValuesLength; i++) {\n      const columnField = fields[i];\n      for (let j = 0; j < rowValuesLength; j++) {\n        const rowField = fields[j];\n\n        const facet: MatrixData = {\n          type,\n          data,\n          region: this.getRegion(rowValuesLength, columnValuesLength, i, j),\n\n          columnValue: columnField,\n          rowValue: rowField,\n          columnField,\n          rowField,\n          columnIndex: i,\n          rowIndex: j,\n          columnValuesLength,\n          rowValuesLength,\n        };\n        rst.push(facet);\n      }\n    }\n    return rst;\n  }\n\n  /**\n   * 设置 x 坐标轴的文本、title 是否显示\n   * @param x\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: MatrixData): object {\n    // 最后一行显示\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return {\n        ...option,\n        label: null,\n        title: null,\n      };\n    }\n    return option;\n  }\n\n  /**\n   * 设置 y 坐标轴的文本、title 是否显示\n   * @param y\n   * @param axes\n   * @param option\n   * @param facet\n   */\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: MatrixData): object {\n    // 第一列显示\n    if (facet.columnIndex !== 0) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n\n  /**\n   * facet title\n   */\n  private renderTitle() {\n    each(this.facets, (facet: MatrixData, facetIndex: number) => {\n      const { columnIndex, rowIndex, columnValuesLength, rowValuesLength, columnValue, rowValue, view } = facet;\n\n      // top\n      if (rowIndex === 0) {\n        const formatter = get(this.cfg.columnTitle, 'formatter');\n        const config = deepMix(\n          {\n            position: ['50%', '0%'] as [string, string],\n            content: formatter ? formatter(columnValue) : columnValue,\n          },\n          getFactTitleConfig(DIRECTION.TOP),\n          this.cfg.columnTitle\n        );\n\n        view.annotation().text(config);\n      }\n      // right\n      if (columnIndex === columnValuesLength - 1) {\n        const formatter = get(this.cfg.rowTitle, 'formatter');\n        const config = deepMix(\n          {\n            position: ['100%', '50%'] as [string, string],\n            content: formatter ? formatter(rowValue) : rowValue,\n          },\n          getFactTitleConfig(DIRECTION.RIGHT),\n          this.cfg.rowTitle\n        );\n\n        view.annotation().text(config);\n      }\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}