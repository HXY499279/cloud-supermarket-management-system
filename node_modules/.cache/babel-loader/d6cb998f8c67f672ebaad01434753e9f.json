{"ast":null,"code":"var isBetween = function (value, min, max) {\n  return value >= min && value <= max;\n};\n\nexport default function getLineIntersect(p0, p1, p2, p3) {\n  var tolerance = 0.001;\n  var E = {\n    x: p2.x - p0.x,\n    y: p2.y - p0.y\n  };\n  var D0 = {\n    x: p1.x - p0.x,\n    y: p1.y - p0.y\n  };\n  var D1 = {\n    x: p3.x - p2.x,\n    y: p3.y - p2.y\n  };\n  var kross = D0.x * D1.y - D0.y * D1.x;\n  var sqrKross = kross * kross;\n  var sqrLen0 = D0.x * D0.x + D0.y * D0.y;\n  var sqrLen1 = D1.x * D1.x + D1.y * D1.y;\n  var point = null;\n\n  if (sqrKross > tolerance * sqrLen0 * sqrLen1) {\n    var s = (E.x * D1.y - E.y * D1.x) / kross;\n    var t = (E.x * D0.y - E.y * D0.x) / kross;\n\n    if (isBetween(s, 0, 1) && isBetween(t, 0, 1)) {\n      point = {\n        x: p0.x + s * D0.x,\n        y: p0.y + s * D0.y\n      };\n    }\n  }\n\n  return point;\n}\n;","map":{"version":3,"sources":["../src/get-line-intersect.ts"],"names":[],"mappings":"AAaA,IAAM,SAAS,GAAG,UAAC,KAAD,EAAgB,GAAhB,EAA6B,GAA7B,EAAwC;AAAK,SAAA,KAAK,IAAI,GAAT,IAAgB,KAAK,IAArB,GAAA;AAA4B,CAA3F;;AAGA,eAAc,SAAU,gBAAV,CAA2B,EAA3B,EAAsC,EAAtC,EAAiD,EAAjD,EAA4D,EAA5D,EAAqE;AACjF,MAAM,SAAS,GAAG,KAAlB;AACA,MAAM,CAAC,GAAU;AACf,IAAA,CAAC,EAAE,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CADE;AAEf,IAAA,CAAC,EAAE,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC;AAFE,GAAjB;AAIA,MAAM,EAAE,GAAU;AAChB,IAAA,CAAC,EAAE,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CADG;AAEhB,IAAA,CAAC,EAAE,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC;AAFG,GAAlB;AAIA,MAAM,EAAE,GAAU;AAChB,IAAA,CAAC,EAAE,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CADG;AAEhB,IAAA,CAAC,EAAE,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC;AAFG,GAAlB;AAIA,MAAM,KAAK,GAAW,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAV,GAAc,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAA9C;AACA,MAAM,QAAQ,GAAW,KAAK,GAAG,KAAjC;AACA,MAAM,OAAO,GAAW,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAV,GAAc,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAhD;AACA,MAAM,OAAO,GAAW,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAV,GAAc,EAAE,CAAC,CAAH,GAAO,EAAE,CAAC,CAAhD;AACA,MAAI,KAAK,GAAiB,IAA1B;;AACA,MAAI,QAAQ,GAAG,SAAS,GAAG,OAAZ,GAAsB,OAArC,EAA8C;AAC5C,QAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAF,GAAM,EAAE,CAAC,CAAT,GAAa,CAAC,CAAC,CAAF,GAAM,EAAE,CAAC,CAAvB,IAA4B,KAAtC;AACA,QAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAF,GAAM,EAAE,CAAC,CAAT,GAAa,CAAC,CAAC,CAAF,GAAM,EAAE,CAAC,CAAvB,IAA4B,KAAtC;;AACA,QAAI,SAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAT,IAAsB,SAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnC,EAA8C;AAC5C,MAAA,KAAK,GAAG;AACN,QAAA,CAAC,EAAE,EAAE,CAAC,CAAH,GAAO,CAAC,GAAG,EAAE,CAAC,CADX;AAEN,QAAA,CAAC,EAAE,EAAE,CAAC,CAAH,GAAO,CAAC,GAAG,EAAE,CAAC;AAFX,OAAR;AAID;AACF;;AACD,SAAO,KAAP;AACD;AAAA","sourceRoot":"","sourcesContent":["var isBetween = function (value, min, max) { return value >= min && value <= max; };\nexport default function getLineIntersect(p0, p1, p2, p3) {\n    var tolerance = 0.001;\n    var E = {\n        x: p2.x - p0.x,\n        y: p2.y - p0.y,\n    };\n    var D0 = {\n        x: p1.x - p0.x,\n        y: p1.y - p0.y,\n    };\n    var D1 = {\n        x: p3.x - p2.x,\n        y: p3.y - p2.y,\n    };\n    var kross = D0.x * D1.y - D0.y * D1.x;\n    var sqrKross = kross * kross;\n    var sqrLen0 = D0.x * D0.x + D0.y * D0.y;\n    var sqrLen1 = D1.x * D1.x + D1.y * D1.y;\n    var point = null;\n    if (sqrKross > tolerance * sqrLen0 * sqrLen1) {\n        var s = (E.x * D1.y - E.y * D1.x) / kross;\n        var t = (E.x * D0.y - E.y * D0.x) / kross;\n        if (isBetween(s, 0, 1) && isBetween(t, 0, 1)) {\n            point = {\n                x: p0.x + s * D0.x,\n                y: p0.y + s * D0.y,\n            };\n        }\n    }\n    return point;\n}\n;\n//# sourceMappingURL=get-line-intersect.js.map"]},"metadata":{},"sourceType":"module"}