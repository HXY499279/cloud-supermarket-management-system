{"ast":null,"code":"/**\n * @description 扩展方法，提供 gl-matrix 为提供的方法\n * */\nimport { mat3, vec2 } from 'gl-matrix';\nexport function leftTranslate(out, a, v) {\n  var transMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  mat3.fromTranslation(transMat, v);\n  return mat3.multiply(out, transMat, a);\n}\nexport function leftRotate(out, a, rad) {\n  var rotateMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  mat3.fromRotation(rotateMat, rad);\n  return mat3.multiply(out, rotateMat, a);\n}\nexport function leftScale(out, a, v) {\n  var scaleMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  mat3.fromScaling(scaleMat, v);\n  return mat3.multiply(out, scaleMat, a);\n}\n\nfunction leftMultiply(out, a, a1) {\n  return mat3.multiply(out, a1, a);\n}\n/**\n * 根据 actions 来做 transform\n * @param m\n * @param actions\n */\n\n\nexport function transform(m, actions) {\n  var matrix = m ? [].concat(m) : [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n  for (var i = 0, len = actions.length; i < len; i++) {\n    var action = actions[i];\n\n    switch (action[0]) {\n      case 't':\n        leftTranslate(matrix, matrix, [action[1], action[2]]);\n        break;\n\n      case 's':\n        leftScale(matrix, matrix, [action[1], action[2]]);\n        break;\n\n      case 'r':\n        leftRotate(matrix, matrix, action[1]);\n        break;\n\n      case 'm':\n        leftMultiply(matrix, matrix, action[1]);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return matrix;\n}\n/**\n * 向量 v1 到 向量 v2 夹角的方向\n * @param  {Array} v1 向量\n * @param  {Array} v2 向量\n * @return {Boolean} >= 0 顺时针 < 0 逆时针\n */\n\nexport function direction(v1, v2) {\n  return v1[0] * v2[1] - v2[0] * v1[1];\n}\n/**\n * 二维向量 v1 到 v2 的夹角\n * @param v1\n * @param v2\n * @param direct\n */\n\nexport function angleTo(v1, v2, direct) {\n  var ang = vec2.angle(v1, v2);\n  var angleLargeThanPI = direction(v1, v2) >= 0;\n\n  if (direct) {\n    if (angleLargeThanPI) {\n      return Math.PI * 2 - ang;\n    }\n\n    return ang;\n  }\n\n  if (angleLargeThanPI) {\n    return ang;\n  }\n\n  return Math.PI * 2 - ang;\n}\n/**\n * 计算二维向量的垂直向量\n * @param out\n * @param v\n * @param flag\n */\n\nexport function vertical(out, v, flag) {\n  if (flag) {\n    out[0] = v[1];\n    out[1] = -1 * v[0];\n  } else {\n    out[0] = -1 * v[1];\n    out[1] = v[0];\n  }\n\n  return out;\n}","map":{"version":3,"sources":["../src/ext.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @description 扩展方法，提供 gl-matrix 为提供的方法\n * */\nimport { mat3, vec2 } from 'gl-matrix';\nexport function leftTranslate(out, a, v) {\n    var transMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    mat3.fromTranslation(transMat, v);\n    return mat3.multiply(out, transMat, a);\n}\nexport function leftRotate(out, a, rad) {\n    var rotateMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    mat3.fromRotation(rotateMat, rad);\n    return mat3.multiply(out, rotateMat, a);\n}\nexport function leftScale(out, a, v) {\n    var scaleMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    mat3.fromScaling(scaleMat, v);\n    return mat3.multiply(out, scaleMat, a);\n}\nfunction leftMultiply(out, a, a1) {\n    return mat3.multiply(out, a1, a);\n}\n/**\n * 根据 actions 来做 transform\n * @param m\n * @param actions\n */\nexport function transform(m, actions) {\n    var matrix = m ? [].concat(m) : [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    for (var i = 0, len = actions.length; i < len; i++) {\n        var action = actions[i];\n        switch (action[0]) {\n            case 't':\n                leftTranslate(matrix, matrix, [action[1], action[2]]);\n                break;\n            case 's':\n                leftScale(matrix, matrix, [action[1], action[2]]);\n                break;\n            case 'r':\n                leftRotate(matrix, matrix, action[1]);\n                break;\n            case 'm':\n                leftMultiply(matrix, matrix, action[1]);\n                break;\n            default:\n                break;\n        }\n    }\n    return matrix;\n}\n/**\n * 向量 v1 到 向量 v2 夹角的方向\n * @param  {Array} v1 向量\n * @param  {Array} v2 向量\n * @return {Boolean} >= 0 顺时针 < 0 逆时针\n */\nexport function direction(v1, v2) {\n    return v1[0] * v2[1] - v2[0] * v1[1];\n}\n/**\n * 二维向量 v1 到 v2 的夹角\n * @param v1\n * @param v2\n * @param direct\n */\nexport function angleTo(v1, v2, direct) {\n    var ang = vec2.angle(v1, v2);\n    var angleLargeThanPI = direction(v1, v2) >= 0;\n    if (direct) {\n        if (angleLargeThanPI) {\n            return Math.PI * 2 - ang;\n        }\n        return ang;\n    }\n    if (angleLargeThanPI) {\n        return ang;\n    }\n    return Math.PI * 2 - ang;\n}\n/**\n * 计算二维向量的垂直向量\n * @param out\n * @param v\n * @param flag\n */\nexport function vertical(out, v, flag) {\n    if (flag) {\n        out[0] = v[1];\n        out[1] = -1 * v[0];\n    }\n    else {\n        out[0] = -1 * v[1];\n        out[1] = v[0];\n    }\n    return out;\n}\n//# sourceMappingURL=ext.js.map"]},"metadata":{},"sourceType":"module"}