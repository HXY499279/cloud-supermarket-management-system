{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { isArray } from '@antv/util';\nimport Geometry from './base';\n/** 引入 Path 对应的 ShapeFactory */\n\nimport './shape/polygon';\n/**\n * Polygon 几何标记。\n * 常用于绘制色块图、日历图等。\n */\n\nvar Polygon =\n/** @class */\nfunction (_super) {\n  __extends(Polygon, _super);\n\n  function Polygon() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'polygon';\n    _this.shapeType = 'polygon';\n    _this.generatePoints = true;\n    return _this;\n  }\n  /**\n   * 获取 Shape 的关键点数据。\n   * @param obj\n   * @returns\n   */\n\n\n  Polygon.prototype.createShapePointsCfg = function (obj) {\n    var cfg = _super.prototype.createShapePointsCfg.call(this, obj);\n\n    var x = cfg.x;\n    var y = cfg.y;\n    var temp; // x y 都是数组时，不做处理\n\n    if (!(isArray(x) && isArray(y))) {\n      var xScale = this.getXScale();\n      var yScale = this.getYScale();\n      var xCount = xScale.values.length;\n      var yCount = yScale.values.length;\n      var xOffset = 0.5 * 1 / xCount;\n      var yOffset = 0.5 * 1 / yCount;\n\n      if (xScale.isCategory && yScale.isCategory) {\n        // 如果x,y都是分类\n        x = [x - xOffset, x - xOffset, x + xOffset, x + xOffset];\n        y = [y - yOffset, y + yOffset, y + yOffset, y - yOffset];\n      } else if (isArray(x)) {\n        // x 是数组\n        temp = x;\n        x = [temp[0], temp[0], temp[1], temp[1]];\n        y = [y - yOffset / 2, y + yOffset / 2, y + yOffset / 2, y - yOffset / 2];\n      } else if (isArray(y)) {\n        // y 是数组\n        temp = y;\n        y = [temp[0], temp[1], temp[1], temp[0]];\n        x = [x - xOffset / 2, x - xOffset / 2, x + xOffset / 2, x + xOffset / 2];\n      }\n\n      cfg.x = x;\n      cfg.y = y;\n    }\n\n    return cfg;\n  };\n\n  return Polygon;\n}(Geometry);\n\nexport default Polygon;","map":{"version":3,"sources":["../../src/geometry/polygon.ts"],"names":[],"mappings":"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","sourcesContent":["import { isArray } from '@antv/util';\nimport { Datum } from '../interface';\nimport Geometry from './base';\n/** 引入 Path 对应的 ShapeFactory */\nimport './shape/polygon';\n\n/**\n * Polygon 几何标记。\n * 常用于绘制色块图、日历图等。\n */\nexport default class Polygon extends Geometry {\n  public readonly type: string = 'polygon';\n  public readonly shapeType: string = 'polygon';\n  protected generatePoints: boolean = true;\n\n  /**\n   * 获取 Shape 的关键点数据。\n   * @param obj\n   * @returns\n   */\n  protected createShapePointsCfg(obj: Datum) {\n    const cfg: any = super.createShapePointsCfg(obj);\n    let x = cfg.x;\n    let y = cfg.y;\n    let temp;\n    // x y 都是数组时，不做处理\n    if (!(isArray(x) && isArray(y))) {\n      const xScale = this.getXScale();\n      const yScale = this.getYScale();\n      const xCount = xScale.values.length;\n      const yCount = yScale.values.length;\n      const xOffset = (0.5 * 1) / xCount;\n      const yOffset = (0.5 * 1) / yCount;\n\n      if (xScale.isCategory && yScale.isCategory) {\n        // 如果x,y都是分类\n        x = [x - xOffset, x - xOffset, x + xOffset, x + xOffset];\n        y = [y - yOffset, y + yOffset, y + yOffset, y - yOffset];\n      } else if (isArray(x)) {\n        // x 是数组\n        temp = x;\n        x = [temp[0], temp[0], temp[1], temp[1]];\n        y = [y - yOffset / 2, y + yOffset / 2, y + yOffset / 2, y - yOffset / 2];\n      } else if (isArray(y)) {\n        // y 是数组\n        temp = y;\n        y = [temp[0], temp[1], temp[1], temp[0]];\n        x = [x - xOffset / 2, x - xOffset / 2, x + xOffset / 2, x + xOffset / 2];\n      }\n      cfg.x = x;\n      cfg.y = y;\n    }\n    return cfg;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}