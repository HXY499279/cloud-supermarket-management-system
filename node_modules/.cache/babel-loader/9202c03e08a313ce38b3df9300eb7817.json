{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { get } from '@antv/util';\nimport { getXDimensionLength } from '../util/coordinate';\nimport Geometry from './base';\n/** 引入对应的 ShapeFactory */\n\nimport './shape/interval';\nimport { getDefaultSize } from './util/shape-size';\nimport { getMaxScale } from '../util/scale';\n/**\n * Interval 几何标记。\n * 用于绘制柱状图、饼图、条形图、玫瑰图等。\n */\n\nvar Interval =\n/** @class */\nfunction (_super) {\n  __extends(Interval, _super);\n\n  function Interval(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.type = 'interval';\n    _this.shapeType = 'interval';\n    _this.generatePoints = true;\n    var background = cfg.background;\n    _this.background = background;\n    return _this;\n  }\n  /**\n   * 获取每条数据的 Shape 绘制信息\n   * @param obj 经过分组 -> 数字化 -> adjust 调整后的数据记录\n   * @returns\n   */\n\n\n  Interval.prototype.createShapePointsCfg = function (obj) {\n    var cfg = _super.prototype.createShapePointsCfg.call(this, obj); // 计算每个 shape 的 size\n\n\n    var size;\n    var sizeAttr = this.getAttribute('size');\n\n    if (sizeAttr) {\n      size = this.getAttributeValues(sizeAttr, obj)[0]; // 归一化\n\n      var coordinate = this.coordinate;\n      var coordinateWidth = getXDimensionLength(coordinate);\n      size = size / coordinateWidth;\n    } else {\n      if (!this.defaultSize) {\n        this.defaultSize = getDefaultSize(this);\n      }\n\n      size = this.defaultSize;\n    }\n\n    cfg.size = size;\n    return cfg;\n  };\n  /**\n   * 调整 y 轴的 scale 范围。\n   * 对于 Y 轴为数值轴柱状图，默认从 0 开始 生长。\n   */\n\n\n  Interval.prototype.adjustScale = function () {\n    _super.prototype.adjustScale.call(this);\n\n    var yScale = this.getYScale(); // 特殊逻辑：饼图需要填充满整个空间\n\n    if (this.coordinate.type === 'theta') {\n      yScale.change({\n        nice: false,\n        min: 0,\n        // 发生过 stack 调整，yScale 的 max 被调整过，this.updateStackRange()\n        max: getMaxScale(yScale)\n      });\n    } else {\n      // 柱状图数值轴默认从 0 开始\n      var scaleDefs = this.scaleDefs;\n      var field = yScale.field,\n          min = yScale.min,\n          max = yScale.max,\n          type = yScale.type;\n\n      if (type !== 'time') {\n        // time 类型不做调整\n        // 柱状图的 Y 轴要从 0 开始生长，但是如果用户设置了则以用户的为准\n        if (min > 0 && !get(scaleDefs, [field, 'min'])) {\n          yScale.change({\n            min: 0\n          });\n        } // 柱当柱状图全为负值时也需要从 0 开始生长，但是如果用户设置了则以用户的为准\n\n\n        if (max <= 0 && !get(scaleDefs, [field, 'max'])) {\n          yScale.change({\n            max: 0\n          });\n        }\n      }\n    }\n  };\n  /**\n   * @override\n   */\n\n\n  Interval.prototype.getDrawCfg = function (mappingData) {\n    var shapeCfg = _super.prototype.getDrawCfg.call(this, mappingData);\n\n    shapeCfg.background = this.background;\n    return shapeCfg;\n  };\n\n  return Interval;\n}(Geometry);\n\nexport default Interval;","map":{"version":3,"sources":["../../src/geometry/interval.ts"],"names":[],"mappings":"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","sourcesContent":["import { get } from '@antv/util';\nimport { Datum, MappingDatum, ShapeInfo, LooseObject } from '../interface';\nimport { ShapeAttrs } from '../dependents';\nimport { getXDimensionLength } from '../util/coordinate';\nimport Geometry, { GeometryCfg } from './base';\n/** 引入对应的 ShapeFactory */\nimport './shape/interval';\nimport { getDefaultSize } from './util/shape-size';\nimport { getMaxScale } from '../util/scale';\n\n/** Path 构造函数参数类型 */\nexport interface IntervalCfg extends GeometryCfg {\n  /** shape 背景，只对 Interval Geometry 生效，目前只对 interval-rect shape 生效。 */\n  background?: { style?: ShapeAttrs };\n}\n\n/**\n * Interval 几何标记。\n * 用于绘制柱状图、饼图、条形图、玫瑰图等。\n */\nexport default class Interval extends Geometry {\n  public readonly type: string = 'interval';\n  public readonly shapeType: string = 'interval';\n  /** shape 背景。目前只对 interval-rect shape 生效。 */\n  protected background?: { style?: ShapeAttrs };\n  protected generatePoints: boolean = true;\n\n  constructor(cfg: IntervalCfg) {\n    super(cfg);\n\n    const { background } = cfg;\n    this.background = background;\n  }\n\n  /**\n   * 获取每条数据的 Shape 绘制信息\n   * @param obj 经过分组 -> 数字化 -> adjust 调整后的数据记录\n   * @returns\n   */\n  protected createShapePointsCfg(obj: Datum) {\n    const cfg = super.createShapePointsCfg(obj);\n\n    // 计算每个 shape 的 size\n    let size;\n    const sizeAttr = this.getAttribute('size');\n    if (sizeAttr) {\n      size = this.getAttributeValues(sizeAttr, obj)[0];\n      // 归一化\n      const coordinate = this.coordinate;\n      const coordinateWidth = getXDimensionLength(coordinate);\n      size = size / coordinateWidth;\n    } else {\n      if (!this.defaultSize) {\n        this.defaultSize = getDefaultSize(this);\n      }\n      size = this.defaultSize;\n    }\n    cfg.size = size;\n\n    return cfg;\n  }\n\n  /**\n   * 调整 y 轴的 scale 范围。\n   * 对于 Y 轴为数值轴柱状图，默认从 0 开始 生长。\n   */\n  protected adjustScale() {\n    super.adjustScale();\n    const yScale = this.getYScale();\n    // 特殊逻辑：饼图需要填充满整个空间\n    if (this.coordinate.type === 'theta') {\n      yScale.change({\n        nice: false,\n        min: 0,\n        // 发生过 stack 调整，yScale 的 max 被调整过，this.updateStackRange()\n        max: getMaxScale(yScale),\n      });\n    } else {\n      // 柱状图数值轴默认从 0 开始\n      const scaleDefs = this.scaleDefs;\n      const { field, min, max, type } = yScale;\n      if (type !== 'time') {\n        // time 类型不做调整\n        // 柱状图的 Y 轴要从 0 开始生长，但是如果用户设置了则以用户的为准\n        if (min > 0 && !get(scaleDefs, [field, 'min'])) {\n          yScale.change({\n            min: 0,\n          });\n        }\n        // 柱当柱状图全为负值时也需要从 0 开始生长，但是如果用户设置了则以用户的为准\n        if (max <= 0 && !get(scaleDefs, [field, 'max'])) {\n          yScale.change({\n            max: 0,\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  protected getDrawCfg(mappingData: MappingDatum): ShapeInfo {\n    const shapeCfg = super.getDrawCfg(mappingData);\n    shapeCfg.background = this.background;\n\n    return shapeCfg;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}