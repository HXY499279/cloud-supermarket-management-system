{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { DIRECTION } from '../../constant';\n/** @ignore */\n\nvar PaddingCal =\n/** @class */\nfunction () {\n  /**\n   * 初始的 padding 数据\n   * @param top\n   * @param right\n   * @param bottom\n   * @param left\n   */\n  function PaddingCal(top, right, bottom, left) {\n    if (top === void 0) {\n      top = 0;\n    }\n\n    if (right === void 0) {\n      right = 0;\n    }\n\n    if (bottom === void 0) {\n      bottom = 0;\n    }\n\n    if (left === void 0) {\n      left = 0;\n    }\n\n    this.top = top;\n    this.right = right;\n    this.bottom = bottom;\n    this.left = left;\n  }\n  /**\n   * 使用静态方法创建一个\n   * @param top\n   * @param right\n   * @param bottom\n   * @param left\n   */\n\n\n  PaddingCal.instance = function (top, right, bottom, left) {\n    if (top === void 0) {\n      top = 0;\n    }\n\n    if (right === void 0) {\n      right = 0;\n    }\n\n    if (bottom === void 0) {\n      bottom = 0;\n    }\n\n    if (left === void 0) {\n      left = 0;\n    }\n\n    return new PaddingCal(top, right, bottom, left);\n  };\n  /**\n   * 取最大区间\n   * @param padding\n   */\n\n\n  PaddingCal.prototype.max = function (padding) {\n    var top = padding[0],\n        right = padding[1],\n        bottom = padding[2],\n        left = padding[3];\n    this.top = Math.max(this.top, top);\n    this.right = Math.max(this.right, right);\n    this.bottom = Math.max(this.bottom, bottom);\n    this.left = Math.max(this.left, left);\n    return this;\n  };\n  /**\n   * 四周增加 padding\n   * @param padding\n   */\n\n\n  PaddingCal.prototype.shrink = function (padding) {\n    var top = padding[0],\n        right = padding[1],\n        bottom = padding[2],\n        left = padding[3];\n    this.top += top;\n    this.right += right;\n    this.bottom += bottom;\n    this.left += left;\n    return this;\n  };\n  /**\n   * 在某一个方向增加 padding\n   * @param bbox\n   * @param direction\n   */\n\n\n  PaddingCal.prototype.inc = function (bbox, direction) {\n    var width = bbox.width,\n        height = bbox.height;\n\n    switch (direction) {\n      case DIRECTION.TOP:\n      case DIRECTION.TOP_LEFT:\n      case DIRECTION.TOP_RIGHT:\n        this.top += height;\n        break;\n\n      case DIRECTION.RIGHT:\n      case DIRECTION.RIGHT_TOP:\n      case DIRECTION.RIGHT_BOTTOM:\n        this.right += width;\n        break;\n\n      case DIRECTION.BOTTOM:\n      case DIRECTION.BOTTOM_LEFT:\n      case DIRECTION.BOTTOM_RIGHT:\n        this.bottom += height;\n        break;\n\n      case DIRECTION.LEFT:\n      case DIRECTION.LEFT_TOP:\n      case DIRECTION.LEFT_BOTTOM:\n        this.left += width;\n        break;\n\n      default:\n        break;\n    }\n\n    return this;\n  };\n  /**\n   * 获得最终的 padding\n   */\n\n\n  PaddingCal.prototype.getPadding = function () {\n    return [this.top, this.right, this.bottom, this.left];\n  };\n  /**\n   * clone 一个 padding cal\n   */\n\n\n  PaddingCal.prototype.clone = function () {\n    return new (PaddingCal.bind.apply(PaddingCal, __spreadArrays([void 0], this.getPadding())))();\n  };\n\n  return PaddingCal;\n}();\n\nexport { PaddingCal };","map":{"version":3,"sources":["../../../src/chart/layout/padding-cal.ts"],"names":[],"mappings":"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","sourcesContent":["import { DIRECTION } from '../../constant';\nimport { BBox } from '../../dependents';\nimport { Padding } from '../../interface';\n\nexport type PaddingCalCtor = {\n  readonly instance: (top?: number, right?: number, bottom?: number, left?: number) => PaddingCal;\n};\n\n/** @ignore */\nexport class PaddingCal {\n  private top: number;\n  private right: number;\n  private bottom: number;\n  private left: number;\n\n  /**\n   * 使用静态方法创建一个\n   * @param top\n   * @param right\n   * @param bottom\n   * @param left\n   */\n  public static instance(top: number = 0, right: number = 0, bottom: number = 0, left: number = 0) {\n    return new PaddingCal(top, right, bottom, left);\n  }\n\n  /**\n   * 初始的 padding 数据\n   * @param top\n   * @param right\n   * @param bottom\n   * @param left\n   */\n  constructor(top: number = 0, right: number = 0, bottom: number = 0, left: number = 0) {\n    this.top = top;\n    this.right = right;\n    this.bottom = bottom;\n    this.left = left;\n  }\n\n  /**\n   * 取最大区间\n   * @param padding\n   */\n  public max(padding: Padding): PaddingCal {\n    const [top, right, bottom, left] = padding;\n\n    this.top = Math.max(this.top, top);\n    this.right = Math.max(this.right, right);\n    this.bottom = Math.max(this.bottom, bottom);\n    this.left = Math.max(this.left, left);\n\n    return this;\n  }\n\n  /**\n   * 四周增加 padding\n   * @param padding\n   */\n  public shrink(padding: Padding): PaddingCal {\n    const [top, right, bottom, left] = padding;\n\n    this.top += top;\n    this.right += right;\n    this.bottom += bottom;\n    this.left += left;\n\n    return this;\n  }\n\n  /**\n   * 在某一个方向增加 padding\n   * @param bbox\n   * @param direction\n   */\n  public inc(bbox: BBox, direction: DIRECTION): PaddingCal {\n    const { width, height } = bbox;\n\n    switch (direction) {\n      case DIRECTION.TOP:\n      case DIRECTION.TOP_LEFT:\n      case DIRECTION.TOP_RIGHT:\n        this.top += height;\n        break;\n\n      case DIRECTION.RIGHT:\n      case DIRECTION.RIGHT_TOP:\n      case DIRECTION.RIGHT_BOTTOM:\n        this.right += width;\n        break;\n\n      case DIRECTION.BOTTOM:\n      case DIRECTION.BOTTOM_LEFT:\n      case DIRECTION.BOTTOM_RIGHT:\n        this.bottom += height;\n        break;\n\n      case DIRECTION.LEFT:\n      case DIRECTION.LEFT_TOP:\n      case DIRECTION.LEFT_BOTTOM:\n        this.left += width;\n        break;\n      default:\n        break;\n    }\n\n    return this;\n  }\n\n  /**\n   * 获得最终的 padding\n   */\n  public getPadding(): Padding {\n    return [this.top, this.right, this.bottom, this.left];\n  }\n\n  /**\n   * clone 一个 padding cal\n   */\n  public clone(): PaddingCal {\n    return new PaddingCal(...this.getPadding());\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}