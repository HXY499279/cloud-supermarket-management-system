{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, isEmpty, isEqual, last } from '@antv/util';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getStyle } from '../util/get-style';\n\nfunction getPath(points) {\n  var flag = points[0];\n  var i = 1;\n  var path = [['M', flag.x, flag.y]];\n\n  while (i < points.length) {\n    var c = points[i];\n\n    if (c.x !== points[i - 1].x || c.y !== points[i - 1].y) {\n      path.push(['L', c.x, c.y]);\n\n      if (c.x === flag.x && c.y === flag.y && i < points.length - 1) {\n        flag = points[i + 1];\n        path.push(['Z']);\n        path.push(['M', flag.x, flag.y]);\n        i++;\n      }\n    }\n\n    i++;\n  }\n\n  if (!isEqual(last(path), flag)) {\n    path.push(['L', flag.x, flag.y]);\n  }\n\n  path.push(['Z']);\n  return path;\n}\n\nvar PolygonShapeFactory = registerShapeFactory('polygon', {\n  defaultShapeType: 'polygon',\n  getDefaultPoints: function (pointInfo) {\n    var points = [];\n    each(pointInfo.x, function (subX, index) {\n      var subY = pointInfo.y[index];\n      points.push({\n        x: subX,\n        y: subY\n      });\n    });\n    return points;\n  }\n});\nregisterShape('polygon', 'polygon', {\n  draw: function (cfg, container) {\n    if (!isEmpty(cfg.points)) {\n      var shapeAttrs = getStyle(cfg, true, true);\n      var path = this.parsePath(getPath(cfg.points));\n      return container.addShape('path', {\n        attrs: __assign(__assign({}, shapeAttrs), {\n          path: path\n        }),\n        name: 'polygon'\n      });\n    }\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        fill: color\n      }\n    };\n  }\n});\nexport default PolygonShapeFactory;","map":{"version":3,"sources":["../../../../src/geometry/shape/polygon/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, isEmpty, isEqual, last } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { ShapeInfo, ShapeMarkerCfg, ShapePoint } from '../../../interface';\n\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getStyle } from '../util/get-style';\n\nfunction getPath(points: any[]) {\n  let flag: any = points[0];\n  let i = 1;\n\n  const path = [['M', flag.x, flag.y]];\n\n  while (i < points.length) {\n    const c: any = points[i];\n    if (c.x !== points[i - 1].x || c.y !== points[i - 1].y) {\n      path.push(['L', c.x, c.y]);\n      if (c.x === flag.x && c.y === flag.y && i < points.length - 1) {\n        flag = points[i + 1];\n        path.push(['Z']);\n        path.push(['M', flag.x, flag.y]);\n        i++;\n      }\n    }\n    i++;\n  }\n\n  if (!isEqual(last(path), flag)) {\n    path.push(['L', flag.x, flag.y]);\n  }\n\n  path.push(['Z']);\n\n  return path;\n}\n\nconst PolygonShapeFactory = registerShapeFactory('polygon', {\n  defaultShapeType: 'polygon',\n  getDefaultPoints(pointInfo: ShapePoint) {\n    const points = [];\n    each(pointInfo.x as number[], (subX, index) => {\n      const subY = pointInfo.y[index];\n      points.push({\n        x: subX,\n        y: subY,\n      });\n    });\n    return points;\n  },\n});\n\nregisterShape('polygon', 'polygon', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    if (!isEmpty(cfg.points)) {\n      const shapeAttrs = getStyle(cfg, true, true);\n      const path = this.parsePath(getPath(cfg.points));\n      return container.addShape('path', {\n        attrs: {\n          ...shapeAttrs,\n          path,\n        },\n        name: 'polygon',\n      });\n    }\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color } = markerCfg;\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        fill: color,\n      },\n    };\n  },\n});\n\nexport default PolygonShapeFactory;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}