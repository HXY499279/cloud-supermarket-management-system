{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Coordinate from './base';\n/**\n * 笛卡尔坐标系\n * https://www.zhihu.com/question/20665303\n */\n\nvar Cartesian =\n/** @class */\nfunction (_super) {\n  __extends(Cartesian, _super);\n\n  function Cartesian(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.isRect = true;\n    _this.type = 'cartesian';\n\n    _this.initial();\n\n    return _this;\n  }\n\n  Cartesian.prototype.initial = function () {\n    _super.prototype.initial.call(this);\n\n    var start = this.start;\n    var end = this.end;\n    this.x = {\n      start: start.x,\n      end: end.x\n    };\n    this.y = {\n      start: start.y,\n      end: end.y\n    };\n  };\n\n  Cartesian.prototype.convertPoint = function (point) {\n    var _a;\n\n    var x = point.x,\n        y = point.y; // 交换\n\n    if (this.isTransposed) {\n      _a = [y, x], x = _a[0], y = _a[1];\n    }\n\n    return {\n      x: this.convertDim(x, 'x'),\n      y: this.convertDim(y, 'y')\n    };\n  };\n\n  Cartesian.prototype.invertPoint = function (point) {\n    var _a;\n\n    var x = this.invertDim(point.x, 'x');\n    var y = this.invertDim(point.y, 'y');\n\n    if (this.isTransposed) {\n      _a = [y, x], x = _a[0], y = _a[1];\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  return Cartesian;\n}(Coordinate);\n\nexport default Cartesian;","map":{"version":3,"sources":["../../src/coord/cartesian.ts"],"names":[],"mappings":";AACA,OAAO,UAAP,MAAuB,QAAvB;AAEA;;;AAGG;;AACH,IAAA,SAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;;AAIrC,WAAA,SAAA,CAAY,GAAZ,EAA8B;AAA9B,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,GAAN,KAAU,IADZ;;AAHgB,IAAA,KAAA,CAAA,MAAA,GAAkB,IAAlB;AACA,IAAA,KAAA,CAAA,IAAA,GAAe,WAAf;;AAKd,IAAA,KAAI,CAAC,OAAL;;;AACD;;AAEM,EAAA,SAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACE,IAAA,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb;;AAEA,QAAM,KAAK,GAAG,KAAK,KAAnB;AACA,QAAM,GAAG,GAAG,KAAK,GAAjB;AAEA,SAAK,CAAL,GAAS;AACP,MAAA,KAAK,EAAE,KAAK,CAAC,CADN;AAEP,MAAA,GAAG,EAAE,GAAG,CAAC;AAFF,KAAT;AAIA,SAAK,CAAL,GAAS;AACP,MAAA,KAAK,EAAE,KAAK,CAAC,CADN;AAEP,MAAA,GAAG,EAAE,GAAG,CAAC;AAFF,KAAT;AAID,GAdM;;AAgBA,EAAA,SAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,KAApB,EAAgC;;;AACxB,QAAA,CAAC,GAAQ,KAAK,CAAb,CAAD;AAAA,QAAG,CAAC,GAAK,KAAK,CAAV,CAAJ,CADwB,CAG9B;;AACA,QAAI,KAAK,YAAT,EAAuB;AACrB,MAAA,EAAA,GAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAF,EAAI,CAAC,GAAA,EAAA,CAAA,CAAA,CAAL;AACD;;AACD,WAAO;AACL,MAAA,CAAC,EAAE,KAAK,UAAL,CAAgB,CAAhB,EAAmB,GAAnB,CADE;AAEL,MAAA,CAAC,EAAE,KAAK,UAAL,CAAgB,CAAhB,EAAmB,GAAnB;AAFE,KAAP;AAID,GAXM;;AAaA,EAAA,SAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,KAAnB,EAA+B;;;AAC7B,QAAI,CAAC,GAAG,KAAK,SAAL,CAAe,KAAK,CAAC,CAArB,EAAwB,GAAxB,CAAR;AACA,QAAI,CAAC,GAAG,KAAK,SAAL,CAAe,KAAK,CAAC,CAArB,EAAwB,GAAxB,CAAR;;AAEA,QAAI,KAAK,YAAT,EAAuB;AACrB,MAAA,EAAA,GAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,EAAC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAF,EAAI,CAAC,GAAA,EAAA,CAAA,CAAA,CAAL;AACD;;AAED,WAAO;AAAE,MAAA,CAAC,EAAA,CAAH;AAAK,MAAA,CAAC,EAAA;AAAN,KAAP;AACD,GATM;;AAUT,SAAA,SAAA;AAAC,CAjDD,CAAuC,UAAvC,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport Coordinate from './base';\n/**\n * 笛卡尔坐标系\n * https://www.zhihu.com/question/20665303\n */\nvar Cartesian = /** @class */ (function (_super) {\n    __extends(Cartesian, _super);\n    function Cartesian(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        _this.isRect = true;\n        _this.type = 'cartesian';\n        _this.initial();\n        return _this;\n    }\n    Cartesian.prototype.initial = function () {\n        _super.prototype.initial.call(this);\n        var start = this.start;\n        var end = this.end;\n        this.x = {\n            start: start.x,\n            end: end.x,\n        };\n        this.y = {\n            start: start.y,\n            end: end.y,\n        };\n    };\n    Cartesian.prototype.convertPoint = function (point) {\n        var _a;\n        var x = point.x, y = point.y;\n        // 交换\n        if (this.isTransposed) {\n            _a = [y, x], x = _a[0], y = _a[1];\n        }\n        return {\n            x: this.convertDim(x, 'x'),\n            y: this.convertDim(y, 'y'),\n        };\n    };\n    Cartesian.prototype.invertPoint = function (point) {\n        var _a;\n        var x = this.invertDim(point.x, 'x');\n        var y = this.invertDim(point.y, 'y');\n        if (this.isTransposed) {\n            _a = [y, x], x = _a[0], y = _a[1];\n        }\n        return { x: x, y: y };\n    };\n    return Cartesian;\n}(Coordinate));\nexport default Cartesian;\n//# sourceMappingURL=cartesian.js.map"]},"metadata":{},"sourceType":"module"}