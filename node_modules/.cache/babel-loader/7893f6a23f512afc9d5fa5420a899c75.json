{"ast":null,"code":"/**\n * @fileoverview 图片\n * @author dxq613@gmail.com\n */\nimport { __assign, __extends } from \"tslib\";\nimport ShapeBase from './base';\nimport { isString, isNil } from '../util/util';\n\nfunction isCanvas(dom) {\n  return dom instanceof HTMLElement && isString(dom.nodeName) && dom.nodeName.toUpperCase() === 'CANVAS';\n}\n\nvar ImageShape =\n/** @class */\nfunction (_super) {\n  __extends(ImageShape, _super);\n\n  function ImageShape() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ImageShape.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n\n    return __assign(__assign({}, attrs), {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    });\n  };\n\n  ImageShape.prototype.initAttrs = function (attrs) {\n    this._setImage(attrs.img);\n  }; // image 不计算 stroke\n\n\n  ImageShape.prototype.isStroke = function () {\n    return false;\n  }; // 仅仅使用包围盒检测来进行拾取\n  // 所以不需要复写 isInStrokeOrPath 的方法\n\n\n  ImageShape.prototype.isOnlyHitBox = function () {\n    return true;\n  };\n\n  ImageShape.prototype._afterLoading = function () {\n    if (this.get('toDraw') === true) {\n      var canvas = this.get('canvas');\n\n      if (canvas) {\n        // 这段应该改成局部渲染\n        canvas.draw();\n      } else {\n        // 这种方式如果发生遮挡会出现问题\n        this.createPath(this.get('context'));\n      }\n    }\n  };\n\n  ImageShape.prototype._setImage = function (img) {\n    var _this = this;\n\n    var attrs = this.attrs;\n\n    if (isString(img)) {\n      var image_1 = new Image();\n\n      image_1.onload = function () {\n        // 图片未加载完，则已经被销毁\n        if (_this.destroyed) {\n          return false;\n        } // 缓存原始地址，可以做对比，防止重复加载图片\n        // 如果考虑到在加载过程中可能替换 img 属性，则情况更加复杂\n        // this.set('imgSrc', img);\n        // 这里会循环调用 _setImage 方法，但不会再走这个分支\n\n\n        _this.attr('img', image_1);\n\n        _this.set('loading', false);\n\n        _this._afterLoading();\n\n        var callback = _this.get('callback');\n\n        if (callback) {\n          callback.call(_this);\n        }\n      }; // 设置跨域\n\n\n      image_1.crossOrigin = 'Anonymous';\n      image_1.src = img; // loading 过程中不绘制\n\n      this.set('loading', true);\n    } else if (img instanceof Image) {\n      // 如果是一个 image 对象，则设置宽高\n      if (!attrs.width) {\n        attrs.width = img.width;\n      }\n\n      if (!attrs.height) {\n        attrs.height = img.height;\n      }\n    } else if (isCanvas(img)) {\n      // 如果设置了 canvas 对象\n      if (!attrs.width) {\n        attrs.width = Number(img.getAttribute('width'));\n      }\n\n      if (!attrs.height) {\n        attrs.height, Number(img.getAttribute('height'));\n      }\n    }\n  };\n\n  ImageShape.prototype.onAttrChange = function (name, value, originValue) {\n    _super.prototype.onAttrChange.call(this, name, value, originValue); // 如果加载的已经是当前图片，则不再处理\n\n\n    if (name === 'img') {\n      // 可以加缓冲，&& this.get('imgSrc') !== value\n      this._setImage(value);\n    }\n  };\n\n  ImageShape.prototype.createPath = function (context) {\n    // 正在加载则不绘制\n    if (this.get('loading')) {\n      this.set('toDraw', true); // 加载完成后绘制\n\n      this.set('context', context);\n      return;\n    }\n\n    var attrs = this.attr();\n    var x = attrs.x,\n        y = attrs.y,\n        width = attrs.width,\n        height = attrs.height,\n        sx = attrs.sx,\n        sy = attrs.sy,\n        swidth = attrs.swidth,\n        sheight = attrs.sheight;\n    var img = attrs.img;\n\n    if (img instanceof Image || isCanvas(img)) {\n      if (!isNil(sx) && !isNil(sy) && !isNil(swidth) && !isNil(sheight)) {\n        context.drawImage(img, sx, sy, swidth, sheight, x, y, width, height);\n      } else {\n        context.drawImage(img, x, y, width, height);\n      }\n    }\n  };\n\n  return ImageShape;\n}(ShapeBase);\n\nexport default ImageShape;","map":{"version":3,"sources":["../../src/shape/image.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @fileoverview 图片\n * @author dxq613@gmail.com\n */\nimport { __assign, __extends } from \"tslib\";\nimport ShapeBase from './base';\nimport { isString, isNil } from '../util/util';\nfunction isCanvas(dom) {\n    return dom instanceof HTMLElement && isString(dom.nodeName) && dom.nodeName.toUpperCase() === 'CANVAS';\n}\nvar ImageShape = /** @class */ (function (_super) {\n    __extends(ImageShape, _super);\n    function ImageShape() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ImageShape.prototype.getDefaultAttrs = function () {\n        var attrs = _super.prototype.getDefaultAttrs.call(this);\n        return __assign(__assign({}, attrs), { x: 0, y: 0, width: 0, height: 0 });\n    };\n    ImageShape.prototype.initAttrs = function (attrs) {\n        this._setImage(attrs.img);\n    };\n    // image 不计算 stroke\n    ImageShape.prototype.isStroke = function () {\n        return false;\n    };\n    // 仅仅使用包围盒检测来进行拾取\n    // 所以不需要复写 isInStrokeOrPath 的方法\n    ImageShape.prototype.isOnlyHitBox = function () {\n        return true;\n    };\n    ImageShape.prototype._afterLoading = function () {\n        if (this.get('toDraw') === true) {\n            var canvas = this.get('canvas');\n            if (canvas) {\n                // 这段应该改成局部渲染\n                canvas.draw();\n            }\n            else {\n                // 这种方式如果发生遮挡会出现问题\n                this.createPath(this.get('context'));\n            }\n        }\n    };\n    ImageShape.prototype._setImage = function (img) {\n        var _this = this;\n        var attrs = this.attrs;\n        if (isString(img)) {\n            var image_1 = new Image();\n            image_1.onload = function () {\n                // 图片未加载完，则已经被销毁\n                if (_this.destroyed) {\n                    return false;\n                }\n                // 缓存原始地址，可以做对比，防止重复加载图片\n                // 如果考虑到在加载过程中可能替换 img 属性，则情况更加复杂\n                // this.set('imgSrc', img);\n                // 这里会循环调用 _setImage 方法，但不会再走这个分支\n                _this.attr('img', image_1);\n                _this.set('loading', false);\n                _this._afterLoading();\n                var callback = _this.get('callback');\n                if (callback) {\n                    callback.call(_this);\n                }\n            };\n            // 设置跨域\n            image_1.crossOrigin = 'Anonymous';\n            image_1.src = img;\n            // loading 过程中不绘制\n            this.set('loading', true);\n        }\n        else if (img instanceof Image) {\n            // 如果是一个 image 对象，则设置宽高\n            if (!attrs.width) {\n                attrs.width = img.width;\n            }\n            if (!attrs.height) {\n                attrs.height = img.height;\n            }\n        }\n        else if (isCanvas(img)) {\n            // 如果设置了 canvas 对象\n            if (!attrs.width) {\n                attrs.width = Number(img.getAttribute('width'));\n            }\n            if (!attrs.height) {\n                attrs.height, Number(img.getAttribute('height'));\n            }\n        }\n    };\n    ImageShape.prototype.onAttrChange = function (name, value, originValue) {\n        _super.prototype.onAttrChange.call(this, name, value, originValue);\n        // 如果加载的已经是当前图片，则不再处理\n        if (name === 'img') {\n            // 可以加缓冲，&& this.get('imgSrc') !== value\n            this._setImage(value);\n        }\n    };\n    ImageShape.prototype.createPath = function (context) {\n        // 正在加载则不绘制\n        if (this.get('loading')) {\n            this.set('toDraw', true); // 加载完成后绘制\n            this.set('context', context);\n            return;\n        }\n        var attrs = this.attr();\n        var x = attrs.x, y = attrs.y, width = attrs.width, height = attrs.height, sx = attrs.sx, sy = attrs.sy, swidth = attrs.swidth, sheight = attrs.sheight;\n        var img = attrs.img;\n        if (img instanceof Image || isCanvas(img)) {\n            if (!isNil(sx) && !isNil(sy) && !isNil(swidth) && !isNil(sheight)) {\n                context.drawImage(img, sx, sy, swidth, sheight, x, y, width, height);\n            }\n            else {\n                context.drawImage(img, x, y, width, height);\n            }\n        }\n    };\n    return ImageShape;\n}(ShapeBase));\nexport default ImageShape;\n//# sourceMappingURL=image.js.map"]},"metadata":{},"sourceType":"module"}