{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, get, isArray, isEmpty, isEqual, isFunction, isString } from '@antv/util'; // 暂未发包\n// @ts-ignore\n\nimport { propagationDelegate } from '@antv/component';\nimport { doAnimate } from '../../animate';\nimport Base from '../../base';\nimport { getReplaceAttrs } from '../../util/graphics';\nimport { GEOMETRY_LIFE_CIRCLE } from '../../constant';\nimport { BACKGROUND_SHAPE } from '../shape/constant';\n/**\n * Element 图形元素。\n * 定义：在 G2 中，我们会将数据通过图形语法映射成不同的图形，比如点图，数据集中的每条数据会对应一个点，柱状图每条数据对应一个柱子，线图则是一组数据对应一条折线，Element 即一条/一组数据对应的图形元素，它代表一条数据或者一个数据集，在图形层面，它可以是单个 Shape 也可以是多个 Shape，我们称之为图形元素。\n */\n\nvar Element =\n/** @class */\nfunction (_super) {\n  __extends(Element, _super);\n\n  function Element(cfg) {\n    var _this = _super.call(this, cfg) || this; // 存储当前开启的状态\n\n\n    _this.states = [];\n    var shapeFactory = cfg.shapeFactory,\n        container = cfg.container,\n        offscreenGroup = cfg.offscreenGroup,\n        _a = cfg.visible,\n        visible = _a === void 0 ? true : _a;\n    _this.shapeFactory = shapeFactory;\n    _this.container = container;\n    _this.offscreenGroup = offscreenGroup;\n    _this.visible = visible;\n    return _this;\n  }\n  /**\n   * 绘制图形。\n   * @param model 绘制数据。\n   * @param isUpdate 可选，是否是更新发生后的绘制。\n   */\n\n\n  Element.prototype.draw = function (model, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n\n    this.model = model;\n    this.data = model.data; // 存储原始数据\n\n    this.shapeType = this.getShapeType(model); // 绘制图形\n\n    this.drawShape(model, isUpdate);\n\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  };\n  /**\n   * 更新图形。\n   * @param model 更新的绘制数据。\n   */\n\n\n  Element.prototype.update = function (model) {\n    var _a = this,\n        shapeFactory = _a.shapeFactory,\n        shape = _a.shape;\n\n    if (!shape) {\n      return;\n    } // 更新数据\n\n\n    this.model = model;\n    this.data = model.data;\n    this.shapeType = this.getShapeType(model); // step 1: 更新 shape 携带的信息\n\n    this.setShapeInfo(shape, model); // step 2: 使用虚拟 Group 重新绘制 shape，然后更新当前 shape\n\n    var offscreenGroup = this.getOffscreenGroup();\n    var newShape = shapeFactory.drawShape(this.shapeType, model, offscreenGroup); // @ts-ignore\n\n    newShape.cfg.data = this.data; // @ts-ignore\n\n    newShape.cfg.origin = model; // label 需要使用\n\n    newShape.cfg.element = this; // step 3: 同步 shape 样式\n\n    this.syncShapeStyle(shape, newShape, this.getStates(), this.getAnimateCfg('update'));\n  };\n  /**\n   * 销毁 element 实例。\n   */\n\n\n  Element.prototype.destroy = function () {\n    var _a = this,\n        shapeFactory = _a.shapeFactory,\n        shape = _a.shape;\n\n    if (shape) {\n      var animateCfg = this.getAnimateCfg('leave');\n\n      if (animateCfg) {\n        // 指定了动画配置则执行销毁动画\n        doAnimate(shape, animateCfg, {\n          coordinate: shapeFactory.coordinate,\n          toAttrs: __assign({}, shape.attr())\n        });\n      } else {\n        // 否则直接销毁\n        shape.remove(true);\n      }\n    } // reset\n\n\n    this.states = [];\n    this.shapeFactory = undefined;\n    this.container = undefined;\n    this.shape = undefined;\n    this.animate = undefined;\n    this.geometry = undefined;\n    this.labelShape = undefined;\n    this.model = undefined;\n    this.data = undefined;\n    this.offscreenGroup = undefined;\n    this.statesStyle = undefined;\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * 显示或者隐藏 element。\n   * @param visible 是否可见。\n   */\n\n\n  Element.prototype.changeVisible = function (visible) {\n    _super.prototype.changeVisible.call(this, visible);\n\n    if (visible) {\n      if (this.shape) {\n        this.shape.show();\n      }\n\n      if (this.labelShape) {\n        this.labelShape.forEach(function (label) {\n          label.show();\n        });\n      }\n    } else {\n      if (this.shape) {\n        this.shape.hide();\n      }\n\n      if (this.labelShape) {\n        this.labelShape.forEach(function (label) {\n          label.hide();\n        });\n      }\n    }\n  };\n  /**\n   * 设置 Element 的状态。\n   *\n   * 目前 Element 开放三种状态：\n   * 1. active\n   * 2. selected\n   * 3. inactive\n   *\n   * 这三种状态相互独立，可以进行叠加。\n   *\n   * 这三种状态的样式可在 [[Theme]] 主题中或者通过 `geometry.state()` 接口进行配置。\n   *\n   * ```ts\n   * // 激活 active 状态\n   * setState('active', true);\n   * ```\n   *\n   * @param stateName 状态名\n   * @param stateStatus 是否开启状态\n   */\n\n\n  Element.prototype.setState = function (stateName, stateStatus) {\n    var _a = this,\n        states = _a.states,\n        shapeFactory = _a.shapeFactory,\n        model = _a.model,\n        shape = _a.shape,\n        shapeType = _a.shapeType;\n\n    var index = states.indexOf(stateName);\n\n    if (stateStatus) {\n      // 开启状态\n      if (index > -1) {\n        // 该状态已经开启，则返回\n        return;\n      }\n\n      states.push(stateName);\n\n      if (stateName === 'active' || stateName === 'selected') {\n        shape === null || shape === void 0 ? void 0 : shape.toFront();\n      }\n    } else {\n      if (index === -1) {\n        // 关闭状态，但是状态未设置过\n        return;\n      }\n\n      states.splice(index, 1);\n\n      if (stateName === 'active' || stateName === 'selected') {\n        shape === null || shape === void 0 ? void 0 : shape.toBack();\n      }\n    } // 使用虚拟 group 重新绘制 shape，然后对这个 shape 应用状态样式后，更新当前 shape。\n\n\n    var offscreenShape = shapeFactory.drawShape(shapeType, model, this.getOffscreenGroup());\n\n    if (states.length) {\n      // 应用当前状态\n      this.syncShapeStyle(shape, offscreenShape, states, null);\n    } else {\n      // 如果没有状态，则需要恢复至原始状态\n      this.syncShapeStyle(shape, offscreenShape, ['reset'], null);\n    }\n\n    offscreenShape.remove(true); // 销毁，减少内存占用\n\n    var eventObject = {\n      state: stateName,\n      stateStatus: stateStatus,\n      element: this,\n      target: this.container\n    };\n    this.container.emit('statechange', eventObject); // @ts-ignore\n\n    propagationDelegate(this.shape, 'statechange', eventObject);\n  };\n  /**\n   * 清空状量态，恢复至初始状态。\n   */\n\n\n  Element.prototype.clearStates = function () {\n    var _this = this;\n\n    var states = this.states;\n    each(states, function (state) {\n      _this.setState(state, false);\n    });\n    this.states = [];\n  };\n  /**\n   * 查询当前 Element 上是否已设置 `stateName` 对应的状态。\n   * @param stateName 状态名称。\n   * @returns true 表示存在，false 表示不存在。\n   */\n\n\n  Element.prototype.hasState = function (stateName) {\n    return this.states.includes(stateName);\n  };\n  /**\n   * 获取当前 Element 上所有的状态。\n   * @returns 当前 Element 上所有的状态数组。\n   */\n\n\n  Element.prototype.getStates = function () {\n    return this.states;\n  };\n  /**\n   * 获取 Element 对应的原始数据。\n   * @returns 原始数据。\n   */\n\n\n  Element.prototype.getData = function () {\n    return this.data;\n  };\n  /**\n   * 获取 Element 对应的图形绘制数据。\n   * @returns 图形绘制数据。\n   */\n\n\n  Element.prototype.getModel = function () {\n    return this.model;\n  };\n  /**\n   * 返回 Element 元素整体的 bbox，包含文本及文本连线（有的话）。\n   * @returns 整体包围盒。\n   */\n\n\n  Element.prototype.getBBox = function () {\n    var _a = this,\n        shape = _a.shape,\n        labelShape = _a.labelShape;\n\n    var bbox = {\n      x: 0,\n      y: 0,\n      minX: 0,\n      minY: 0,\n      maxX: 0,\n      maxY: 0,\n      width: 0,\n      height: 0\n    };\n\n    if (shape) {\n      bbox = shape.getCanvasBBox();\n    }\n\n    if (labelShape) {\n      labelShape.forEach(function (label) {\n        var labelBBox = label.getCanvasBBox();\n        bbox.x = Math.min(labelBBox.x, bbox.x);\n        bbox.y = Math.min(labelBBox.y, bbox.y);\n        bbox.minX = Math.min(labelBBox.minX, bbox.minX);\n        bbox.minY = Math.min(labelBBox.minY, bbox.minY);\n        bbox.maxX = Math.max(labelBBox.maxX, bbox.maxX);\n        bbox.maxY = Math.max(labelBBox.maxY, bbox.maxY);\n      });\n    }\n\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    return bbox;\n  };\n\n  Element.prototype.getStatesStyle = function () {\n    if (!this.statesStyle) {\n      var _a = this,\n          shapeType = _a.shapeType,\n          geometry = _a.geometry,\n          shapeFactory = _a.shapeFactory;\n\n      var stateOption = geometry.stateOption;\n      var defaultShapeType = shapeFactory.defaultShapeType;\n      var stateTheme = shapeFactory.theme[shapeType] || shapeFactory.theme[defaultShapeType];\n      this.statesStyle = deepMix({}, stateTheme, stateOption);\n    }\n\n    return this.statesStyle;\n  }; // 从主题中获取对应状态量的样式\n\n\n  Element.prototype.getStateStyle = function (stateName, shapeKey) {\n    var statesStyle = this.getStatesStyle();\n    var stateCfg = get(statesStyle, [stateName, 'style'], {});\n    var shapeStyle = stateCfg[shapeKey] || stateCfg;\n\n    if (isFunction(shapeStyle)) {\n      return shapeStyle(this);\n    }\n\n    return shapeStyle;\n  }; // 获取动画配置\n\n\n  Element.prototype.getAnimateCfg = function (animateType) {\n    var _this = this;\n\n    var animate = this.animate;\n\n    if (animate) {\n      var cfg_1 = animate[animateType];\n\n      if (cfg_1) {\n        // 增加动画的回调函数，如果外部传入了，则先执行外部，然后发射 geometry 的 animate 事件\n        return __assign(__assign({}, cfg_1), {\n          callback: function () {\n            var _a;\n\n            isFunction(cfg_1.callback) && cfg_1.callback();\n            (_a = _this.geometry) === null || _a === void 0 ? void 0 : _a.emit(GEOMETRY_LIFE_CIRCLE.AFTER_DRAW_ANIMATE);\n          }\n        });\n      }\n\n      return cfg_1;\n    }\n\n    return null;\n  }; // 绘制图形\n\n\n  Element.prototype.drawShape = function (model, isUpdate) {\n    var _a;\n\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n\n    var _b = this,\n        shapeFactory = _b.shapeFactory,\n        container = _b.container,\n        shapeType = _b.shapeType; // 自定义 shape 有可能返回空 shape\n\n\n    this.shape = shapeFactory.drawShape(shapeType, model, container);\n\n    if (this.shape) {\n      this.setShapeInfo(this.shape, model); // 存储绘图数据\n      // @ts-ignore\n\n      var name_1 = this.shape.cfg.name; // 附加 element 的 name, name 现在支持数组了，很好用了\n\n      if (!name_1) {\n        // 这个地方如果用户添加了 name, 则附加 name ，否则就添加自己的 name\n        // @ts-ignore\n        this.shape.cfg.name = ['element', this.shapeFactory.geometryType];\n      } else if (isString(name_1)) {\n        // @ts-ignore\n        this.shape.cfg.name = ['element', name_1];\n      } // 执行入场动画\n\n\n      var animateType = isUpdate ? 'enter' : 'appear';\n      var animateCfg = this.getAnimateCfg(animateType);\n\n      if (animateCfg) {\n        // 开始执行动画的生命周期\n        (_a = this.geometry) === null || _a === void 0 ? void 0 : _a.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_DRAW_ANIMATE);\n        doAnimate(this.shape, animateCfg, {\n          coordinate: shapeFactory.coordinate,\n          toAttrs: __assign({}, this.shape.attr())\n        });\n      }\n    }\n  }; // 获取虚拟 Group\n\n\n  Element.prototype.getOffscreenGroup = function () {\n    if (!this.offscreenGroup) {\n      var GroupCtor = this.container.getGroupBase(); // 获取分组的构造函数\n\n      this.offscreenGroup = new GroupCtor({});\n    }\n\n    return this.offscreenGroup;\n  }; // 设置 shape 上需要携带的信息\n\n\n  Element.prototype.setShapeInfo = function (shape, data) {\n    var _this = this; // @ts-ignore\n\n\n    shape.cfg.origin = data; // @ts-ignore\n\n    shape.cfg.element = this;\n\n    if (shape.isGroup()) {\n      var children = shape.get('children');\n      children.forEach(function (child) {\n        _this.setShapeInfo(child, data);\n      });\n    }\n  }; // 更新当前 shape 的样式\n\n\n  Element.prototype.syncShapeStyle = function (sourceShape, targetShape, states, animateCfg, index) {\n    var _this = this;\n\n    var _a;\n\n    if (states === void 0) {\n      states = [];\n    }\n\n    if (index === void 0) {\n      index = 0;\n    }\n\n    if (!sourceShape || !targetShape) {\n      return;\n    } // 所有的 shape 都需要同步 clip\n\n\n    var clip = sourceShape.get('clipShape');\n    var newClip = targetShape.get('clipShape');\n    this.syncShapeStyle(clip, newClip, states, animateCfg);\n\n    if (sourceShape.isGroup()) {\n      var children = sourceShape.get('children');\n      var newChildren = targetShape.get('children');\n\n      for (var i = 0; i < children.length; i++) {\n        this.syncShapeStyle(children[i], newChildren[i], states, animateCfg, index + i);\n      }\n    } else {\n      if (!isEmpty(states) && !isEqual(states, ['reset'])) {\n        var name_2 = sourceShape.get('name');\n\n        if (isArray(name_2)) {\n          // 会附加 element 的 name\n          name_2 = name_2[1];\n        }\n\n        each(states, function (state) {\n          // background shape 不进行状态样式设置\n          if (targetShape.get('name') !== BACKGROUND_SHAPE) {\n            var style = _this.getStateStyle(state, name_2 || index); // 如果用户没有设置 name，则默认根据索引值\n\n\n            targetShape.attr(style);\n          }\n        });\n      }\n\n      var newAttrs = getReplaceAttrs(sourceShape, targetShape);\n\n      if (this.animate) {\n        if (animateCfg) {\n          (_a = this.geometry) === null || _a === void 0 ? void 0 : _a.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_DRAW_ANIMATE); // 需要进行动画\n\n          doAnimate(sourceShape, animateCfg, {\n            coordinate: this.shapeFactory.coordinate,\n            toAttrs: newAttrs,\n            shapeModel: this.model\n          });\n        } else if (isEmpty(states)) {\n          sourceShape.stopAnimate();\n          sourceShape.animate(newAttrs, {\n            duration: 300\n          });\n        } else {\n          sourceShape.attr(newAttrs);\n        }\n      } else {\n        sourceShape.attr(newAttrs);\n      }\n    }\n  };\n\n  Element.prototype.getShapeType = function (model) {\n    var shape = get(model, 'shape');\n    return isArray(shape) ? shape[0] : shape;\n  };\n\n  return Element;\n}(Base);\n\nexport default Element;","map":{"version":3,"sources":["../../../src/geometry/element/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, each, get, isArray, isEmpty, isEqual, isFunction, isString } from '@antv/util';\n// 暂未发包\n// @ts-ignore\nimport { propagationDelegate } from '@antv/component';\nimport { doAnimate } from '../../animate';\nimport Base from '../../base';\nimport { BBox, IGroup, IShape } from '../../dependents';\nimport { AnimateOption, Datum, ShapeFactory, ShapeInfo, StateCfg } from '../../interface';\nimport { getReplaceAttrs } from '../../util/graphics';\nimport Geometry from '../base';\nimport { GEOMETRY_LIFE_CIRCLE } from '../../constant';\nimport { BACKGROUND_SHAPE } from '../shape/constant';\n\n/** Element 构造函数传入参数类型 */\ninterface ElementCfg {\n  /** 用于创建各种 shape 的工厂对象 */\n  shapeFactory: ShapeFactory;\n  /** shape 容器 */\n  container: IGroup;\n  /** 虚拟 group，用户可以不传入 */\n  offscreenGroup?: IGroup;\n  /** 是否可见 */\n  visible?: boolean;\n}\n\n/**\n * Element 图形元素。\n * 定义：在 G2 中，我们会将数据通过图形语法映射成不同的图形，比如点图，数据集中的每条数据会对应一个点，柱状图每条数据对应一个柱子，线图则是一组数据对应一条折线，Element 即一条/一组数据对应的图形元素，它代表一条数据或者一个数据集，在图形层面，它可以是单个 Shape 也可以是多个 Shape，我们称之为图形元素。\n */\nexport default class Element extends Base {\n  /** 用于创建各种 shape 的工厂对象 */\n  public shapeFactory: ShapeFactory;\n  /** shape 容器 */\n  public container: IGroup;\n  /** 最后创建的图形对象 */\n  public shape: IShape | IGroup;\n  /** shape 的动画配置 */\n  public animate: AnimateOption | boolean;\n\n  // 非构造函数属性，需要外部赋值\n  /** element 对应的 Geometry 实例 */\n  public geometry: Geometry;\n  /** 保存 shape 对应的 label */\n  public labelShape: IGroup[];\n\n  /** 绘制的 shape 类型 */\n  private shapeType: string;\n\n  /** shape 绘制需要的数据 */\n  private model: ShapeInfo;\n  /** 原始数据 */\n  private data: Datum;\n  // 存储当前开启的状态\n  private states: string[] = [];\n  private statesStyle;\n  // 虚拟 Group\n  private offscreenGroup: IGroup;\n\n  constructor(cfg: ElementCfg) {\n    super(cfg);\n\n    const { shapeFactory, container, offscreenGroup, visible = true } = cfg;\n    this.shapeFactory = shapeFactory;\n    this.container = container;\n    this.offscreenGroup = offscreenGroup;\n    this.visible = visible;\n  }\n\n  /**\n   * 绘制图形。\n   * @param model 绘制数据。\n   * @param isUpdate 可选，是否是更新发生后的绘制。\n   */\n  public draw(model: ShapeInfo, isUpdate: boolean = false) {\n    this.model = model;\n    this.data = model.data; // 存储原始数据\n    this.shapeType = this.getShapeType(model);\n\n    // 绘制图形\n    this.drawShape(model, isUpdate);\n\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  }\n\n  /**\n   * 更新图形。\n   * @param model 更新的绘制数据。\n   */\n  public update(model: ShapeInfo) {\n    const { shapeFactory, shape } = this;\n    if (!shape) {\n      return;\n    }\n\n    // 更新数据\n    this.model = model;\n    this.data = model.data;\n    this.shapeType = this.getShapeType(model);\n\n    // step 1: 更新 shape 携带的信息\n    this.setShapeInfo(shape, model);\n\n    // step 2: 使用虚拟 Group 重新绘制 shape，然后更新当前 shape\n    const offscreenGroup = this.getOffscreenGroup();\n    const newShape = shapeFactory.drawShape(this.shapeType, model, offscreenGroup);\n    // @ts-ignore\n    newShape.cfg.data = this.data;\n    // @ts-ignore\n    newShape.cfg.origin = model;\n    // label 需要使用\n    newShape.cfg.element = this;\n\n    // step 3: 同步 shape 样式\n    this.syncShapeStyle(shape, newShape, this.getStates(), this.getAnimateCfg('update'));\n  }\n\n  /**\n   * 销毁 element 实例。\n   */\n  public destroy() {\n    const { shapeFactory, shape } = this;\n\n    if (shape) {\n      const animateCfg = this.getAnimateCfg('leave');\n      if (animateCfg) {\n        // 指定了动画配置则执行销毁动画\n        doAnimate(shape, animateCfg, {\n          coordinate: shapeFactory.coordinate,\n          toAttrs: {\n            ...shape.attr(),\n          },\n        });\n      } else {\n        // 否则直接销毁\n        shape.remove(true);\n      }\n    }\n\n    // reset\n    this.states = [];\n    this.shapeFactory = undefined;\n    this.container = undefined;\n    this.shape = undefined;\n    this.animate = undefined;\n    this.geometry = undefined;\n    this.labelShape = undefined;\n    this.model = undefined;\n    this.data = undefined;\n    this.offscreenGroup = undefined;\n    this.statesStyle = undefined;\n\n    super.destroy();\n  }\n\n  /**\n   * 显示或者隐藏 element。\n   * @param visible 是否可见。\n   */\n  public changeVisible(visible: boolean) {\n    super.changeVisible(visible);\n\n    if (visible) {\n      if (this.shape) {\n        this.shape.show();\n      }\n      if (this.labelShape) {\n        this.labelShape.forEach((label: IGroup) => {\n          label.show();\n        });\n      }\n    } else {\n      if (this.shape) {\n        this.shape.hide();\n      }\n      if (this.labelShape) {\n        this.labelShape.forEach((label: IGroup) => {\n          label.hide();\n        });\n      }\n    }\n  }\n\n  /**\n   * 设置 Element 的状态。\n   *\n   * 目前 Element 开放三种状态：\n   * 1. active\n   * 2. selected\n   * 3. inactive\n   *\n   * 这三种状态相互独立，可以进行叠加。\n   *\n   * 这三种状态的样式可在 [[Theme]] 主题中或者通过 `geometry.state()` 接口进行配置。\n   *\n   * ```ts\n   * // 激活 active 状态\n   * setState('active', true);\n   * ```\n   *\n   * @param stateName 状态名\n   * @param stateStatus 是否开启状态\n   */\n  public setState(stateName: string, stateStatus: boolean) {\n    const { states, shapeFactory, model, shape, shapeType } = this;\n\n    const index = states.indexOf(stateName);\n    if (stateStatus) {\n      // 开启状态\n      if (index > -1) {\n        // 该状态已经开启，则返回\n        return;\n      }\n      states.push(stateName);\n      if (stateName === 'active' || stateName === 'selected') {\n        shape?.toFront();\n      }\n    } else {\n      if (index === -1) {\n        // 关闭状态，但是状态未设置过\n        return;\n      }\n      states.splice(index, 1);\n      if (stateName === 'active' || stateName === 'selected') {\n        shape?.toBack();\n      }\n    }\n\n    // 使用虚拟 group 重新绘制 shape，然后对这个 shape 应用状态样式后，更新当前 shape。\n    const offscreenShape = shapeFactory.drawShape(shapeType, model, this.getOffscreenGroup());\n    if (states.length) {\n      // 应用当前状态\n      this.syncShapeStyle(shape, offscreenShape, states, null);\n    } else {\n      // 如果没有状态，则需要恢复至原始状态\n      this.syncShapeStyle(shape, offscreenShape, ['reset'], null);\n    }\n\n    offscreenShape.remove(true); // 销毁，减少内存占用\n\n    const eventObject = {\n      state: stateName,\n      stateStatus,\n      element: this,\n      target: this.container,\n    };\n    this.container.emit('statechange', eventObject);\n    // @ts-ignore\n    propagationDelegate(this.shape, 'statechange', eventObject);\n  }\n\n  /**\n   * 清空状量态，恢复至初始状态。\n   */\n  public clearStates() {\n    const states = this.states;\n\n    each(states, (state) => {\n      this.setState(state, false);\n    });\n\n    this.states = [];\n  }\n\n  /**\n   * 查询当前 Element 上是否已设置 `stateName` 对应的状态。\n   * @param stateName 状态名称。\n   * @returns true 表示存在，false 表示不存在。\n   */\n  public hasState(stateName: string): boolean {\n    return this.states.includes(stateName);\n  }\n\n  /**\n   * 获取当前 Element 上所有的状态。\n   * @returns 当前 Element 上所有的状态数组。\n   */\n  public getStates(): string[] {\n    return this.states;\n  }\n\n  /**\n   * 获取 Element 对应的原始数据。\n   * @returns 原始数据。\n   */\n  public getData(): Datum {\n    return this.data;\n  }\n\n  /**\n   * 获取 Element 对应的图形绘制数据。\n   * @returns 图形绘制数据。\n   */\n  public getModel(): ShapeInfo {\n    return this.model;\n  }\n\n  /**\n   * 返回 Element 元素整体的 bbox，包含文本及文本连线（有的话）。\n   * @returns 整体包围盒。\n   */\n  public getBBox(): BBox {\n    const { shape, labelShape } = this;\n    let bbox = {\n      x: 0,\n      y: 0,\n      minX: 0,\n      minY: 0,\n      maxX: 0,\n      maxY: 0,\n      width: 0,\n      height: 0,\n    };\n    if (shape) {\n      bbox = shape.getCanvasBBox();\n    }\n    if (labelShape) {\n      labelShape.forEach((label: IGroup) => {\n        const labelBBox = label.getCanvasBBox();\n        bbox.x = Math.min(labelBBox.x, bbox.x);\n        bbox.y = Math.min(labelBBox.y, bbox.y);\n        bbox.minX = Math.min(labelBBox.minX, bbox.minX);\n        bbox.minY = Math.min(labelBBox.minY, bbox.minY);\n        bbox.maxX = Math.max(labelBBox.maxX, bbox.maxX);\n        bbox.maxY = Math.max(labelBBox.maxY, bbox.maxY);\n      });\n    }\n\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n\n    return bbox;\n  }\n\n  private getStatesStyle() {\n    if (!this.statesStyle) {\n      const { shapeType, geometry, shapeFactory } = this;\n      const stateOption = geometry.stateOption;\n      const defaultShapeType = shapeFactory.defaultShapeType;\n      const stateTheme = shapeFactory.theme[shapeType] || shapeFactory.theme[defaultShapeType];\n      this.statesStyle = deepMix({}, stateTheme, stateOption);\n    }\n\n    return this.statesStyle;\n  }\n\n  // 从主题中获取对应状态量的样式\n  private getStateStyle(stateName: string, shapeKey?: string): StateCfg {\n    const statesStyle = this.getStatesStyle();\n    const stateCfg = get(statesStyle, [stateName, 'style'], {});\n    const shapeStyle = stateCfg[shapeKey] || stateCfg;\n    if (isFunction(shapeStyle)) {\n      return shapeStyle(this);\n    }\n\n    return shapeStyle;\n  }\n\n  // 获取动画配置\n  private getAnimateCfg(animateType: string) {\n    const animate = this.animate;\n    if (animate) {\n      const cfg = animate[animateType];\n\n      if (cfg) {\n        // 增加动画的回调函数，如果外部传入了，则先执行外部，然后发射 geometry 的 animate 事件\n        return {\n          ...cfg,\n          callback: () => {\n            isFunction(cfg.callback) && cfg.callback();\n            this.geometry?.emit(GEOMETRY_LIFE_CIRCLE.AFTER_DRAW_ANIMATE);\n          },\n        };\n      }\n      return cfg;\n    }\n\n    return null;\n  }\n\n  // 绘制图形\n  private drawShape(model: ShapeInfo, isUpdate: boolean = false) {\n    const { shapeFactory, container, shapeType } = this;\n\n    // 自定义 shape 有可能返回空 shape\n    this.shape = shapeFactory.drawShape(shapeType, model, container);\n\n    if (this.shape) {\n      this.setShapeInfo(this.shape, model); // 存储绘图数据\n      // @ts-ignore\n      const name = this.shape.cfg.name;\n      // 附加 element 的 name, name 现在支持数组了，很好用了\n      if (!name) {\n        // 这个地方如果用户添加了 name, 则附加 name ，否则就添加自己的 name\n        // @ts-ignore\n        this.shape.cfg.name = ['element', this.shapeFactory.geometryType];\n      } else if (isString(name)) {\n        // @ts-ignore\n        this.shape.cfg.name = ['element', name];\n      }\n      // 执行入场动画\n      const animateType = isUpdate ? 'enter' : 'appear';\n      const animateCfg = this.getAnimateCfg(animateType);\n      if (animateCfg) {\n        // 开始执行动画的生命周期\n        this.geometry?.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_DRAW_ANIMATE);\n\n        doAnimate(this.shape, animateCfg, {\n          coordinate: shapeFactory.coordinate,\n          toAttrs: {\n            ...this.shape.attr(),\n          },\n        });\n      }\n    }\n  }\n\n  // 获取虚拟 Group\n  private getOffscreenGroup() {\n    if (!this.offscreenGroup) {\n      const GroupCtor = this.container.getGroupBase(); // 获取分组的构造函数\n      this.offscreenGroup = new GroupCtor({});\n    }\n\n    return this.offscreenGroup;\n  }\n\n  // 设置 shape 上需要携带的信息\n  private setShapeInfo(shape: IShape | IGroup, data: ShapeInfo) {\n    // @ts-ignore\n    shape.cfg.origin = data;\n    // @ts-ignore\n    shape.cfg.element = this;\n    if (shape.isGroup()) {\n      const children = shape.get('children');\n      children.forEach((child) => {\n        this.setShapeInfo(child, data);\n      });\n    }\n  }\n\n  // 更新当前 shape 的样式\n  private syncShapeStyle(\n    sourceShape: IGroup | IShape,\n    targetShape: IGroup | IShape,\n    states: string[] = [],\n    animateCfg,\n    index: number = 0\n  ) {\n    if (!sourceShape || !targetShape) {\n      return;\n    }\n    // 所有的 shape 都需要同步 clip\n    const clip = sourceShape.get('clipShape');\n    const newClip = targetShape.get('clipShape');\n\n    this.syncShapeStyle(clip, newClip, states, animateCfg);\n\n    if (sourceShape.isGroup()) {\n      const children = sourceShape.get('children');\n      const newChildren = targetShape.get('children');\n      for (let i = 0; i < children.length; i++) {\n        this.syncShapeStyle(children[i], newChildren[i], states, animateCfg, index + i);\n      }\n    } else {\n      if (!isEmpty(states) && !isEqual(states, ['reset'])) {\n        let name = sourceShape.get('name');\n        if (isArray(name)) {\n          // 会附加 element 的 name\n          name = name[1];\n        }\n\n        each(states, (state) => {\n          // background shape 不进行状态样式设置\n          if (targetShape.get('name') !== BACKGROUND_SHAPE) {\n            const style = this.getStateStyle(state, name || index); // 如果用户没有设置 name，则默认根据索引值\n            targetShape.attr(style);\n          }\n        });\n      }\n      const newAttrs = getReplaceAttrs(sourceShape as IShape, targetShape as IShape);\n\n      if (this.animate) {\n        if (animateCfg) {\n          this.geometry?.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_DRAW_ANIMATE);\n          // 需要进行动画\n          doAnimate(sourceShape, animateCfg, {\n            coordinate: this.shapeFactory.coordinate,\n            toAttrs: newAttrs,\n            shapeModel: this.model,\n          });\n        } else if (isEmpty(states)) {\n          sourceShape.stopAnimate();\n          sourceShape.animate(newAttrs, {\n            duration: 300,\n          });\n        } else {\n          sourceShape.attr(newAttrs);\n        }\n      } else {\n        sourceShape.attr(newAttrs);\n      }\n    }\n  }\n\n  private getShapeType(model: ShapeInfo) {\n    const shape = get(model, 'shape');\n    return isArray(shape) ? shape[0] : shape;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}