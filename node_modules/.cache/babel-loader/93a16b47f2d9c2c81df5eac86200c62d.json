{"ast":null,"code":"import { map, memoize, isString, each } from '@antv/util';\nvar RGB_REG = /rgba?\\(([\\s.,0-9]+)\\)/;\nvar regexLG = /^l\\s*\\(\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nvar regexRG = /^r\\s*\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nvar regexColorStop = /[\\d.]+:(#[^\\s]+|[^\\)]+\\))/gi;\n\nvar isGradientColor = function (val) {\n  return /^[r,R,L,l]{1}[\\s]*\\(/.test(val);\n}; // 创建辅助 tag 取颜色\n\n\nvar createTmp = function () {\n  var i = document.createElement('i');\n  i.title = 'Web Colour Picker';\n  i.style.display = 'none';\n  document.body.appendChild(i);\n  return i;\n}; // 获取颜色之间的插值\n\n\nvar getValue = function (start, end, percent, index) {\n  return start[index] + (end[index] - start[index]) * percent;\n}; // 数组转换成颜色\n\n\nfunction arr2rgb(arr) {\n  return \"#\" + toHex(arr[0]) + toHex(arr[1]) + toHex(arr[2]);\n} // rgb 颜色转换成数组\n\n\nvar rgb2arr = function (str) {\n  return [parseInt(str.substr(1, 2), 16), parseInt(str.substr(3, 2), 16), parseInt(str.substr(5, 2), 16)];\n}; // 将数值从 0-255 转换成16进制字符串\n\n\nvar toHex = function (value) {\n  var x16Value = Math.round(value).toString(16);\n  return x16Value.length === 1 ? \"0\" + x16Value : x16Value;\n}; // 计算颜色\n\n\nvar calColor = function (points, percent) {\n  var fixedPercent = isNaN(Number(percent)) || percent < 0 ? 0 : percent > 1 ? 1 : Number(percent);\n  var steps = points.length - 1;\n  var step = Math.floor(steps * fixedPercent);\n  var left = steps * fixedPercent - step;\n  var start = points[step];\n  var end = step === steps ? start : points[step + 1];\n  return arr2rgb([getValue(start, end, left, 0), getValue(start, end, left, 1), getValue(start, end, left, 2)]);\n}; // 用于给 toRGB 的缓存（使用 memoize 方法替换）\n// const colorCache = {};\n\n\nvar iEl;\n/**\n * 将颜色转换到 rgb 的格式\n * @param {color} color 颜色\n * @return 将颜色转换到 '#ffffff' 的格式\n */\n\nvar toRGB = function (color) {\n  // 如果已经是 rgb的格式\n  if (color[0] === '#' && color.length === 7) {\n    return color;\n  }\n\n  if (!iEl) {\n    // 防止防止在页头报错\n    iEl = createTmp();\n  }\n\n  iEl.style.color = color;\n  var rst = document.defaultView.getComputedStyle(iEl, '').getPropertyValue('color');\n  var matches = RGB_REG.exec(rst);\n  var cArray = matches[1].split(/\\s*,\\s*/).map(function (s) {\n    return Number(s);\n  });\n  rst = arr2rgb(cArray);\n  return rst;\n};\n/**\n * 获取渐变函数\n * @param colors 多个颜色\n * @return 颜色值\n */\n\n\nvar gradient = function (colors) {\n  var colorArray = isString(colors) ? colors.split('-') : colors;\n  var points = map(colorArray, function (color) {\n    return rgb2arr(color.indexOf('#') === -1 ? toRGB(color) : color);\n  }); // 返回一个函数\n\n  return function (percent) {\n    return calColor(points, percent);\n  };\n};\n\nvar toCSSGradient = function (gradientColor) {\n  if (isGradientColor(gradientColor)) {\n    var cssColor_1;\n    var steps = void 0;\n\n    if (gradientColor[0] === 'l') {\n      // 线性渐变\n      var arr = regexLG.exec(gradientColor);\n      var angle = +arr[1] + 90; // css 和 g 的渐变起始角度不同\n\n      steps = arr[2];\n      cssColor_1 = \"linear-gradient(\" + angle + \"deg, \";\n    } else if (gradientColor[0] === 'r') {\n      // 径向渐变\n      cssColor_1 = 'radial-gradient(';\n      var arr = regexRG.exec(gradientColor);\n      steps = arr[4];\n    }\n\n    var colorStops_1 = steps.match(regexColorStop);\n    each(colorStops_1, function (item, index) {\n      var itemArr = item.split(':');\n      cssColor_1 += itemArr[1] + \" \" + itemArr[0] * 100 + \"%\";\n\n      if (index !== colorStops_1.length - 1) {\n        cssColor_1 += ', ';\n      }\n    });\n    cssColor_1 += ')';\n    return cssColor_1;\n  }\n\n  return gradientColor;\n};\n\nexport default {\n  rgb2arr: rgb2arr,\n  gradient: gradient,\n  toRGB: memoize(toRGB),\n  toCSSGradient: toCSSGradient\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"AAAA,SAAS,GAAT,EAAc,OAAd,EAAuB,QAAvB,EAAiC,IAAjC,QAA6C,YAA7C;AAEA,IAAM,OAAO,GAAG,uBAAhB;AACA,IAAM,OAAO,GAAG,iCAAhB;AACA,IAAM,OAAO,GAAG,+DAAhB;AACA,IAAM,cAAc,GAAG,6BAAvB;;AAEA,IAAM,eAAe,GAAG,UAAC,GAAD,EAAI;AAAK,SAAA,uBAAuB,IAAvB,CAAA,GAAA,CAAA;AAAgC,CAAjE,C,CAEA;;;AACA,IAAM,SAAS,GAAG,YAAA;AAChB,MAAM,CAAC,GAAG,QAAQ,CAAC,aAAT,CAAuB,GAAvB,CAAV;AACA,EAAA,CAAC,CAAC,KAAF,GAAU,mBAAV;AACA,EAAA,CAAC,CAAC,KAAF,CAAQ,OAAR,GAAkB,MAAlB;AACA,EAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,CAA1B;AACA,SAAO,CAAP;AACD,CAND,C,CAQA;;;AACA,IAAM,QAAQ,GAAG,UAAC,KAAD,EAAkB,GAAlB,EAAiC,OAAjC,EAAkD,KAAlD,EAA+D;AAC9E,SAAO,KAAK,CAAC,KAAD,CAAL,GAAe,CAAC,GAAG,CAAC,KAAD,CAAH,GAAa,KAAK,CAAC,KAAD,CAAnB,IAA8B,OAApD;AACD,CAFD,C,CAIA;;;AACA,SAAS,OAAT,CAAiB,GAAjB,EAA8B;AAC5B,SAAO,MAAI,KAAK,CAAC,GAAG,CAAC,CAAD,CAAJ,CAAT,GAAoB,KAAK,CAAC,GAAG,CAAC,CAAD,CAAJ,CAAzB,GAAoC,KAAK,CAAC,GAAG,CAAC,CAAD,CAAJ,CAAhD;AACD,C,CAED;;;AACA,IAAM,OAAO,GAAG,UAAC,GAAD,EAAY;AAC1B,SAAO,CACL,QAAQ,CAAC,GAAG,CAAC,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAD,EAAmB,EAAnB,CADH,EAEL,QAAQ,CAAC,GAAG,CAAC,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAD,EAAmB,EAAnB,CAFH,EAGL,QAAQ,CAAC,GAAG,CAAC,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAD,EAAmB,EAAnB,CAHH,CAAP;AAKD,CAND,C,CAQA;;;AACA,IAAM,KAAK,GAAG,UAAC,KAAD,EAAc;AAC1B,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,KAAX,EAAkB,QAAlB,CAA2B,EAA3B,CAAjB;AAEA,SAAO,QAAQ,CAAC,MAAT,KAAoB,CAApB,GAAwB,MAAI,QAA5B,GAAyC,QAAhD;AACD,CAJD,C,CAMA;;;AACA,IAAM,QAAQ,GAAG,UAAC,MAAD,EAAqB,OAArB,EAAoC;AACnD,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,OAAD,CAAP,CAAL,IAA0B,OAAO,GAAG,CAApC,GAAwC,CAAxC,GACnB,OAAO,GAAG,CAAV,GAAc,CAAd,GACE,MAAM,CAAC,OAAD,CAFV;AAIA,MAAM,KAAK,GAAG,MAAM,CAAC,MAAP,GAAgB,CAA9B;AAEA,MAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,YAAnB,CAAb;AAEA,MAAM,IAAI,GAAG,KAAK,GAAG,YAAR,GAAuB,IAApC;AAEA,MAAM,KAAK,GAAG,MAAM,CAAC,IAAD,CAApB;AAEA,MAAM,GAAG,GAAG,IAAI,KAAK,KAAT,GAAiB,KAAjB,GAAyB,MAAM,CAAC,IAAI,GAAG,CAAR,CAA3C;AAEA,SAAO,OAAO,CAAC,CACb,QAAQ,CAAC,KAAD,EAAQ,GAAR,EAAa,IAAb,EAAmB,CAAnB,CADK,EAEb,QAAQ,CAAC,KAAD,EAAQ,GAAR,EAAa,IAAb,EAAmB,CAAnB,CAFK,EAGb,QAAQ,CAAC,KAAD,EAAQ,GAAR,EAAa,IAAb,EAAmB,CAAnB,CAHK,CAAD,CAAd;AAKD,CApBD,C,CAsBA;AACA;;;AACA,IAAI,GAAJ;AAEA;;;;AAIG;;AACH,IAAM,KAAK,GAAG,UAAC,KAAD,EAAc;AAC1B;AACA,MAAI,KAAK,CAAC,CAAD,CAAL,KAAa,GAAb,IAAoB,KAAK,CAAC,MAAN,KAAiB,CAAzC,EAA4C;AAC1C,WAAO,KAAP;AACD;;AAED,MAAI,CAAC,GAAL,EAAU;AACR;AACA,IAAA,GAAG,GAAG,SAAS,EAAf;AACD;;AAED,EAAA,GAAG,CAAC,KAAJ,CAAU,KAAV,GAAkB,KAAlB;AAEA,MAAI,GAAG,GAAG,QAAQ,CAAC,WAAT,CAAqB,gBAArB,CAAsC,GAAtC,EAA2C,EAA3C,EAA+C,gBAA/C,CAAgE,OAAhE,CAAV;AAEA,MAAM,OAAO,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAhB;AACA,MAAM,MAAM,GAAa,OAAO,CAAC,CAAD,CAAP,CAAW,KAAX,CAAiB,SAAjB,EAA4B,GAA5B,CAAgC,UAAC,CAAD,EAAE;AAAK,WAAA,MAAM,CAAN,CAAM,CAAN;AAAS,GAAhD,CAAzB;AAEA,EAAA,GAAG,GAAG,OAAO,CAAC,MAAD,CAAb;AAEA,SAAO,GAAP;AACD,CArBD;AAuBA;;;;AAIG;;;AACH,IAAM,QAAQ,GAAG,UAAC,MAAD,EAA0B;AACzC,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAD,CAAR,GAAoB,MAAiB,CAAC,KAAlB,CAAwB,GAAxB,CAApB,GAAmD,MAAtE;AAEA,MAAM,MAAM,GAAG,GAAG,CAAC,UAAD,EAAa,UAAC,KAAD,EAAM;AACnC,WAAO,OAAO,CAAC,KAAK,CAAC,OAAN,CAAc,GAAd,MAAuB,CAAC,CAAxB,GAA4B,KAAK,CAAC,KAAD,CAAjC,GAA2C,KAA5C,CAAd;AACD,GAFiB,CAAlB,CAHyC,CAOzC;;AACA,SAAO,UAAC,OAAD,EAAgB;AACrB,WAAO,QAAQ,CAAC,MAAD,EAAS,OAAT,CAAf;AACD,GAFD;AAGD,CAXD;;AAaA,IAAM,aAAa,GAAG,UAAC,aAAD,EAAc;AAClC,MAAI,eAAe,CAAC,aAAD,CAAnB,EAAoC;AAClC,QAAI,UAAJ;AACA,QAAI,KAAK,GAAA,KAAA,CAAT;;AACA,QAAI,aAAa,CAAC,CAAD,CAAb,KAAqB,GAAzB,EAA8B;AAC5B;AACA,UAAM,GAAG,GAAG,OAAO,CAAC,IAAR,CAAa,aAAb,CAAZ;AACA,UAAM,KAAK,GAAG,CAAC,GAAG,CAAC,CAAD,CAAJ,GAAU,EAAxB,CAH4B,CAGA;;AAC5B,MAAA,KAAK,GAAG,GAAG,CAAC,CAAD,CAAX;AAEA,MAAA,UAAQ,GAAG,qBAAmB,KAAnB,GAAwB,OAAnC;AACD,KAPD,MAOO,IAAI,aAAa,CAAC,CAAD,CAAb,KAAqB,GAAzB,EAA8B;AACnC;AACA,MAAA,UAAQ,GAAG,kBAAX;AACA,UAAM,GAAG,GAAG,OAAO,CAAC,IAAR,CAAa,aAAb,CAAZ;AACA,MAAA,KAAK,GAAG,GAAG,CAAC,CAAD,CAAX;AACD;;AAED,QAAM,YAAU,GAAa,KAAK,CAAC,KAAN,CAAY,cAAZ,CAA7B;AACA,IAAA,IAAI,CAAC,YAAD,EAAa,UAAC,IAAD,EAAO,KAAP,EAAY;AAC3B,UAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAhB;AACA,MAAA,UAAQ,IAAO,OAAO,CAAC,CAAD,CAAP,GAAU,GAAV,GAAc,OAAO,CAAC,CAAD,CAAP,GAAa,GAA3B,GAA8B,GAA7C;;AACA,UAAI,KAAK,KAAM,YAAU,CAAC,MAAX,GAAoB,CAAnC,EAAuC;AACrC,QAAA,UAAQ,IAAI,IAAZ;AACD;AACF,KANG,CAAJ;AAQA,IAAA,UAAQ,IAAI,GAAZ;AAEA,WAAO,UAAP;AACD;;AAED,SAAO,aAAP;AACD,CAjCD;;AAmCA,eAAe;AACb,EAAA,OAAO,EAAA,OADM;AAEb,EAAA,QAAQ,EAAA,QAFK;AAGb,EAAA,KAAK,EAAE,OAAO,CAAC,KAAD,CAHD;AAIb,EAAA,aAAa,EAAA;AAJA,CAAf","sourceRoot":"","sourcesContent":["import { map, memoize, isString, each } from '@antv/util';\nvar RGB_REG = /rgba?\\(([\\s.,0-9]+)\\)/;\nvar regexLG = /^l\\s*\\(\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nvar regexRG = /^r\\s*\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*\\)\\s*(.*)/i;\nvar regexColorStop = /[\\d.]+:(#[^\\s]+|[^\\)]+\\))/gi;\nvar isGradientColor = function (val) { return /^[r,R,L,l]{1}[\\s]*\\(/.test(val); };\n// 创建辅助 tag 取颜色\nvar createTmp = function () {\n    var i = document.createElement('i');\n    i.title = 'Web Colour Picker';\n    i.style.display = 'none';\n    document.body.appendChild(i);\n    return i;\n};\n// 获取颜色之间的插值\nvar getValue = function (start, end, percent, index) {\n    return start[index] + (end[index] - start[index]) * percent;\n};\n// 数组转换成颜色\nfunction arr2rgb(arr) {\n    return \"#\" + toHex(arr[0]) + toHex(arr[1]) + toHex(arr[2]);\n}\n// rgb 颜色转换成数组\nvar rgb2arr = function (str) {\n    return [\n        parseInt(str.substr(1, 2), 16),\n        parseInt(str.substr(3, 2), 16),\n        parseInt(str.substr(5, 2), 16),\n    ];\n};\n// 将数值从 0-255 转换成16进制字符串\nvar toHex = function (value) {\n    var x16Value = Math.round(value).toString(16);\n    return x16Value.length === 1 ? \"0\" + x16Value : x16Value;\n};\n// 计算颜色\nvar calColor = function (points, percent) {\n    var fixedPercent = isNaN(Number(percent)) || percent < 0 ? 0 :\n        percent > 1 ? 1 :\n            Number(percent);\n    var steps = points.length - 1;\n    var step = Math.floor(steps * fixedPercent);\n    var left = steps * fixedPercent - step;\n    var start = points[step];\n    var end = step === steps ? start : points[step + 1];\n    return arr2rgb([\n        getValue(start, end, left, 0),\n        getValue(start, end, left, 1),\n        getValue(start, end, left, 2),\n    ]);\n};\n// 用于给 toRGB 的缓存（使用 memoize 方法替换）\n// const colorCache = {};\nvar iEl;\n/**\n * 将颜色转换到 rgb 的格式\n * @param {color} color 颜色\n * @return 将颜色转换到 '#ffffff' 的格式\n */\nvar toRGB = function (color) {\n    // 如果已经是 rgb的格式\n    if (color[0] === '#' && color.length === 7) {\n        return color;\n    }\n    if (!iEl) {\n        // 防止防止在页头报错\n        iEl = createTmp();\n    }\n    iEl.style.color = color;\n    var rst = document.defaultView.getComputedStyle(iEl, '').getPropertyValue('color');\n    var matches = RGB_REG.exec(rst);\n    var cArray = matches[1].split(/\\s*,\\s*/).map(function (s) { return Number(s); });\n    rst = arr2rgb(cArray);\n    return rst;\n};\n/**\n * 获取渐变函数\n * @param colors 多个颜色\n * @return 颜色值\n */\nvar gradient = function (colors) {\n    var colorArray = isString(colors) ? colors.split('-') : colors;\n    var points = map(colorArray, function (color) {\n        return rgb2arr(color.indexOf('#') === -1 ? toRGB(color) : color);\n    });\n    // 返回一个函数\n    return function (percent) {\n        return calColor(points, percent);\n    };\n};\nvar toCSSGradient = function (gradientColor) {\n    if (isGradientColor(gradientColor)) {\n        var cssColor_1;\n        var steps = void 0;\n        if (gradientColor[0] === 'l') {\n            // 线性渐变\n            var arr = regexLG.exec(gradientColor);\n            var angle = +arr[1] + 90; // css 和 g 的渐变起始角度不同\n            steps = arr[2];\n            cssColor_1 = \"linear-gradient(\" + angle + \"deg, \";\n        }\n        else if (gradientColor[0] === 'r') {\n            // 径向渐变\n            cssColor_1 = 'radial-gradient(';\n            var arr = regexRG.exec(gradientColor);\n            steps = arr[4];\n        }\n        var colorStops_1 = steps.match(regexColorStop);\n        each(colorStops_1, function (item, index) {\n            var itemArr = item.split(':');\n            cssColor_1 += itemArr[1] + \" \" + itemArr[0] * 100 + \"%\";\n            if (index !== (colorStops_1.length - 1)) {\n                cssColor_1 += ', ';\n            }\n        });\n        cssColor_1 += ')';\n        return cssColor_1;\n    }\n    return gradientColor;\n};\nexport default {\n    rgb2arr: rgb2arr,\n    gradient: gradient,\n    toRGB: memoize(toRGB),\n    toCSSGradient: toCSSGradient,\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}