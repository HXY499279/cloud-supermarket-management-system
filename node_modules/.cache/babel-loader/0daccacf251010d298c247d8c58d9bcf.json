{"ast":null,"code":"import { ext } from '@antv/matrix-util';\nvar transform = ext.transform;\nexport { transform };\n/**\n * 对元素进行平移操作。\n * @param element 进行变换的元素\n * @param x x 方向位移\n * @param y y 方向位移\n */\n\nexport function translate(element, x, y) {\n  var matrix = transform(element.getMatrix(), [['t', x, y]]);\n  element.setMatrix(matrix);\n}\n/**\n * 获取元素旋转矩阵 (以元素的左上角为旋转点)\n * @param element 进行变换的元素\n * @param rotateRadian 旋转弧度\n */\n\nexport function getRotateMatrix(element, rotateRadian) {\n  var _a = element.attr(),\n      x = _a.x,\n      y = _a.y;\n\n  var matrix = transform(element.getMatrix(), [['t', -x, -y], ['r', rotateRadian], ['t', x, y]]);\n  return matrix;\n}\n/**\n * 对元素进行旋转操作。\n * @param element 进行变换的元素\n * @param rotateRadian 旋转弧度\n */\n\nexport function rotate(element, rotateRadian) {\n  var matrix = getRotateMatrix(element, rotateRadian);\n  element.setMatrix(matrix);\n}\n/**\n * 获取元矩阵。\n * @returns identity matrix\n */\n\nexport function getIdentityMatrix() {\n  return [1, 0, 0, 0, 1, 0, 0, 0, 1];\n}\n/**\n * 围绕图形中心点进行缩放\n * @param element 进行缩放的图形元素\n * @param ratio 缩放比例\n */\n\nexport function zoom(element, ratio) {\n  var bbox = element.getBBox();\n  var x = (bbox.minX + bbox.maxX) / 2;\n  var y = (bbox.minY + bbox.maxY) / 2;\n  element.applyToMatrix([x, y, 1]);\n  var matrix = transform(element.getMatrix(), [['t', -x, -y], ['s', ratio, ratio], ['t', x, y]]);\n  element.setMatrix(matrix);\n}","map":{"version":3,"sources":["../../src/util/transform.ts"],"names":[],"mappings":"AAAA,SAAS,GAAT,QAAoB,mBAApB;AAGA,IAAM,SAAS,GAAgD,GAAG,CAAC,SAAnE;AAEA,SAAS,SAAT;AAEA;;;;;AAKG;;AACH,OAAM,SAAU,SAAV,CAAoB,OAApB,EAA8C,CAA9C,EAAyD,CAAzD,EAAkE;AACtE,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,SAAR,EAAD,EAAsB,CAAC,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,CAAD,CAAtB,CAAxB;AACA,EAAA,OAAO,CAAC,SAAR,CAAkB,MAAlB;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,eAAV,CAA0B,OAA1B,EAA6C,YAA7C,EAAiE;AAC/D,MAAA,EAAA,GAAW,OAAO,CAAC,IAAR,EAAX;AAAA,MAAE,CAAC,GAAA,EAAA,CAAA,CAAH;AAAA,MAAK,CAAC,GAAA,EAAA,CAAA,CAAN;;AACN,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,SAAR,EAAD,EAAsB,CAC5C,CAAC,GAAD,EAAM,CAAC,CAAP,EAAU,CAAC,CAAX,CAD4C,EAE5C,CAAC,GAAD,EAAM,YAAN,CAF4C,EAG5C,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,CAH4C,CAAtB,CAAxB;AAKA,SAAO,MAAP;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,MAAV,CAAiB,OAAjB,EAA2C,YAA3C,EAA+D;AACnE,MAAM,MAAM,GAAG,eAAe,CAAC,OAAD,EAAU,YAAV,CAA9B;AACA,EAAA,OAAO,CAAC,SAAR,CAAkB,MAAlB;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,iBAAV,GAA2B;AAC/B,SAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAP;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,IAAV,CAAe,OAAf,EAAyC,KAAzC,EAAsD;AAC1D,MAAM,IAAI,GAAG,OAAO,CAAC,OAAR,EAAb;AACA,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAAlB,IAA0B,CAApC;AACA,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAAlB,IAA0B,CAApC;AACA,EAAA,OAAO,CAAC,aAAR,CAAsB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAtB;AAEA,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,SAAR,EAAD,EAAsB,CAC5C,CAAC,GAAD,EAAM,CAAC,CAAP,EAAU,CAAC,CAAX,CAD4C,EAE5C,CAAC,GAAD,EAAM,KAAN,EAAa,KAAb,CAF4C,EAG5C,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,CAH4C,CAAtB,CAAxB;AAKA,EAAA,OAAO,CAAC,SAAR,CAAkB,MAAlB;AACD","sourcesContent":["import { ext } from '@antv/matrix-util';\nimport { IElement, IGroup, IShape } from '../dependents';\n\nconst transform: (m: number[], actions: any[][]) => number[] = ext.transform;\n\nexport { transform };\n\n/**\n * 对元素进行平移操作。\n * @param element 进行变换的元素\n * @param x x 方向位移\n * @param y y 方向位移\n */\nexport function translate(element: IGroup | IShape, x: number, y: number) {\n  const matrix = transform(element.getMatrix(), [['t', x, y]]);\n  element.setMatrix(matrix);\n}\n\n/**\n * 获取元素旋转矩阵 (以元素的左上角为旋转点)\n * @param element 进行变换的元素\n * @param rotateRadian 旋转弧度\n */\nexport function getRotateMatrix(element: IElement, rotateRadian: number) {\n  const { x, y } = element.attr();\n  const matrix = transform(element.getMatrix(), [\n    ['t', -x, -y],\n    ['r', rotateRadian],\n    ['t', x, y],\n  ]);\n  return matrix;\n}\n\n/**\n * 对元素进行旋转操作。\n * @param element 进行变换的元素\n * @param rotateRadian 旋转弧度\n */\nexport function rotate(element: IGroup | IShape, rotateRadian: number) {\n  const matrix = getRotateMatrix(element, rotateRadian);\n  element.setMatrix(matrix);\n}\n\n/**\n * 获取元矩阵。\n * @returns identity matrix\n */\nexport function getIdentityMatrix(): number[] {\n  return [1, 0, 0, 0, 1, 0, 0, 0, 1];\n}\n\n/**\n * 围绕图形中心点进行缩放\n * @param element 进行缩放的图形元素\n * @param ratio 缩放比例\n */\nexport function zoom(element: IGroup | IShape, ratio: number) {\n  const bbox = element.getBBox();\n  const x = (bbox.minX + bbox.maxX) / 2;\n  const y = (bbox.minY + bbox.maxY) / 2;\n  element.applyToMatrix([x, y, 1]);\n\n  const matrix = transform(element.getMatrix(), [\n    ['t', -x, -y],\n    ['s', ratio, ratio],\n    ['t', x, y],\n  ]);\n  element.setMatrix(matrix);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}