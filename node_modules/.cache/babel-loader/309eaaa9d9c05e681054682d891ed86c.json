{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, get, isObject, size, clamp, isNil, noop, throttle, isEmpty, valuesOfKey } from '@antv/util';\nimport { COMPONENT_TYPE, DIRECTION, LAYER, VIEW_LIFE_CIRCLE } from '../../constant';\nimport { Slider as SliderComponent } from '../../dependents';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { isBetween } from '../../util/helper';\nimport { Controller } from './base';\n/**\n * @ignore\n * slider Controller\n */\n\nvar Slider =\n/** @class */\nfunction (_super) {\n  __extends(Slider, _super);\n\n  function Slider(view) {\n    var _this = _super.call(this, view) || this;\n\n    _this.onChangeFn = noop;\n    /**\n     * 清除测量\n     */\n\n    _this.resetMeasure = function () {\n      _this.clear();\n    };\n    /**\n     * 滑块滑动的时候出发\n     * @param v\n     */\n\n\n    _this.onValueChange = function (v) {\n      var min = v[0],\n          max = v[1];\n      _this.start = min;\n      _this.end = max;\n\n      _this.changeViewData(min, max);\n    };\n\n    _this.container = _this.view.getLayer(LAYER.FORE).addGroup();\n    _this.onChangeFn = throttle(_this.onValueChange, 20, {\n      leading: true\n    });\n    _this.width = 0;\n\n    _this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, _this.resetMeasure);\n\n    _this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, _this.resetMeasure);\n\n    return _this;\n  }\n\n  Object.defineProperty(Slider.prototype, \"name\", {\n    get: function () {\n      return 'slider';\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Slider.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, this.resetMeasure);\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, this.resetMeasure);\n  };\n  /**\n   * 初始化\n   */\n\n\n  Slider.prototype.init = function () {};\n  /**\n   * 渲染\n   */\n\n\n  Slider.prototype.render = function () {\n    this.option = this.view.getOptions().slider;\n\n    var _a = this.getSliderCfg(),\n        start = _a.start,\n        end = _a.end;\n\n    if (isNil(this.start)) {\n      this.start = start;\n      this.end = end;\n    }\n\n    var viewData = this.view.getOptions().data;\n\n    if (this.option && !isEmpty(viewData)) {\n      if (this.slider) {\n        // exist, update\n        this.slider = this.updateSlider();\n      } else {\n        // not exist, create\n        this.slider = this.createSlider(); // 监听事件，绑定交互\n\n        this.slider.component.on('sliderchange', this.onChangeFn);\n      }\n    } else {\n      if (this.slider) {\n        // exist, destroy\n        this.slider.component.destroy();\n        this.slider = undefined;\n      } else {// do nothing\n      }\n    }\n  };\n  /**\n   * 布局\n   */\n\n\n  Slider.prototype.layout = function () {\n    var _this = this;\n\n    if (this.option && !this.width) {\n      this.measureSlider();\n      setTimeout(function () {\n        // 初始状态下的 view 数据过滤\n        if (!_this.view.destroyed) {\n          _this.changeViewData(_this.start, _this.end);\n        }\n      }, 0);\n    }\n\n    if (this.slider) {\n      var width = this.view.coordinateBBox.width; // 获取组件的 layout bbox\n\n      var padding = this.slider.component.get('padding');\n      var paddingTop = padding[0],\n          paddingRight = padding[1],\n          paddingBottom = padding[2],\n          paddingLeft = padding[3];\n      var bboxObject = this.slider.component.getLayoutBBox();\n      var bbox = new BBox(bboxObject.x, bboxObject.y, Math.min(bboxObject.width, width), bboxObject.height).expand(padding);\n\n      var _a = this.getMinMaxText(this.start, this.end),\n          minText = _a.minText,\n          maxText = _a.maxText;\n\n      var _b = directionToPosition(this.view.viewBBox, bbox, DIRECTION.BOTTOM),\n          x1 = _b[0],\n          y1 = _b[1];\n\n      var _c = directionToPosition(this.view.coordinateBBox, bbox, DIRECTION.BOTTOM),\n          x2 = _c[0],\n          y2 = _c[1]; // 默认放在 bottom\n\n\n      this.slider.component.update(__assign(__assign({}, this.getSliderCfg()), {\n        x: x2 + paddingLeft,\n        y: y1 + paddingTop,\n        width: this.width,\n        start: this.start,\n        end: this.end,\n        minText: minText,\n        maxText: maxText\n      }));\n      this.view.viewBBox = this.view.viewBBox.cut(bbox, DIRECTION.BOTTOM);\n    }\n  };\n  /**\n   * 更新\n   */\n\n\n  Slider.prototype.update = function () {\n    // 逻辑和 render 保持一致\n    this.render();\n  };\n  /**\n   * 创建 slider 组件\n   */\n\n\n  Slider.prototype.createSlider = function () {\n    var cfg = this.getSliderCfg(); // 添加 slider 组件\n\n    var component = new SliderComponent(__assign({\n      container: this.container\n    }, cfg));\n    component.init();\n    return {\n      component: component,\n      layer: LAYER.FORE,\n      direction: DIRECTION.BOTTOM,\n      type: COMPONENT_TYPE.SLIDER\n    };\n  };\n  /**\n   * 更新配置\n   */\n\n\n  Slider.prototype.updateSlider = function () {\n    var cfg = this.getSliderCfg();\n\n    if (this.width) {\n      var _a = this.getMinMaxText(this.start, this.end),\n          minText = _a.minText,\n          maxText = _a.maxText;\n\n      cfg = __assign(__assign({}, cfg), {\n        width: this.width,\n        start: this.start,\n        end: this.end,\n        minText: minText,\n        maxText: maxText\n      });\n    }\n\n    this.slider.component.update(cfg);\n    return this.slider;\n  };\n  /**\n   * 进行测量操作\n   */\n\n\n  Slider.prototype.measureSlider = function () {\n    var width = this.getSliderCfg().width;\n    this.width = width;\n  };\n  /**\n   * 生成 slider 配置\n   */\n\n\n  Slider.prototype.getSliderCfg = function () {\n    var cfg = {\n      height: 16,\n      start: 0,\n      end: 1,\n      minText: '',\n      maxText: '',\n      x: 0,\n      y: 0,\n      width: this.view.coordinateBBox.width\n    };\n\n    if (isObject(this.option)) {\n      // 用户配置的数据，优先级更高\n      var trendCfg = __assign({\n        data: this.getData()\n      }, get(this.option, 'trendCfg', {})); // 因为有样式，所以深层覆盖\n\n\n      cfg = deepMix({}, cfg, this.getThemeOptions(), this.option); // trendCfg 因为有数据数组，所以使用浅替换\n\n      cfg = __assign(__assign({}, cfg), {\n        trendCfg: trendCfg\n      });\n    }\n\n    cfg.start = clamp(Math.min(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n    cfg.end = clamp(Math.max(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n    return cfg;\n  };\n  /**\n   * 从 view 中获取数据，缩略轴使用全量的数据\n   */\n\n\n  Slider.prototype.getData = function () {\n    var data = this.view.getOptions().data;\n    var yScale = this.view.getYScales()[0];\n    var groupScales = this.view.getGroupScales();\n\n    if (groupScales.length) {\n      var _a = groupScales[0],\n          field_1 = _a.field,\n          ticks_1 = _a.ticks;\n      return data.reduce(function (pre, cur) {\n        if (cur[field_1] === ticks_1[0]) {\n          pre.push(cur[yScale.field]);\n        }\n\n        return pre;\n      }, []);\n    }\n\n    return data.map(function (datum) {\n      return datum[yScale.field] || 0;\n    });\n  };\n  /**\n   * 获取 slider 的主题配置\n   */\n\n\n  Slider.prototype.getThemeOptions = function () {\n    var theme = this.view.getTheme();\n    return get(theme, ['components', 'slider', 'common'], {});\n  };\n  /**\n   * 根据 start/end 和当前数据计算出当前的 minText/maxText\n   * @param min\n   * @param max\n   */\n\n\n  Slider.prototype.getMinMaxText = function (min, max) {\n    var data = this.view.getOptions().data;\n    var xScale = this.view.getXScale();\n    var isHorizontal = true;\n    var values = valuesOfKey(data, xScale.field);\n    var xValues = isHorizontal ? values : values.reverse();\n    var dataSize = size(data);\n\n    if (!xScale || !dataSize) {\n      return {}; // fix: 需要兼容，否则调用方直接取值会报错\n    }\n\n    var xTickCount = size(xValues);\n    var minIndex = Math.floor(min * (xTickCount - 1));\n    var maxIndex = Math.floor(max * (xTickCount - 1));\n    var minText = get(xValues, [minIndex]);\n    var maxText = get(xValues, [maxIndex]);\n    var formatter = this.getSliderCfg().formatter;\n\n    if (formatter) {\n      minText = formatter(minText, data[minIndex], minIndex);\n      maxText = formatter(maxText, data[maxIndex], maxIndex);\n    }\n\n    return {\n      minText: minText,\n      maxText: maxText\n    };\n  };\n  /**\n   * 更新 view 过滤数据\n   * @param min\n   * @param max\n   */\n\n\n  Slider.prototype.changeViewData = function (min, max) {\n    var data = this.view.getOptions().data;\n    var xScale = this.view.getXScale();\n    var dataSize = size(data);\n\n    if (!xScale || !dataSize) {\n      return;\n    }\n\n    var isHorizontal = true;\n    var values = valuesOfKey(data, xScale.field);\n    var xValues = isHorizontal ? values : values.reverse();\n    var xTickCount = size(xValues);\n    var minIndex = Math.floor(min * (xTickCount - 1));\n    var maxIndex = Math.floor(max * (xTickCount - 1)); // 增加 x 轴的过滤器\n\n    this.view.filter(xScale.field, function (value, datum) {\n      var idx = xValues.indexOf(value);\n      return idx > -1 ? isBetween(idx, minIndex, maxIndex) : true;\n    });\n    this.view.render(true);\n  };\n  /**\n   * 覆写父类方法\n   */\n\n\n  Slider.prototype.getComponents = function () {\n    return this.slider ? [this.slider] : [];\n  };\n  /**\n   * 覆盖父类\n   */\n\n\n  Slider.prototype.clear = function () {\n    if (this.slider) {\n      this.slider.component.destroy();\n      this.slider = undefined;\n    }\n\n    this.width = 0;\n    this.start = undefined;\n    this.end = undefined;\n  };\n\n  return Slider;\n}(Controller);\n\nexport default Slider;","map":{"version":3,"sources":["../../../src/chart/controller/slider.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, get, isObject, size, clamp, isNil, noop, throttle, isEmpty, valuesOfKey } from '@antv/util';\nimport { COMPONENT_TYPE, DIRECTION, LAYER, VIEW_LIFE_CIRCLE } from '../../constant';\nimport { IGroup, Slider as SliderComponent } from '../../dependents';\nimport { ComponentOption, Datum, Padding } from '../../interface';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { isBetween } from '../../util/helper';\nimport { Writeable } from '../../util/types';\nimport View from '../view';\nimport { Controller } from './base';\nimport { SliderOption, SliderCfg } from '../../interface';\n\n/**\n * @ignore\n * slider Controller\n */\nexport default class Slider extends Controller<SliderOption> {\n  private slider: ComponentOption;\n  private container: IGroup;\n\n  private width: number;\n  private start: number;\n  private end: number;\n\n  private onChangeFn: (evt: {}) => void = noop;\n\n  constructor(view: View) {\n    super(view);\n\n    this.container = this.view.getLayer(LAYER.FORE).addGroup();\n    this.onChangeFn = throttle(this.onValueChange, 20, {\n      leading: true,\n    }) as (evt: {}) => void;\n\n    this.width = 0;\n    this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, this.resetMeasure);\n    this.view.on(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, this.resetMeasure);\n  }\n\n  get name(): string {\n    return 'slider';\n  }\n\n  public destroy() {\n    super.destroy();\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, this.resetMeasure);\n    this.view.off(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_SIZE, this.resetMeasure);\n  }\n\n  /**\n   * 初始化\n   */\n  public init() {}\n\n  /**\n   * 渲染\n   */\n  public render() {\n    this.option = this.view.getOptions().slider;\n    const { start, end } = this.getSliderCfg();\n    if (isNil(this.start)) {\n      this.start = start;\n      this.end = end;\n    }\n\n    const { data: viewData } = this.view.getOptions();\n    if (this.option && !isEmpty(viewData)) {\n      if (this.slider) {\n        // exist, update\n        this.slider = this.updateSlider();\n      } else {\n        // not exist, create\n        this.slider = this.createSlider();\n        // 监听事件，绑定交互\n        this.slider.component.on('sliderchange', this.onChangeFn);\n      }\n    } else {\n      if (this.slider) {\n        // exist, destroy\n        this.slider.component.destroy();\n        this.slider = undefined;\n      } else {\n        // do nothing\n      }\n    }\n  }\n\n  /**\n   * 布局\n   */\n  public layout() {\n    if (this.option && !this.width) {\n      this.measureSlider();\n      setTimeout(() => {\n        // 初始状态下的 view 数据过滤\n        if (!this.view.destroyed) {\n          this.changeViewData(this.start, this.end);\n        }\n      }, 0);\n    }\n    if (this.slider) {\n      const width = this.view.coordinateBBox.width;\n      // 获取组件的 layout bbox\n      const padding: Padding = this.slider.component.get('padding') as Padding;\n      const [paddingTop, paddingRight, paddingBottom, paddingLeft] = padding;\n      const bboxObject = this.slider.component.getLayoutBBox();\n      const bbox = new BBox(bboxObject.x, bboxObject.y, Math.min(bboxObject.width, width), bboxObject.height).expand(\n        padding\n      );\n      const { minText, maxText } = this.getMinMaxText(this.start, this.end);\n\n      const [x1, y1] = directionToPosition(this.view.viewBBox, bbox, DIRECTION.BOTTOM);\n      const [x2, y2] = directionToPosition(this.view.coordinateBBox, bbox, DIRECTION.BOTTOM);\n\n      // 默认放在 bottom\n      this.slider.component.update({\n        ...this.getSliderCfg(),\n        x: x2 + paddingLeft,\n        y: y1 + paddingTop,\n        width: this.width,\n        start: this.start,\n        end: this.end,\n        minText,\n        maxText,\n      });\n\n      this.view.viewBBox = this.view.viewBBox.cut(bbox, DIRECTION.BOTTOM);\n    }\n  }\n\n  /**\n   * 更新\n   */\n  public update() {\n    // 逻辑和 render 保持一致\n    this.render();\n  }\n\n  /**\n   * 创建 slider 组件\n   */\n  private createSlider(): ComponentOption {\n    const cfg: any = this.getSliderCfg();\n    // 添加 slider 组件\n    const component = new SliderComponent({\n      container: this.container,\n      ...cfg,\n    });\n\n    component.init();\n\n    return {\n      component,\n      layer: LAYER.FORE,\n      direction: DIRECTION.BOTTOM,\n      type: COMPONENT_TYPE.SLIDER,\n    };\n  }\n\n  /**\n   * 更新配置\n   */\n  private updateSlider() {\n    let cfg = this.getSliderCfg();\n    if (this.width) {\n      const { minText, maxText } = this.getMinMaxText(this.start, this.end);\n      cfg = { ...cfg, width: this.width, start: this.start, end: this.end, minText, maxText };\n    }\n\n    this.slider.component.update(cfg);\n\n    return this.slider;\n  }\n\n  /**\n   * 进行测量操作\n   */\n  private measureSlider() {\n    const { width } = this.getSliderCfg();\n\n    this.width = width;\n  }\n\n  /**\n   * 清除测量\n   */\n  private resetMeasure = () => {\n    this.clear();\n  };\n\n  /**\n   * 生成 slider 配置\n   */\n  private getSliderCfg() {\n    let cfg: Writeable<SliderCfg> & { x: number; y: number; width: number; minText: string; maxText: string } = {\n      height: 16,\n      start: 0,\n      end: 1,\n      minText: '',\n      maxText: '',\n      x: 0,\n      y: 0,\n      width: this.view.coordinateBBox.width,\n    };\n    if (isObject(this.option)) {\n      // 用户配置的数据，优先级更高\n      const trendCfg = {\n        data: this.getData(),\n        ...get(this.option, 'trendCfg', {}),\n      };\n\n      // 因为有样式，所以深层覆盖\n      cfg = deepMix({}, cfg, this.getThemeOptions(), this.option);\n\n      // trendCfg 因为有数据数组，所以使用浅替换\n      cfg = { ...cfg, trendCfg };\n    }\n\n    cfg.start = clamp(Math.min(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n    cfg.end = clamp(Math.max(isNil(cfg.start) ? 0 : cfg.start, isNil(cfg.end) ? 1 : cfg.end), 0, 1);\n\n    return cfg;\n  }\n\n  /**\n   * 从 view 中获取数据，缩略轴使用全量的数据\n   */\n  private getData(): number[] {\n    const data = this.view.getOptions().data;\n    const [yScale] = this.view.getYScales();\n    const groupScales = this.view.getGroupScales();\n    if (groupScales.length) {\n      const { field, ticks } = groupScales[0];\n      return data.reduce((pre, cur) => {\n        if (cur[field] === ticks[0]) {\n          pre.push(cur[yScale.field] as number);\n        }\n        return pre;\n      }, []) as number[];\n    }\n\n    return data.map((datum) => datum[yScale.field] || 0);\n  }\n\n  /**\n   * 获取 slider 的主题配置\n   */\n  private getThemeOptions() {\n    const theme = this.view.getTheme();\n    return get(theme, ['components', 'slider', 'common'], {});\n  }\n\n  /**\n   * 滑块滑动的时候出发\n   * @param v\n   */\n  private onValueChange = (v: any) => {\n    const [min, max] = v;\n\n    this.start = min;\n    this.end = max;\n\n    this.changeViewData(min, max);\n  };\n\n  /**\n   * 根据 start/end 和当前数据计算出当前的 minText/maxText\n   * @param min\n   * @param max\n   */\n  private getMinMaxText(min: number, max: number) {\n    const data = this.view.getOptions().data;\n    const xScale = this.view.getXScale();\n    const isHorizontal = true;\n    const values = valuesOfKey(data, xScale.field);\n    const xValues = isHorizontal ? values : values.reverse();\n    const dataSize = size(data);\n\n    if (!xScale || !dataSize) {\n      return {}; // fix: 需要兼容，否则调用方直接取值会报错\n    }\n\n    const xTickCount = size(xValues);\n\n    const minIndex = Math.floor(min * (xTickCount - 1));\n    const maxIndex = Math.floor(max * (xTickCount - 1));\n\n    let minText = get(xValues, [minIndex]);\n    let maxText = get(xValues, [maxIndex]);\n\n    const formatter = this.getSliderCfg().formatter as SliderCfg['formatter'];\n    if (formatter) {\n      minText = formatter(minText, data[minIndex], minIndex);\n      maxText = formatter(maxText, data[maxIndex], maxIndex);\n    }\n\n    return {\n      minText,\n      maxText,\n    };\n  }\n\n  /**\n   * 更新 view 过滤数据\n   * @param min\n   * @param max\n   */\n  private changeViewData(min: number, max: number) {\n    const data = this.view.getOptions().data;\n    const xScale = this.view.getXScale();\n    const dataSize = size(data);\n    if (!xScale || !dataSize) {\n      return;\n    }\n    const isHorizontal = true;\n    const values = valuesOfKey(data, xScale.field);\n    const xValues = isHorizontal ? values : values.reverse();\n    const xTickCount = size(xValues);\n\n    const minIndex = Math.floor(min * (xTickCount - 1));\n    const maxIndex = Math.floor(max * (xTickCount - 1));\n\n    // 增加 x 轴的过滤器\n    this.view.filter(xScale.field, (value: any, datum: Datum) => {\n      const idx: number = xValues.indexOf(value);\n      return idx > -1 ? isBetween(idx, minIndex, maxIndex) : true;\n    });\n    this.view.render(true);\n  }\n\n  /**\n   * 覆写父类方法\n   */\n  public getComponents() {\n    return this.slider ? [this.slider] : [];\n  }\n\n  /**\n   * 覆盖父类\n   */\n  public clear() {\n    if (this.slider) {\n      this.slider.component.destroy();\n      this.slider = undefined;\n    }\n    this.width = 0;\n    this.start = undefined;\n    this.end = undefined;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}