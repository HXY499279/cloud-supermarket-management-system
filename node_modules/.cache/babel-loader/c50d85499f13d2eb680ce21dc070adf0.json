{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\n/**\n * @fileoverview line\n * @author dengfuping_develop@163.com\n */\n\nimport { Line as LineUtil } from '@antv/g-math';\nimport { each, isObject } from '@antv/util';\nimport { SVG_ATTR_MAP } from '../constant';\nimport ShapeBase from './base';\n\nvar Line =\n/** @class */\nfunction (_super) {\n  __extends(Line, _super);\n\n  function Line() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'line';\n    _this.canFill = false;\n    _this.canStroke = true;\n    return _this;\n  }\n\n  Line.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n\n    return __assign(__assign({}, attrs), {\n      x1: 0,\n      y1: 0,\n      x2: 0,\n      y2: 0,\n      startArrow: false,\n      endArrow: false\n    });\n  };\n\n  Line.prototype.createPath = function (context, targetAttrs) {\n    var attrs = this.attr();\n    var el = this.get('el');\n    each(targetAttrs || attrs, function (value, attr) {\n      if (attr === 'startArrow' || attr === 'endArrow') {\n        if (value) {\n          var id = isObject(value) ? context.addArrow(attrs, SVG_ATTR_MAP[attr]) : context.getDefaultArrow(attrs, SVG_ATTR_MAP[attr]);\n          el.setAttribute(SVG_ATTR_MAP[attr], \"url(#\" + id + \")\");\n        } else {\n          el.removeAttribute(SVG_ATTR_MAP[attr]);\n        }\n      } else if (SVG_ATTR_MAP[attr]) {\n        el.setAttribute(SVG_ATTR_MAP[attr], value);\n      }\n    });\n  };\n  /**\n   * Use math calculation to get length of line\n   * @return {number} length\n   */\n\n\n  Line.prototype.getTotalLength = function () {\n    var _a = this.attr(),\n        x1 = _a.x1,\n        y1 = _a.y1,\n        x2 = _a.x2,\n        y2 = _a.y2;\n\n    return LineUtil.length(x1, y1, x2, y2);\n  };\n  /**\n   * Use math calculation to get point according to ratio as same sa Canvas version\n   * @param {number} ratio\n   * @return {Point} point\n   */\n\n\n  Line.prototype.getPoint = function (ratio) {\n    var _a = this.attr(),\n        x1 = _a.x1,\n        y1 = _a.y1,\n        x2 = _a.x2,\n        y2 = _a.y2;\n\n    return LineUtil.pointAt(x1, y1, x2, y2, ratio);\n  };\n\n  return Line;\n}(ShapeBase);\n\nexport default Line;","map":{"version":3,"sources":["../../src/shape/line.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\n/**\n * @fileoverview line\n * @author dengfuping_develop@163.com\n */\nimport { Line as LineUtil } from '@antv/g-math';\nimport { each, isObject } from '@antv/util';\nimport { SVG_ATTR_MAP } from '../constant';\nimport ShapeBase from './base';\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    function Line() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'line';\n        _this.canFill = false;\n        _this.canStroke = true;\n        return _this;\n    }\n    Line.prototype.getDefaultAttrs = function () {\n        var attrs = _super.prototype.getDefaultAttrs.call(this);\n        return __assign(__assign({}, attrs), { x1: 0, y1: 0, x2: 0, y2: 0, startArrow: false, endArrow: false });\n    };\n    Line.prototype.createPath = function (context, targetAttrs) {\n        var attrs = this.attr();\n        var el = this.get('el');\n        each(targetAttrs || attrs, function (value, attr) {\n            if (attr === 'startArrow' || attr === 'endArrow') {\n                if (value) {\n                    var id = isObject(value)\n                        ? context.addArrow(attrs, SVG_ATTR_MAP[attr])\n                        : context.getDefaultArrow(attrs, SVG_ATTR_MAP[attr]);\n                    el.setAttribute(SVG_ATTR_MAP[attr], \"url(#\" + id + \")\");\n                }\n                else {\n                    el.removeAttribute(SVG_ATTR_MAP[attr]);\n                }\n            }\n            else if (SVG_ATTR_MAP[attr]) {\n                el.setAttribute(SVG_ATTR_MAP[attr], value);\n            }\n        });\n    };\n    /**\n     * Use math calculation to get length of line\n     * @return {number} length\n     */\n    Line.prototype.getTotalLength = function () {\n        var _a = this.attr(), x1 = _a.x1, y1 = _a.y1, x2 = _a.x2, y2 = _a.y2;\n        return LineUtil.length(x1, y1, x2, y2);\n    };\n    /**\n     * Use math calculation to get point according to ratio as same sa Canvas version\n     * @param {number} ratio\n     * @return {Point} point\n     */\n    Line.prototype.getPoint = function (ratio) {\n        var _a = this.attr(), x1 = _a.x1, y1 = _a.y1, x2 = _a.x2, y2 = _a.y2;\n        return LineUtil.pointAt(x1, y1, x2, y2, ratio);\n    };\n    return Line;\n}(ShapeBase));\nexport default Line;\n//# sourceMappingURL=line.js.map"]},"metadata":{},"sourceType":"module"}