{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, find, flatten, get, isArray, isEqual, isFunction, mix, isString, isEmpty, isBoolean } from '@antv/util';\nimport { Crosshair, HtmlTooltip } from '../../dependents';\nimport { getAngleByPoint, getDistanceToCenter, isPointInCoordinate } from '../../util/coordinate';\nimport { polarToCartesian } from '../../util/graphics';\nimport { findDataByPoint, getTooltipItems } from '../../util/tooltip';\nimport { BBox } from '../../util/bbox';\nimport { Controller } from './base';\nimport Event from '../event'; // Filter duplicates, use `name`, `color`, `value` and `title` property values as condition\n\nfunction uniq(items) {\n  var uniqItems = [];\n\n  var _loop_1 = function (index) {\n    var item = items[index];\n    var result = find(uniqItems, function (subItem) {\n      return subItem.color === item.color && subItem.name === item.name && subItem.value === item.value && subItem.title === item.title;\n    });\n\n    if (!result) {\n      uniqItems.push(item);\n    }\n  };\n\n  for (var index = 0; index < items.length; index++) {\n    _loop_1(index);\n  }\n\n  return uniqItems;\n}\n/** @ignore */\n\n\nvar Tooltip =\n/** @class */\nfunction (_super) {\n  __extends(Tooltip, _super);\n\n  function Tooltip() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.isLocked = false;\n    return _this;\n  }\n\n  Object.defineProperty(Tooltip.prototype, \"name\", {\n    get: function () {\n      return 'tooltip';\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Tooltip.prototype.init = function () {};\n\n  Tooltip.prototype.isVisible = function () {\n    var option = this.view.getOptions().tooltip;\n    return option !== false;\n  };\n\n  Tooltip.prototype.render = function () {};\n  /**\n   * Shows tooltip\n   * @param point\n   */\n\n\n  Tooltip.prototype.showTooltip = function (point) {\n    this.point = point;\n\n    if (!this.isVisible()) {\n      // 如果设置 tooltip(false) 则始终不显示\n      return;\n    }\n\n    var view = this.view;\n    var items = this.getTooltipItems(point);\n\n    if (!items.length) {\n      // 无内容则不展示，同时 tooltip 需要隐藏\n      this.hideTooltip();\n      return;\n    }\n\n    var title = this.getTitle(items);\n    var dataPoint = {\n      x: items[0].x,\n      y: items[0].y\n    }; // 数据点位置\n\n    view.emit('tooltip:show', Event.fromData(view, 'tooltip:show', __assign({\n      items: items,\n      title: title\n    }, point)));\n    var cfg = this.getTooltipCfg();\n    var follow = cfg.follow,\n        showMarkers = cfg.showMarkers,\n        showCrosshairs = cfg.showCrosshairs,\n        showContent = cfg.showContent,\n        marker = cfg.marker;\n    var lastItems = this.items;\n    var lastTitle = this.title;\n\n    if (!isEqual(lastTitle, title) || !isEqual(lastItems, items)) {\n      // 内容发生变化了更新 tooltip\n      view.emit('tooltip:change', Event.fromData(view, 'tooltip:change', __assign({\n        items: items,\n        title: title\n      }, point)));\n\n      if (isFunction(showContent) ? showContent(items) : showContent) {\n        // 展示 tooltip 内容框才渲染 tooltip\n        if (!this.tooltip) {\n          // 延迟生成\n          this.renderTooltip();\n        }\n\n        this.tooltip.update(mix({}, cfg, {\n          items: this.getItemsAfterProcess(items),\n          title: title\n        }, follow ? point : {}));\n        this.tooltip.show();\n      }\n\n      if (showMarkers) {\n        // 展示 tooltipMarkers，tooltipMarkers 跟随数据\n        this.renderTooltipMarkers(items, marker);\n      }\n    } else {\n      // 内容未发生变化，则更新位置\n      if (this.tooltip && follow) {\n        this.tooltip.update(point);\n        this.tooltip.show(); // tooltip 有可能被隐藏，需要保证显示状态\n      }\n\n      if (this.tooltipMarkersGroup) {\n        this.tooltipMarkersGroup.show();\n      }\n    }\n\n    this.items = items;\n    this.title = title;\n\n    if (showCrosshairs) {\n      // 展示 tooltip 辅助线\n      var isCrosshairsFollowCursor = get(cfg, ['crosshairs', 'follow'], false); // 辅助线是否要跟随鼠标\n\n      this.renderCrosshairs(isCrosshairsFollowCursor ? point : dataPoint, cfg);\n    }\n  };\n\n  Tooltip.prototype.hideTooltip = function () {\n    var follow = this.getTooltipCfg().follow;\n\n    if (!follow) {\n      this.point = null;\n      return;\n    } // hide the tooltipMarkers\n\n\n    var tooltipMarkersGroup = this.tooltipMarkersGroup;\n\n    if (tooltipMarkersGroup) {\n      tooltipMarkersGroup.hide();\n    } // hide crosshairs\n\n\n    var xCrosshair = this.xCrosshair;\n    var yCrosshair = this.yCrosshair;\n\n    if (xCrosshair) {\n      xCrosshair.hide();\n    }\n\n    if (yCrosshair) {\n      yCrosshair.hide();\n    }\n\n    var tooltip = this.tooltip;\n\n    if (tooltip) {\n      tooltip.hide();\n    }\n\n    this.view.emit('tooltip:hide', Event.fromData(this.view, 'tooltip:hide', {}));\n    this.point = null;\n  };\n  /**\n   * lockTooltip\n   */\n\n\n  Tooltip.prototype.lockTooltip = function () {\n    this.isLocked = true;\n\n    if (this.tooltip) {\n      // tooltip contianer 可捕获事件\n      this.tooltip.setCapture(true);\n    }\n  };\n  /**\n   * unlockTooltip\n   */\n\n\n  Tooltip.prototype.unlockTooltip = function () {\n    this.isLocked = false;\n    var cfg = this.getTooltipCfg();\n\n    if (this.tooltip) {\n      // 重置 capture 属性\n      this.tooltip.setCapture(cfg.capture);\n    }\n  };\n  /**\n   * isTooltipLocked\n   */\n\n\n  Tooltip.prototype.isTooltipLocked = function () {\n    return this.isLocked;\n  };\n\n  Tooltip.prototype.clear = function () {\n    var _a = this,\n        tooltip = _a.tooltip,\n        xCrosshair = _a.xCrosshair,\n        yCrosshair = _a.yCrosshair,\n        tooltipMarkersGroup = _a.tooltipMarkersGroup;\n\n    if (tooltip) {\n      tooltip.hide();\n      tooltip.clear();\n    }\n\n    if (xCrosshair) {\n      xCrosshair.clear();\n    }\n\n    if (yCrosshair) {\n      yCrosshair.clear();\n    }\n\n    if (tooltipMarkersGroup) {\n      tooltipMarkersGroup.clear();\n    }\n\n    this.reset();\n  };\n\n  Tooltip.prototype.destroy = function () {\n    if (this.tooltip) {\n      this.tooltip.destroy();\n    }\n\n    if (this.xCrosshair) {\n      this.xCrosshair.destroy();\n    }\n\n    if (this.yCrosshair) {\n      this.yCrosshair.destroy();\n    }\n\n    if (this.guideGroup) {\n      this.guideGroup.remove(true);\n    }\n\n    this.reset();\n  };\n\n  Tooltip.prototype.reset = function () {\n    this.items = null;\n    this.title = null;\n    this.tooltipMarkersGroup = null;\n    this.tooltipCrosshairsGroup = null;\n    this.xCrosshair = null;\n    this.yCrosshair = null;\n    this.tooltip = null;\n    this.guideGroup = null;\n    this.isLocked = false;\n    this.point = null;\n  };\n\n  Tooltip.prototype.changeVisible = function (visible) {\n    if (this.visible === visible) {\n      return;\n    }\n\n    var _a = this,\n        tooltip = _a.tooltip,\n        tooltipMarkersGroup = _a.tooltipMarkersGroup,\n        xCrosshair = _a.xCrosshair,\n        yCrosshair = _a.yCrosshair;\n\n    if (visible) {\n      if (tooltip) {\n        tooltip.show();\n      }\n\n      if (tooltipMarkersGroup) {\n        tooltipMarkersGroup.show();\n      }\n\n      if (xCrosshair) {\n        xCrosshair.show();\n      }\n\n      if (yCrosshair) {\n        yCrosshair.show();\n      }\n    } else {\n      if (tooltip) {\n        tooltip.hide();\n      }\n\n      if (tooltipMarkersGroup) {\n        tooltipMarkersGroup.hide();\n      }\n\n      if (xCrosshair) {\n        xCrosshair.hide();\n      }\n\n      if (yCrosshair) {\n        yCrosshair.hide();\n      }\n    }\n\n    this.visible = visible;\n  };\n\n  Tooltip.prototype.getTooltipItems = function (point) {\n    var items = this.findItemsFromView(this.view, point);\n\n    if (items.length) {\n      // 三层\n      items = flatten(items);\n\n      for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n        var itemArr = items_1[_i];\n\n        for (var _a = 0, itemArr_1 = itemArr; _a < itemArr_1.length; _a++) {\n          var item = itemArr_1[_a];\n          var _b = item.mappingData,\n              x = _b.x,\n              y = _b.y;\n          item.x = isArray(x) ? x[x.length - 1] : x;\n          item.y = isArray(y) ? y[y.length - 1] : y;\n        }\n      }\n\n      var shared = this.getTooltipCfg().shared; // shared: false 代表只显示当前拾取到的 shape 的数据，但是一个 view 会有多个 Geometry，所以有可能会拾取到多个 shape\n\n      if (shared === false && items.length > 1) {\n        var snapItem = items[0];\n        var min = Math.abs(point.y - snapItem[0].y);\n\n        for (var _c = 0, items_2 = items; _c < items_2.length; _c++) {\n          var aItem = items_2[_c];\n          var yDistance = Math.abs(point.y - aItem[0].y);\n\n          if (yDistance <= min) {\n            snapItem = aItem;\n            min = yDistance;\n          }\n        }\n\n        items = [snapItem];\n      }\n\n      return uniq(flatten(items));\n    }\n\n    return [];\n  };\n\n  Tooltip.prototype.layout = function () {};\n\n  Tooltip.prototype.update = function () {\n    if (this.point) {\n      this.showTooltip(this.point);\n    }\n\n    if (this.tooltip) {\n      // #2279 修复resize之后tooltip越界的问题\n      // 确保tooltip已经创建的情况下\n      var canvas = this.view.getCanvas(); // TODO 逍为 tooltip 的区域不应该是 canvas，而应该是整个 特别是在图比较小的时候\n      // 更新 region\n\n      this.tooltip.set('region', {\n        start: {\n          x: 0,\n          y: 0\n        },\n        end: {\n          x: canvas.get('width'),\n          y: canvas.get('height')\n        }\n      });\n    }\n  };\n  /**\n   * 当前鼠标点是在 enter tooltip 中\n   * @param point\n   */\n\n\n  Tooltip.prototype.isCursorEntered = function (point) {\n    // 是可捕获的，并且点在 tooltip dom 上\n    if (this.tooltip) {\n      var el = this.tooltip.getContainer();\n      var capture = this.tooltip.get('capture');\n\n      if (el && capture) {\n        var _a = el.getBoundingClientRect(),\n            x = _a.x,\n            y = _a.y,\n            width = _a.width,\n            height = _a.height;\n\n        return new BBox(x, y, width, height).isPointIn(point);\n      }\n    }\n\n    return false;\n  }; // 获取 tooltip 配置，因为用户可能会通过 view.tooltip() 重新配置 tooltip，所以就不做缓存，每次直接读取\n\n\n  Tooltip.prototype.getTooltipCfg = function () {\n    var view = this.view;\n    var option = view.getOptions().tooltip;\n    var processOption = this.processCustomContent(option);\n    var theme = view.getTheme();\n    var defaultCfg = get(theme, ['components', 'tooltip'], {});\n    var enterable = get(processOption, 'enterable', defaultCfg.enterable);\n    return deepMix({}, defaultCfg, processOption, {\n      capture: enterable || this.isLocked ? true : false\n    });\n  }; // process customContent\n\n\n  Tooltip.prototype.processCustomContent = function (option) {\n    if (isBoolean(option) || !get(option, 'customContent')) {\n      return option;\n    }\n\n    var currentCustomContent = option.customContent;\n\n    var customContent = function (title, items) {\n      var content = currentCustomContent(title, items) || '';\n      return isString(content) ? '<div class=\"g2-tooltip\">' + content + '</div>' : content;\n    };\n\n    return __assign(__assign({}, option), {\n      customContent: customContent\n    });\n  };\n\n  Tooltip.prototype.getTitle = function (items) {\n    var title = items[0].title || items[0].name;\n    this.title = title;\n    return title;\n  };\n\n  Tooltip.prototype.renderTooltip = function () {\n    var canvas = this.view.getCanvas();\n    var region = {\n      start: {\n        x: 0,\n        y: 0\n      },\n      end: {\n        x: canvas.get('width'),\n        y: canvas.get('height')\n      }\n    };\n    var cfg = this.getTooltipCfg();\n    var tooltip = new HtmlTooltip(__assign(__assign({\n      parent: canvas.get('el').parentNode,\n      region: region\n    }, cfg), {\n      visible: false,\n      crosshairs: null\n    }));\n    tooltip.init();\n    this.tooltip = tooltip;\n  };\n\n  Tooltip.prototype.renderTooltipMarkers = function (items, marker) {\n    var tooltipMarkersGroup = this.getTooltipMarkersGroup();\n\n    for (var _i = 0, items_3 = items; _i < items_3.length; _i++) {\n      var item = items_3[_i];\n      var x = item.x,\n          y = item.y;\n\n      var attrs = __assign(__assign({\n        fill: item.color,\n        symbol: 'circle',\n        shadowColor: item.color\n      }, marker), {\n        x: x,\n        y: y\n      });\n\n      tooltipMarkersGroup.addShape('marker', {\n        attrs: attrs\n      });\n    }\n  };\n\n  Tooltip.prototype.renderCrosshairs = function (point, cfg) {\n    var crosshairsType = get(cfg, ['crosshairs', 'type'], 'x'); // 默认展示 x 轴上的辅助线\n\n    if (crosshairsType === 'x') {\n      if (this.yCrosshair) {\n        this.yCrosshair.hide();\n      }\n\n      this.renderXCrosshairs(point, cfg);\n    } else if (crosshairsType === 'y') {\n      if (this.xCrosshair) {\n        this.xCrosshair.hide();\n      }\n\n      this.renderYCrosshairs(point, cfg);\n    } else if (crosshairsType === 'xy') {\n      this.renderXCrosshairs(point, cfg);\n      this.renderYCrosshairs(point, cfg);\n    }\n  }; // 渲染 x 轴上的 tooltip 辅助线\n\n\n  Tooltip.prototype.renderXCrosshairs = function (point, tooltipCfg) {\n    var coordinate = this.getViewWithGeometry(this.view).getCoordinate();\n\n    if (!isPointInCoordinate(coordinate, point)) {\n      return;\n    }\n\n    var start;\n    var end;\n\n    if (coordinate.isRect) {\n      if (coordinate.isTransposed) {\n        start = {\n          x: coordinate.start.x,\n          y: point.y\n        };\n        end = {\n          x: coordinate.end.x,\n          y: point.y\n        };\n      } else {\n        start = {\n          x: point.x,\n          y: coordinate.end.y\n        };\n        end = {\n          x: point.x,\n          y: coordinate.start.y\n        };\n      }\n    } else {\n      // 极坐标下 x 轴上的 crosshairs 表现为半径\n      var angle = getAngleByPoint(coordinate, point);\n      var center = coordinate.getCenter();\n      var radius = coordinate.getRadius();\n      end = polarToCartesian(center.x, center.y, radius, angle);\n      start = center;\n    }\n\n    var cfg = deepMix({\n      start: start,\n      end: end,\n      container: this.getTooltipCrosshairsGroup()\n    }, get(tooltipCfg, 'crosshairs', {}), this.getCrosshairsText('x', point, tooltipCfg));\n    delete cfg.type; // 与 Crosshairs 组件的 type 冲突故删除\n\n    var xCrosshair = this.xCrosshair;\n\n    if (xCrosshair) {\n      xCrosshair.update(cfg);\n    } else {\n      xCrosshair = new Crosshair.Line(cfg);\n      xCrosshair.init();\n    }\n\n    xCrosshair.render();\n    xCrosshair.show();\n    this.xCrosshair = xCrosshair;\n  }; // 渲染 y 轴上的辅助线\n\n\n  Tooltip.prototype.renderYCrosshairs = function (point, tooltipCfg) {\n    var coordinate = this.getViewWithGeometry(this.view).getCoordinate();\n\n    if (!isPointInCoordinate(coordinate, point)) {\n      return;\n    }\n\n    var cfg;\n    var type;\n\n    if (coordinate.isRect) {\n      var start = void 0;\n      var end = void 0;\n\n      if (coordinate.isTransposed) {\n        start = {\n          x: point.x,\n          y: coordinate.end.y\n        };\n        end = {\n          x: point.x,\n          y: coordinate.start.y\n        };\n      } else {\n        start = {\n          x: coordinate.start.x,\n          y: point.y\n        };\n        end = {\n          x: coordinate.end.x,\n          y: point.y\n        };\n      }\n\n      cfg = {\n        start: start,\n        end: end\n      };\n      type = 'Line';\n    } else {\n      // 极坐标下 y 轴上的 crosshairs 表现为圆弧\n      cfg = {\n        center: coordinate.getCenter(),\n        // @ts-ignore\n        radius: getDistanceToCenter(coordinate, point),\n        startAngle: coordinate.startAngle,\n        endAngle: coordinate.endAngle\n      };\n      type = 'Circle';\n    }\n\n    cfg = deepMix({\n      container: this.getTooltipCrosshairsGroup()\n    }, cfg, get(tooltipCfg, 'crosshairs', {}), this.getCrosshairsText('y', point, tooltipCfg));\n    delete cfg.type; // 与 Crosshairs 组件的 type 冲突故删除\n\n    var yCrosshair = this.yCrosshair;\n\n    if (yCrosshair) {\n      // 如果坐标系发生直角坐标系与极坐标的切换操作\n      if (coordinate.isRect && yCrosshair.get('type') === 'circle' || !coordinate.isRect && yCrosshair.get('type') === 'line') {\n        yCrosshair = new Crosshair[type](cfg);\n        yCrosshair.init();\n      } else {\n        yCrosshair.update(cfg);\n      }\n    } else {\n      yCrosshair = new Crosshair[type](cfg);\n      yCrosshair.init();\n    }\n\n    yCrosshair.render();\n    yCrosshair.show();\n    this.yCrosshair = yCrosshair;\n  };\n\n  Tooltip.prototype.getCrosshairsText = function (type, point, tooltipCfg) {\n    var textCfg = get(tooltipCfg, ['crosshairs', 'text']);\n    var follow = get(tooltipCfg, ['crosshairs', 'follow']);\n    var items = this.items;\n\n    if (textCfg) {\n      var view = this.getViewWithGeometry(this.view); // 需要展示文本\n\n      var firstItem = items[0];\n      var xScale = view.getXScale();\n      var yScale = view.getYScales()[0];\n      var xValue = void 0;\n      var yValue = void 0;\n\n      if (follow) {\n        // 如果需要跟随鼠标移动，就需要将当前鼠标坐标点转换为对应的数值\n        var invertPoint = this.view.getCoordinate().invert(point);\n        xValue = xScale.invert(invertPoint.x); // 转换为原始值\n\n        yValue = yScale.invert(invertPoint.y); // 转换为原始值\n      } else {\n        xValue = firstItem.data[xScale.field];\n        yValue = firstItem.data[yScale.field];\n      }\n\n      var content = type === 'x' ? xValue : yValue;\n\n      if (isFunction(textCfg)) {\n        textCfg = textCfg(type, content, items, point);\n      } else {\n        textCfg.content = content;\n      }\n\n      return {\n        text: textCfg\n      };\n    }\n  }; // 获取存储 tooltipMarkers 和 crosshairs 的容器\n\n\n  Tooltip.prototype.getGuideGroup = function () {\n    if (!this.guideGroup) {\n      var foregroundGroup = this.view.foregroundGroup;\n      this.guideGroup = foregroundGroup.addGroup({\n        name: 'tooltipGuide',\n        capture: false\n      });\n    }\n\n    return this.guideGroup;\n  }; // 获取 tooltipMarkers 存储的容器\n\n\n  Tooltip.prototype.getTooltipMarkersGroup = function () {\n    var tooltipMarkersGroup = this.tooltipMarkersGroup;\n\n    if (tooltipMarkersGroup && !tooltipMarkersGroup.destroyed) {\n      tooltipMarkersGroup.clear();\n      tooltipMarkersGroup.show();\n    } else {\n      tooltipMarkersGroup = this.getGuideGroup().addGroup({\n        name: 'tooltipMarkersGroup'\n      });\n      tooltipMarkersGroup.toFront();\n      this.tooltipMarkersGroup = tooltipMarkersGroup;\n    }\n\n    return tooltipMarkersGroup;\n  }; // 获取 tooltip crosshairs 存储的容器\n\n\n  Tooltip.prototype.getTooltipCrosshairsGroup = function () {\n    var tooltipCrosshairsGroup = this.tooltipCrosshairsGroup;\n\n    if (!tooltipCrosshairsGroup) {\n      tooltipCrosshairsGroup = this.getGuideGroup().addGroup({\n        name: 'tooltipCrosshairsGroup',\n        capture: false\n      });\n      tooltipCrosshairsGroup.toBack();\n      this.tooltipCrosshairsGroup = tooltipCrosshairsGroup;\n    }\n\n    return tooltipCrosshairsGroup;\n  };\n\n  Tooltip.prototype.getTooltipItemsByHitShape = function (geometry, point, title) {\n    var showNil = this.getTooltipCfg().showNil;\n    var result = [];\n    var container = geometry.container;\n    var shape = container.getShape(point.x, point.y);\n\n    if (shape && shape.get('visible') && shape.get('origin')) {\n      var mappingData = shape.get('origin').mappingData;\n      var items = getTooltipItems(mappingData, geometry, title, showNil);\n\n      if (items.length) {\n        result.push(items);\n      }\n    }\n\n    return result;\n  };\n\n  Tooltip.prototype.getTooltipItemsByFindData = function (geometry, point, title) {\n    var showNil = this.getTooltipCfg().showNil;\n    var result = [];\n    var dataArray = geometry.dataArray;\n\n    if (!isEmpty(dataArray)) {\n      geometry.sort(dataArray); // 先进行排序，便于 tooltip 查找\n\n      for (var _i = 0, dataArray_1 = dataArray; _i < dataArray_1.length; _i++) {\n        var data = dataArray_1[_i];\n        var record = findDataByPoint(point, data, geometry);\n\n        if (record) {\n          var elementId = geometry.getElementId(record);\n          var element = geometry.elementsMap[elementId];\n\n          if (geometry.type === 'heatmap' || element.visible) {\n            // Heatmap 没有 Element\n            // 如果图形元素隐藏了，怎不再 tooltip 上展示相关数据\n            var items = getTooltipItems(record, geometry, title, showNil);\n\n            if (items.length) {\n              result.push(items);\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  Tooltip.prototype.findItemsFromView = function (view, point) {\n    if (view.getOptions().tooltip === false) {\n      // 如果 view 关闭了 tooltip\n      return [];\n    }\n\n    var result = []; // 先从 view 本身查找\n\n    var geometries = view.geometries;\n\n    var _a = this.getTooltipCfg(),\n        shared = _a.shared,\n        title = _a.title,\n        reversed = _a.reversed;\n\n    for (var _i = 0, geometries_1 = geometries; _i < geometries_1.length; _i++) {\n      var geometry = geometries_1[_i];\n\n      if (geometry.visible && geometry.tooltipOption !== false) {\n        // geometry 可见同时未关闭 tooltip\n        var geometryType = geometry.type;\n        var tooltipItems = void 0;\n\n        if (['point', 'edge', 'polygon'].includes(geometryType)) {\n          // 始终通过图形拾取\n          tooltipItems = this.getTooltipItemsByHitShape(geometry, point, title);\n        } else if (['area', 'line', 'path', 'heatmap'].includes(geometryType)) {\n          // 如果是 'area', 'line', 'path'，始终通过数据查找方法查找 tooltip\n          tooltipItems = this.getTooltipItemsByFindData(geometry, point, title);\n        } else {\n          if (shared !== false) {\n            tooltipItems = this.getTooltipItemsByFindData(geometry, point, title);\n          } else {\n            tooltipItems = this.getTooltipItemsByHitShape(geometry, point, title);\n          }\n        }\n\n        if (tooltipItems.length) {\n          if (reversed) {\n            tooltipItems.reverse();\n          } // geometry 有可能会有多个 item，因为用户可以设置 geometry.tooltip('x*y*z')\n\n\n          result.push(tooltipItems);\n        }\n      }\n    } // 递归查找，并合并结果\n\n\n    for (var _b = 0, _c = view.views; _b < _c.length; _b++) {\n      var childView = _c[_b];\n      result = result.concat(this.findItemsFromView(childView, point));\n    }\n\n    return result;\n  }; // FIXME: hack 方法\n  // 因为 tooltip 的交互是挂载在 Chart 上，所以当chart 上没有绘制 Geometry 的时候，就查找不到数据，并且绘图区域同子 View 的区域不同\n\n\n  Tooltip.prototype.getViewWithGeometry = function (view) {\n    var _this = this;\n\n    if (view.geometries.length) {\n      return view;\n    }\n\n    return find(view.views, function (childView) {\n      return _this.getViewWithGeometry(childView);\n    });\n  };\n  /**\n   * 根据用户配置的 items 配置，来进行用户自定义的处理，并返回最终的 items\n   * 默认不做任何处理\n   */\n\n\n  Tooltip.prototype.getItemsAfterProcess = function (originalItems) {\n    var customItems = this.getTooltipCfg().customItems;\n    var fn = customItems ? customItems : function (v) {\n      return v;\n    };\n    return fn(originalItems);\n  };\n\n  return Tooltip;\n}(Controller);\n\nexport default Tooltip;","map":{"version":3,"sources":["../../../src/chart/controller/tooltip.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  deepMix,\n  find,\n  flatten,\n  get,\n  isArray,\n  isEqual,\n  isFunction,\n  mix,\n  isString,\n  isEmpty,\n  isBoolean,\n} from '@antv/util';\nimport { Crosshair, HtmlTooltip, IGroup } from '../../dependents';\nimport Geometry from '../../geometry/base';\nimport { Point, TooltipItem, TooltipOption } from '../../interface';\nimport { getAngleByPoint, getDistanceToCenter, isPointInCoordinate } from '../../util/coordinate';\nimport { polarToCartesian } from '../../util/graphics';\nimport { findDataByPoint, getTooltipItems } from '../../util/tooltip';\nimport { BBox } from '../../util/bbox';\nimport { Controller } from './base';\nimport Event from '../event';\n\n// Filter duplicates, use `name`, `color`, `value` and `title` property values as condition\nfunction uniq(items) {\n  const uniqItems = [];\n  for (let index = 0; index < items.length; index++) {\n    const item = items[index];\n    const result = find(uniqItems, (subItem) => {\n      return (\n        subItem.color === item.color &&\n        subItem.name === item.name &&\n        subItem.value === item.value &&\n        subItem.title === item.title\n      );\n    });\n    if (!result) {\n      uniqItems.push(item);\n    }\n  }\n  return uniqItems;\n}\n\n/** @ignore */\nexport default class Tooltip extends Controller<TooltipOption> {\n  private tooltip;\n  private tooltipMarkersGroup: IGroup;\n  private tooltipCrosshairsGroup: IGroup;\n  private xCrosshair;\n  private yCrosshair;\n  private guideGroup: IGroup;\n\n  private isLocked: boolean = false;\n  private items;\n  private title: string;\n  private point: Point;\n\n  public get name(): string {\n    return 'tooltip';\n  }\n\n  public init() {}\n\n  private isVisible() {\n    const option = this.view.getOptions().tooltip;\n    return option !== false;\n  }\n\n  public render() {}\n\n  /**\n   * Shows tooltip\n   * @param point\n   */\n  public showTooltip(point: Point) {\n    this.point = point;\n    if (!this.isVisible()) {\n      // 如果设置 tooltip(false) 则始终不显示\n      return;\n    }\n    const view = this.view;\n    const items = this.getTooltipItems(point);\n    if (!items.length) {\n      // 无内容则不展示，同时 tooltip 需要隐藏\n      this.hideTooltip();\n      return;\n    }\n    const title = this.getTitle(items);\n    const dataPoint = {\n      x: items[0].x,\n      y: items[0].y,\n    }; // 数据点位置\n\n    view.emit(\n      'tooltip:show',\n      Event.fromData(view, 'tooltip:show', {\n        items,\n        title,\n        ...point,\n      })\n    );\n\n    const cfg = this.getTooltipCfg();\n    const { follow, showMarkers, showCrosshairs, showContent, marker } = cfg;\n    const lastItems = this.items;\n    const lastTitle = this.title;\n    if (!isEqual(lastTitle, title) || !isEqual(lastItems, items)) {\n      // 内容发生变化了更新 tooltip\n      view.emit(\n        'tooltip:change',\n        Event.fromData(view, 'tooltip:change', {\n          items,\n          title,\n          ...point,\n        })\n      );\n\n      if (isFunction(showContent) ? showContent(items) : showContent) {\n        // 展示 tooltip 内容框才渲染 tooltip\n        if (!this.tooltip) {\n          // 延迟生成\n          this.renderTooltip();\n        }\n        this.tooltip.update(\n          mix(\n            {},\n            cfg,\n            {\n              items: this.getItemsAfterProcess(items),\n              title,\n            },\n            follow ? point : {}\n          )\n        );\n        this.tooltip.show();\n      }\n\n      if (showMarkers) {\n        // 展示 tooltipMarkers，tooltipMarkers 跟随数据\n        this.renderTooltipMarkers(items, marker);\n      }\n    } else {\n      // 内容未发生变化，则更新位置\n      if (this.tooltip && follow) {\n        this.tooltip.update(point);\n        this.tooltip.show(); // tooltip 有可能被隐藏，需要保证显示状态\n      }\n\n      if (this.tooltipMarkersGroup) {\n        this.tooltipMarkersGroup.show();\n      }\n    }\n\n    this.items = items;\n    this.title = title;\n\n    if (showCrosshairs) {\n      // 展示 tooltip 辅助线\n      const isCrosshairsFollowCursor = get(cfg, ['crosshairs', 'follow'], false); // 辅助线是否要跟随鼠标\n      this.renderCrosshairs(isCrosshairsFollowCursor ? point : dataPoint, cfg);\n    }\n  }\n\n  public hideTooltip() {\n    const { follow } = this.getTooltipCfg();\n    if (!follow) {\n      this.point = null;\n      return;\n    }\n    // hide the tooltipMarkers\n    const tooltipMarkersGroup = this.tooltipMarkersGroup;\n    if (tooltipMarkersGroup) {\n      tooltipMarkersGroup.hide();\n    }\n\n    // hide crosshairs\n    const xCrosshair = this.xCrosshair;\n    const yCrosshair = this.yCrosshair;\n    if (xCrosshair) {\n      xCrosshair.hide();\n    }\n    if (yCrosshair) {\n      yCrosshair.hide();\n    }\n\n    const tooltip = this.tooltip;\n    if (tooltip) {\n      tooltip.hide();\n    }\n\n    this.view.emit('tooltip:hide', Event.fromData(this.view, 'tooltip:hide', {}));\n\n    this.point = null;\n  }\n\n  /**\n   * lockTooltip\n   */\n  public lockTooltip() {\n    this.isLocked = true;\n    if (this.tooltip) {\n      // tooltip contianer 可捕获事件\n      this.tooltip.setCapture(true);\n    }\n  }\n\n  /**\n   * unlockTooltip\n   */\n  public unlockTooltip() {\n    this.isLocked = false;\n    const cfg = this.getTooltipCfg();\n    if (this.tooltip) {\n      // 重置 capture 属性\n      this.tooltip.setCapture(cfg.capture);\n    }\n  }\n\n  /**\n   * isTooltipLocked\n   */\n  public isTooltipLocked() {\n    return this.isLocked;\n  }\n\n  public clear() {\n    const { tooltip, xCrosshair, yCrosshair, tooltipMarkersGroup } = this;\n    if (tooltip) {\n      tooltip.hide();\n      tooltip.clear();\n    }\n\n    if (xCrosshair) {\n      xCrosshair.clear();\n    }\n\n    if (yCrosshair) {\n      yCrosshair.clear();\n    }\n\n    if (tooltipMarkersGroup) {\n      tooltipMarkersGroup.clear();\n    }\n    this.reset();\n  }\n\n  public destroy() {\n    if (this.tooltip) {\n      this.tooltip.destroy();\n    }\n    if (this.xCrosshair) {\n      this.xCrosshair.destroy();\n    }\n    if (this.yCrosshair) {\n      this.yCrosshair.destroy();\n    }\n\n    if (this.guideGroup) {\n      this.guideGroup.remove(true);\n    }\n\n    this.reset();\n  }\n\n  public reset() {\n    this.items = null;\n    this.title = null;\n    this.tooltipMarkersGroup = null;\n    this.tooltipCrosshairsGroup = null;\n    this.xCrosshair = null;\n    this.yCrosshair = null;\n    this.tooltip = null;\n    this.guideGroup = null;\n    this.isLocked = false;\n    this.point = null;\n  }\n\n  public changeVisible(visible: boolean) {\n    if (this.visible === visible) {\n      return;\n    }\n    const { tooltip, tooltipMarkersGroup, xCrosshair, yCrosshair } = this;\n    if (visible) {\n      if (tooltip) {\n        tooltip.show();\n      }\n      if (tooltipMarkersGroup) {\n        tooltipMarkersGroup.show();\n      }\n      if (xCrosshair) {\n        xCrosshair.show();\n      }\n      if (yCrosshair) {\n        yCrosshair.show();\n      }\n    } else {\n      if (tooltip) {\n        tooltip.hide();\n      }\n      if (tooltipMarkersGroup) {\n        tooltipMarkersGroup.hide();\n      }\n      if (xCrosshair) {\n        xCrosshair.hide();\n      }\n      if (yCrosshair) {\n        yCrosshair.hide();\n      }\n    }\n    this.visible = visible;\n  }\n\n  public getTooltipItems(point: Point) {\n    let items = this.findItemsFromView(this.view, point);\n    if (items.length) {\n      // 三层\n      items = flatten(items);\n      for (const itemArr of items) {\n        for (const item of itemArr) {\n          const { x, y } = item.mappingData;\n          item.x = isArray(x) ? x[x.length - 1] : x;\n          item.y = isArray(y) ? y[y.length - 1] : y;\n        }\n      }\n\n      const { shared } = this.getTooltipCfg();\n      // shared: false 代表只显示当前拾取到的 shape 的数据，但是一个 view 会有多个 Geometry，所以有可能会拾取到多个 shape\n      if (shared === false && items.length > 1) {\n        let snapItem = items[0];\n        let min = Math.abs(point.y - snapItem[0].y);\n        for (const aItem of items) {\n          const yDistance = Math.abs(point.y - aItem[0].y);\n          if (yDistance <= min) {\n            snapItem = aItem;\n            min = yDistance;\n          }\n        }\n        items = [snapItem];\n      }\n\n      return uniq(flatten(items));\n    }\n\n    return [];\n  }\n\n  public layout() {}\n\n  public update() {\n    if (this.point) {\n      this.showTooltip(this.point);\n    }\n\n    if (this.tooltip) {\n      // #2279 修复resize之后tooltip越界的问题\n      // 确保tooltip已经创建的情况下\n      const canvas = this.view.getCanvas();\n      // TODO 逍为 tooltip 的区域不应该是 canvas，而应该是整个 特别是在图比较小的时候\n      // 更新 region\n      this.tooltip.set('region', {\n        start: { x: 0, y: 0 },\n        end: { x: canvas.get('width'), y: canvas.get('height') },\n      });\n    }\n  }\n\n  /**\n   * 当前鼠标点是在 enter tooltip 中\n   * @param point\n   */\n  public isCursorEntered(point: Point) {\n    // 是可捕获的，并且点在 tooltip dom 上\n    if (this.tooltip) {\n      const el: HTMLElement = this.tooltip.getContainer();\n      const capture = this.tooltip.get('capture');\n\n      if (el && capture) {\n        const { x, y, width, height } = el.getBoundingClientRect();\n        return new BBox(x, y, width, height).isPointIn(point);\n      }\n    }\n\n    return false;\n  }\n\n  // 获取 tooltip 配置，因为用户可能会通过 view.tooltip() 重新配置 tooltip，所以就不做缓存，每次直接读取\n  protected getTooltipCfg() {\n    const view = this.view;\n    const option = view.getOptions().tooltip;\n    const processOption = this.processCustomContent(option);\n    const theme = view.getTheme();\n    const defaultCfg = get(theme, ['components', 'tooltip'], {});\n    const enterable = get(processOption, 'enterable', defaultCfg.enterable);\n    return deepMix({}, defaultCfg, processOption, {\n      capture: enterable || this.isLocked ? true : false,\n    });\n  }\n\n  // process customContent\n  protected processCustomContent(option: TooltipOption) {\n    if (isBoolean(option) || !get(option, 'customContent')) {\n      return option;\n    }\n    const currentCustomContent = option.customContent;\n    const customContent = (title: string, items: any[]) => {\n      const content = currentCustomContent(title, items) || '';\n      return isString(content) ? '<div class=\"g2-tooltip\">' + content + '</div>' : content;\n    };\n    return {\n      ...option,\n      customContent,\n    };\n  }\n\n  private getTitle(items) {\n    const title = items[0].title || items[0].name;\n    this.title = title;\n\n    return title;\n  }\n\n  private renderTooltip() {\n    const canvas = this.view.getCanvas();\n    const region = {\n      start: { x: 0, y: 0 },\n      end: { x: canvas.get('width'), y: canvas.get('height') },\n    };\n\n    const cfg = this.getTooltipCfg();\n    const tooltip = new HtmlTooltip({\n      parent: canvas.get('el').parentNode,\n      region,\n      ...cfg,\n      visible: false,\n      crosshairs: null,\n    });\n\n    tooltip.init();\n    this.tooltip = tooltip;\n  }\n\n  private renderTooltipMarkers(items, marker) {\n    const tooltipMarkersGroup = this.getTooltipMarkersGroup();\n    for (const item of items) {\n      const { x, y } = item;\n      const attrs = {\n        fill: item.color,\n        symbol: 'circle',\n        shadowColor: item.color,\n        ...marker,\n        x,\n        y,\n      };\n\n      tooltipMarkersGroup.addShape('marker', {\n        attrs,\n      });\n    }\n  }\n\n  private renderCrosshairs(point: Point, cfg) {\n    const crosshairsType = get(cfg, ['crosshairs', 'type'], 'x'); // 默认展示 x 轴上的辅助线\n    if (crosshairsType === 'x') {\n      if (this.yCrosshair) {\n        this.yCrosshair.hide();\n      }\n      this.renderXCrosshairs(point, cfg);\n    } else if (crosshairsType === 'y') {\n      if (this.xCrosshair) {\n        this.xCrosshair.hide();\n      }\n      this.renderYCrosshairs(point, cfg);\n    } else if (crosshairsType === 'xy') {\n      this.renderXCrosshairs(point, cfg);\n      this.renderYCrosshairs(point, cfg);\n    }\n  }\n\n  // 渲染 x 轴上的 tooltip 辅助线\n  private renderXCrosshairs(point: Point, tooltipCfg) {\n    const coordinate = this.getViewWithGeometry(this.view).getCoordinate();\n    if (!isPointInCoordinate(coordinate, point)) {\n      return;\n    }\n    let start;\n    let end;\n    if (coordinate.isRect) {\n      if (coordinate.isTransposed) {\n        start = {\n          x: coordinate.start.x,\n          y: point.y,\n        };\n        end = {\n          x: coordinate.end.x,\n          y: point.y,\n        };\n      } else {\n        start = {\n          x: point.x,\n          y: coordinate.end.y,\n        };\n        end = {\n          x: point.x,\n          y: coordinate.start.y,\n        };\n      }\n    } else {\n      // 极坐标下 x 轴上的 crosshairs 表现为半径\n      const angle = getAngleByPoint(coordinate, point);\n      const center = coordinate.getCenter();\n      const radius = coordinate.getRadius();\n      end = polarToCartesian(center.x, center.y, radius, angle);\n      start = center;\n    }\n\n    const cfg = deepMix(\n      {\n        start,\n        end,\n        container: this.getTooltipCrosshairsGroup(),\n      },\n      get(tooltipCfg, 'crosshairs', {}),\n      this.getCrosshairsText('x', point, tooltipCfg)\n    );\n    delete cfg.type; // 与 Crosshairs 组件的 type 冲突故删除\n\n    let xCrosshair = this.xCrosshair;\n    if (xCrosshair) {\n      xCrosshair.update(cfg);\n    } else {\n      xCrosshair = new Crosshair.Line(cfg);\n      xCrosshair.init();\n    }\n    xCrosshair.render();\n    xCrosshair.show();\n    this.xCrosshair = xCrosshair;\n  }\n\n  // 渲染 y 轴上的辅助线\n  private renderYCrosshairs(point: Point, tooltipCfg) {\n    const coordinate = this.getViewWithGeometry(this.view).getCoordinate();\n    if (!isPointInCoordinate(coordinate, point)) {\n      return;\n    }\n    let cfg;\n    let type;\n    if (coordinate.isRect) {\n      let start;\n      let end;\n      if (coordinate.isTransposed) {\n        start = {\n          x: point.x,\n          y: coordinate.end.y,\n        };\n        end = {\n          x: point.x,\n          y: coordinate.start.y,\n        };\n      } else {\n        start = {\n          x: coordinate.start.x,\n          y: point.y,\n        };\n        end = {\n          x: coordinate.end.x,\n          y: point.y,\n        };\n      }\n      cfg = {\n        start,\n        end,\n      };\n      type = 'Line';\n    } else {\n      // 极坐标下 y 轴上的 crosshairs 表现为圆弧\n      cfg = {\n        center: coordinate.getCenter(),\n        // @ts-ignore\n        radius: getDistanceToCenter(coordinate, point),\n        startAngle: coordinate.startAngle,\n        endAngle: coordinate.endAngle,\n      };\n      type = 'Circle';\n    }\n\n    cfg = deepMix(\n      {\n        container: this.getTooltipCrosshairsGroup(),\n      },\n      cfg,\n      get(tooltipCfg, 'crosshairs', {}),\n      this.getCrosshairsText('y', point, tooltipCfg)\n    );\n    delete cfg.type; // 与 Crosshairs 组件的 type 冲突故删除\n\n    let yCrosshair = this.yCrosshair;\n    if (yCrosshair) {\n      // 如果坐标系发生直角坐标系与极坐标的切换操作\n      if (\n        (coordinate.isRect && yCrosshair.get('type') === 'circle') ||\n        (!coordinate.isRect && yCrosshair.get('type') === 'line')\n      ) {\n        yCrosshair = new Crosshair[type](cfg);\n        yCrosshair.init();\n      } else {\n        yCrosshair.update(cfg);\n      }\n    } else {\n      yCrosshair = new Crosshair[type](cfg);\n      yCrosshair.init();\n    }\n    yCrosshair.render();\n    yCrosshair.show();\n    this.yCrosshair = yCrosshair;\n  }\n\n  private getCrosshairsText(type, point: Point, tooltipCfg) {\n    let textCfg = get(tooltipCfg, ['crosshairs', 'text']);\n    const follow = get(tooltipCfg, ['crosshairs', 'follow']);\n    const items = this.items;\n\n    if (textCfg) {\n      const view = this.getViewWithGeometry(this.view);\n      // 需要展示文本\n      const firstItem = items[0];\n      const xScale = view.getXScale();\n      const yScale = view.getYScales()[0];\n      let xValue;\n      let yValue;\n      if (follow) {\n        // 如果需要跟随鼠标移动，就需要将当前鼠标坐标点转换为对应的数值\n        const invertPoint = this.view.getCoordinate().invert(point);\n        xValue = xScale.invert(invertPoint.x); // 转换为原始值\n        yValue = yScale.invert(invertPoint.y); // 转换为原始值\n      } else {\n        xValue = firstItem.data[xScale.field];\n        yValue = firstItem.data[yScale.field];\n      }\n\n      const content = type === 'x' ? xValue : yValue;\n      if (isFunction(textCfg)) {\n        textCfg = textCfg(type, content, items, point);\n      } else {\n        textCfg.content = content;\n      }\n\n      return {\n        text: textCfg,\n      };\n    }\n  }\n\n  // 获取存储 tooltipMarkers 和 crosshairs 的容器\n  private getGuideGroup() {\n    if (!this.guideGroup) {\n      const foregroundGroup = this.view.foregroundGroup;\n      this.guideGroup = foregroundGroup.addGroup({\n        name: 'tooltipGuide',\n        capture: false,\n      });\n    }\n\n    return this.guideGroup;\n  }\n\n  // 获取 tooltipMarkers 存储的容器\n  private getTooltipMarkersGroup() {\n    let tooltipMarkersGroup = this.tooltipMarkersGroup;\n    if (tooltipMarkersGroup && !tooltipMarkersGroup.destroyed) {\n      tooltipMarkersGroup.clear();\n      tooltipMarkersGroup.show();\n    } else {\n      tooltipMarkersGroup = this.getGuideGroup().addGroup({\n        name: 'tooltipMarkersGroup',\n      });\n      tooltipMarkersGroup.toFront();\n      this.tooltipMarkersGroup = tooltipMarkersGroup;\n    }\n    return tooltipMarkersGroup;\n  }\n\n  // 获取 tooltip crosshairs 存储的容器\n  private getTooltipCrosshairsGroup() {\n    let tooltipCrosshairsGroup = this.tooltipCrosshairsGroup;\n    if (!tooltipCrosshairsGroup) {\n      tooltipCrosshairsGroup = this.getGuideGroup().addGroup({\n        name: 'tooltipCrosshairsGroup',\n        capture: false,\n      });\n      tooltipCrosshairsGroup.toBack();\n      this.tooltipCrosshairsGroup = tooltipCrosshairsGroup;\n    }\n    return tooltipCrosshairsGroup;\n  }\n\n  private getTooltipItemsByHitShape(geometry, point, title) {\n    const { showNil } = this.getTooltipCfg();\n    const result = [];\n    const container = geometry.container;\n    const shape = container.getShape(point.x, point.y);\n    if (shape && shape.get('visible') && shape.get('origin')) {\n      const mappingData = shape.get('origin').mappingData;\n      const items = getTooltipItems(mappingData, geometry, title, showNil);\n      if (items.length) {\n        result.push(items);\n      }\n    }\n\n    return result;\n  }\n\n  private getTooltipItemsByFindData(geometry: Geometry, point, title) {\n    const { showNil } = this.getTooltipCfg();\n    const result = [];\n    const dataArray = geometry.dataArray;\n    if (!isEmpty(dataArray)) {\n      geometry.sort(dataArray); // 先进行排序，便于 tooltip 查找\n      for (const data of dataArray) {\n        const record = findDataByPoint(point, data, geometry);\n        if (record) {\n          const elementId = geometry.getElementId(record);\n          const element = geometry.elementsMap[elementId];\n          if (geometry.type === 'heatmap' || element.visible) {\n            // Heatmap 没有 Element\n            // 如果图形元素隐藏了，怎不再 tooltip 上展示相关数据\n            const items = getTooltipItems(record, geometry, title, showNil);\n            if (items.length) {\n              result.push(items);\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  private findItemsFromView(view, point) {\n    if (view.getOptions().tooltip === false) {\n      // 如果 view 关闭了 tooltip\n      return [];\n    }\n\n    let result = [];\n    // 先从 view 本身查找\n    const geometries = view.geometries;\n    const { shared, title, reversed } = this.getTooltipCfg();\n    for (const geometry of geometries) {\n      if (geometry.visible && geometry.tooltipOption !== false) {\n        // geometry 可见同时未关闭 tooltip\n        const geometryType = geometry.type;\n        let tooltipItems;\n        if (['point', 'edge', 'polygon'].includes(geometryType)) {\n          // 始终通过图形拾取\n          tooltipItems = this.getTooltipItemsByHitShape(geometry, point, title);\n        } else if (['area', 'line', 'path', 'heatmap'].includes(geometryType)) {\n          // 如果是 'area', 'line', 'path'，始终通过数据查找方法查找 tooltip\n          tooltipItems = this.getTooltipItemsByFindData(geometry, point, title);\n        } else {\n          if (shared !== false) {\n            tooltipItems = this.getTooltipItemsByFindData(geometry, point, title);\n          } else {\n            tooltipItems = this.getTooltipItemsByHitShape(geometry, point, title);\n          }\n        }\n        if (tooltipItems.length) {\n          if (reversed) {\n            tooltipItems.reverse();\n          }\n          // geometry 有可能会有多个 item，因为用户可以设置 geometry.tooltip('x*y*z')\n          result.push(tooltipItems);\n        }\n      }\n    }\n\n    // 递归查找，并合并结果\n    for (const childView of view.views) {\n      result = result.concat(this.findItemsFromView(childView, point));\n    }\n\n    return result;\n  }\n\n  // FIXME: hack 方法\n  // 因为 tooltip 的交互是挂载在 Chart 上，所以当chart 上没有绘制 Geometry 的时候，就查找不到数据，并且绘图区域同子 View 的区域不同\n  private getViewWithGeometry(view) {\n    if (view.geometries.length) {\n      return view;\n    }\n\n    return find(view.views, (childView) => this.getViewWithGeometry(childView));\n  }\n\n  /**\n   * 根据用户配置的 items 配置，来进行用户自定义的处理，并返回最终的 items\n   * 默认不做任何处理\n   */\n  private getItemsAfterProcess(originalItems: TooltipItem[]): TooltipItem[] {\n    const { customItems } = this.getTooltipCfg();\n    const fn = customItems ? customItems : (v) => v;\n\n    return fn(originalItems);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}