{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, isDate, isNil, isNumber, isString } from '@antv/util';\nimport { timeFormat, toTimeStamp } from '../util/time';\nimport Linear from './linear';\n/**\n * 时间度量\n * @class\n */\n\nvar Time =\n/** @class */\nfunction (_super) {\n  __extends(Time, _super);\n\n  function Time() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'time';\n    return _this;\n  }\n  /**\n   * @override\n   */\n\n\n  Time.prototype.getText = function (value, index) {\n    var numberValue = this.translate(value);\n    var formatter = this.formatter;\n    return formatter ? formatter(numberValue, index) : timeFormat(numberValue, this.mask);\n  };\n  /**\n   * @override\n   */\n\n\n  Time.prototype.scale = function (value) {\n    var v = value;\n\n    if (isString(v) || isDate(v)) {\n      v = this.translate(v);\n    }\n\n    return _super.prototype.scale.call(this, v);\n  };\n  /**\n   * 将时间转换成数字\n   * @override\n   */\n\n\n  Time.prototype.translate = function (v) {\n    return toTimeStamp(v);\n  };\n\n  Time.prototype.initCfg = function () {\n    this.tickMethod = 'time-pretty';\n    this.mask = 'YYYY-MM-DD';\n    this.tickCount = 7;\n    this.nice = false;\n  };\n\n  Time.prototype.setDomain = function () {\n    var values = this.values; // 是否设置了 min, max，而不是直接取 this.min, this.max\n\n    var minConfig = this.getConfig('min');\n    var maxConfig = this.getConfig('max'); // 如果设置了 min,max 则转换成时间戳\n\n    if (!isNil(minConfig) || !isNumber(minConfig)) {\n      this.min = this.translate(this.min);\n    }\n\n    if (!isNil(maxConfig) || !isNumber(maxConfig)) {\n      this.max = this.translate(this.max);\n    } // 没有设置 min, max 时\n\n\n    if (values && values.length) {\n      // 重新计算最大最小值\n      var timeStamps_1 = [];\n      var min_1 = Infinity; // 最小值\n\n      var secondMin_1 = min_1; // 次小值\n\n      var max_1 = 0; // 使用一个循环，计算min,max,secondMin\n\n      each(values, function (v) {\n        var timeStamp = toTimeStamp(v);\n\n        if (isNaN(timeStamp)) {\n          throw new TypeError(\"Invalid Time: \" + v + \" in time scale!\");\n        }\n\n        if (min_1 > timeStamp) {\n          secondMin_1 = min_1;\n          min_1 = timeStamp;\n        } else if (secondMin_1 > timeStamp) {\n          secondMin_1 = timeStamp;\n        }\n\n        if (max_1 < timeStamp) {\n          max_1 = timeStamp;\n        }\n\n        timeStamps_1.push(timeStamp);\n      }); // 存在多个值时，设置最小间距\n\n      if (values.length > 1) {\n        this.minTickInterval = secondMin_1 - min_1;\n      }\n\n      if (isNil(minConfig)) {\n        this.min = min_1;\n      }\n\n      if (isNil(maxConfig)) {\n        this.max = max_1;\n      }\n    }\n  };\n\n  return Time;\n}(Linear);\n\nexport default Time;","map":{"version":3,"sources":["../../src/continuous/time.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { each, isDate, isNil, isNumber, isString } from '@antv/util';\nimport { timeFormat, toTimeStamp } from '../util/time';\nimport Linear from './linear';\n/**\n * 时间度量\n * @class\n */\nvar Time = /** @class */ (function (_super) {\n    __extends(Time, _super);\n    function Time() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'time';\n        return _this;\n    }\n    /**\n     * @override\n     */\n    Time.prototype.getText = function (value, index) {\n        var numberValue = this.translate(value);\n        var formatter = this.formatter;\n        return formatter ? formatter(numberValue, index) : timeFormat(numberValue, this.mask);\n    };\n    /**\n     * @override\n     */\n    Time.prototype.scale = function (value) {\n        var v = value;\n        if (isString(v) || isDate(v)) {\n            v = this.translate(v);\n        }\n        return _super.prototype.scale.call(this, v);\n    };\n    /**\n     * 将时间转换成数字\n     * @override\n     */\n    Time.prototype.translate = function (v) {\n        return toTimeStamp(v);\n    };\n    Time.prototype.initCfg = function () {\n        this.tickMethod = 'time-pretty';\n        this.mask = 'YYYY-MM-DD';\n        this.tickCount = 7;\n        this.nice = false;\n    };\n    Time.prototype.setDomain = function () {\n        var values = this.values;\n        // 是否设置了 min, max，而不是直接取 this.min, this.max\n        var minConfig = this.getConfig('min');\n        var maxConfig = this.getConfig('max');\n        // 如果设置了 min,max 则转换成时间戳\n        if (!isNil(minConfig) || !isNumber(minConfig)) {\n            this.min = this.translate(this.min);\n        }\n        if (!isNil(maxConfig) || !isNumber(maxConfig)) {\n            this.max = this.translate(this.max);\n        }\n        // 没有设置 min, max 时\n        if (values && values.length) {\n            // 重新计算最大最小值\n            var timeStamps_1 = [];\n            var min_1 = Infinity; // 最小值\n            var secondMin_1 = min_1; // 次小值\n            var max_1 = 0;\n            // 使用一个循环，计算min,max,secondMin\n            each(values, function (v) {\n                var timeStamp = toTimeStamp(v);\n                if (isNaN(timeStamp)) {\n                    throw new TypeError(\"Invalid Time: \" + v + \" in time scale!\");\n                }\n                if (min_1 > timeStamp) {\n                    secondMin_1 = min_1;\n                    min_1 = timeStamp;\n                }\n                else if (secondMin_1 > timeStamp) {\n                    secondMin_1 = timeStamp;\n                }\n                if (max_1 < timeStamp) {\n                    max_1 = timeStamp;\n                }\n                timeStamps_1.push(timeStamp);\n            });\n            // 存在多个值时，设置最小间距\n            if (values.length > 1) {\n                this.minTickInterval = secondMin_1 - min_1;\n            }\n            if (isNil(minConfig)) {\n                this.min = min_1;\n            }\n            if (isNil(maxConfig)) {\n                this.max = max_1;\n            }\n        }\n    };\n    return Time;\n}(Linear));\nexport default Time;\n//# sourceMappingURL=time.js.map"]},"metadata":{},"sourceType":"module"}