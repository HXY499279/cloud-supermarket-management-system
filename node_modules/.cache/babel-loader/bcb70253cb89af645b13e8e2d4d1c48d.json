{"ast":null,"code":"import { isArray, isNil, isString } from '@antv/util'; // todo 这个到底目的是什么？\n\nvar toScaleString = function (scale, value) {\n  if (isString(value)) {\n    return value;\n  }\n\n  return scale.invert(scale.scale(value));\n};\n/**\n * 所有视觉通道属性的基类\n * @class Base\n */\n\n\nvar Attribute =\n/** @class */\nfunction () {\n  function Attribute(cfg) {\n    this.names = [];\n    this.scales = [];\n    this.linear = false;\n    this.values = [];\n\n    this.callback = function () {\n      return [];\n    }; // 解析配置\n\n\n    this._parseCfg(cfg);\n  }\n  /**\n   * 映射的值组成的数组\n   * @param params 对应 scale 顺序的值传入\n   */\n\n\n  Attribute.prototype.mapping = function () {\n    var _this = this;\n\n    var params = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      params[_i] = arguments[_i];\n    }\n\n    var values = params.map(function (param, idx) {\n      return _this._toOriginParam(param, _this.scales[idx]);\n    });\n    return this.callback.apply(this, values);\n  };\n  /**\n   * 如果进行线性映射，返回对应的映射值\n   * @param percent\n   */\n\n\n  Attribute.prototype.getLinearValue = function (percent) {\n    // 分段数量\n    var steps = this.values.length - 1;\n    var step = Math.floor(steps * percent);\n    var leftPercent = steps * percent - step; // todo 不懂这个逻辑\n\n    var start = this.values[step];\n    var end = step === steps ? start : this.values[step + 1]; // 线性方程\n\n    return start + (end - start) * leftPercent;\n  };\n  /**\n   * 根据度量获取属性名\n   */\n\n\n  Attribute.prototype.getNames = function () {\n    var scales = this.scales;\n    var names = this.names;\n    var length = Math.min(scales.length, names.length);\n    var rst = [];\n\n    for (var i = 0; i < length; i += 1) {\n      rst.push(names[i]);\n    }\n\n    return rst;\n  };\n  /**\n   * 获取所有的维度名\n   */\n\n\n  Attribute.prototype.getFields = function () {\n    return this.scales.map(function (scale) {\n      return scale.field;\n    });\n  };\n  /**\n   * 根据名称获取度量\n   * @param name\n   */\n\n\n  Attribute.prototype.getScale = function (name) {\n    return this.scales[this.names.indexOf(name)];\n  };\n  /**\n   * 默认的回调函数（用户没有自定义 callback，或者用户自定义 callback 返回空的时候，使用 values 映射）\n   * @param params\n   */\n\n\n  Attribute.prototype.defaultCallback = function () {\n    var _this = this;\n\n    var params = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      params[_i] = arguments[_i];\n    } // 没有 params 的情况，是指没有指定 fields，直接返回配置的 values 常量\n\n\n    if (params.length === 0) {\n      return this.values;\n    }\n\n    return params.map(function (param, idx) {\n      var scale = _this.scales[idx];\n      return scale.type === 'identity' ? scale.values[0] : _this._getAttributeValue(scale, param);\n    });\n  }; // 解析配置\n\n\n  Attribute.prototype._parseCfg = function (cfg) {\n    var _this = this;\n\n    var _a = cfg.type,\n        type = _a === void 0 ? 'base' : _a,\n        _b = cfg.names,\n        names = _b === void 0 ? [] : _b,\n        _c = cfg.scales,\n        scales = _c === void 0 ? [] : _c,\n        _d = cfg.values,\n        values = _d === void 0 ? [] : _d,\n        callback = cfg.callback;\n    this.type = type;\n    this.scales = scales;\n    this.values = values;\n    this.names = names; // 构造 callback 方法\n\n    this.callback = function () {\n      var params = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        params[_i] = arguments[_i];\n      }\n      /**\n       * 当用户设置的 callback 返回 null 时, 应该返回默认 callback 中的值\n       */\n\n\n      if (callback) {\n        // 使用用户返回的值处理\n        var ret = callback.apply(void 0, params);\n\n        if (!isNil(ret)) {\n          return [ret];\n        }\n      } // 没有 callback 或者用户 callback 返回值为空，则使用默认的逻辑处理\n\n\n      return _this.defaultCallback.apply(_this, params);\n    };\n  }; // 获取属性值，将值映射到视觉通道\n\n\n  Attribute.prototype._getAttributeValue = function (scale, value) {\n    // 如果是非线性的字段，直接从 values 中取值即可\n    if (scale.isCategory && !this.linear) {\n      // 离散 scale 变换成索引\n      var idx = scale.translate(value);\n      return this.values[idx % this.values.length];\n    } // 线性则使用线性值\n\n\n    var percent = scale.scale(value);\n    return this.getLinearValue(percent);\n  };\n  /**\n   * 通过 scale 拿到数据对应的原始的参数\n   * @param param\n   * @param scale\n   * @private\n   */\n\n\n  Attribute.prototype._toOriginParam = function (param, scale) {\n    // 是线性，直接返回\n    // 非线性，使用 scale 变换\n    return !scale.isLinear ? isArray(param) ? param.map(function (p) {\n      return toScaleString(scale, p);\n    }) : toScaleString(scale, param) : param;\n  };\n\n  return Attribute;\n}();\n\nexport default Attribute;","map":{"version":3,"sources":["../../src/attributes/base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isArray, isNil, isString } from '@antv/util';\n// todo 这个到底目的是什么？\nvar toScaleString = function (scale, value) {\n    if (isString(value)) {\n        return value;\n    }\n    return scale.invert(scale.scale(value));\n};\n/**\n * 所有视觉通道属性的基类\n * @class Base\n */\nvar Attribute = /** @class */ (function () {\n    function Attribute(cfg) {\n        this.names = [];\n        this.scales = [];\n        this.linear = false;\n        this.values = [];\n        this.callback = function () { return []; };\n        // 解析配置\n        this._parseCfg(cfg);\n    }\n    /**\n     * 映射的值组成的数组\n     * @param params 对应 scale 顺序的值传入\n     */\n    Attribute.prototype.mapping = function () {\n        var _this = this;\n        var params = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            params[_i] = arguments[_i];\n        }\n        var values = params.map(function (param, idx) {\n            return _this._toOriginParam(param, _this.scales[idx]);\n        });\n        return this.callback.apply(this, values);\n    };\n    /**\n     * 如果进行线性映射，返回对应的映射值\n     * @param percent\n     */\n    Attribute.prototype.getLinearValue = function (percent) {\n        // 分段数量\n        var steps = this.values.length - 1;\n        var step = Math.floor(steps * percent);\n        var leftPercent = steps * percent - step;\n        // todo 不懂这个逻辑\n        var start = this.values[step];\n        var end = step === steps ? start : this.values[step + 1];\n        // 线性方程\n        return start + (end - start) * leftPercent;\n    };\n    /**\n     * 根据度量获取属性名\n     */\n    Attribute.prototype.getNames = function () {\n        var scales = this.scales;\n        var names = this.names;\n        var length = Math.min(scales.length, names.length);\n        var rst = [];\n        for (var i = 0; i < length; i += 1) {\n            rst.push(names[i]);\n        }\n        return rst;\n    };\n    /**\n     * 获取所有的维度名\n     */\n    Attribute.prototype.getFields = function () {\n        return this.scales.map(function (scale) { return scale.field; });\n    };\n    /**\n     * 根据名称获取度量\n     * @param name\n     */\n    Attribute.prototype.getScale = function (name) {\n        return this.scales[this.names.indexOf(name)];\n    };\n    /**\n     * 默认的回调函数（用户没有自定义 callback，或者用户自定义 callback 返回空的时候，使用 values 映射）\n     * @param params\n     */\n    Attribute.prototype.defaultCallback = function () {\n        var _this = this;\n        var params = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            params[_i] = arguments[_i];\n        }\n        // 没有 params 的情况，是指没有指定 fields，直接返回配置的 values 常量\n        if (params.length === 0) {\n            return this.values;\n        }\n        return params.map(function (param, idx) {\n            var scale = _this.scales[idx];\n            return scale.type === 'identity' ? scale.values[0] : _this._getAttributeValue(scale, param);\n        });\n    };\n    // 解析配置\n    Attribute.prototype._parseCfg = function (cfg) {\n        var _this = this;\n        var _a = cfg.type, type = _a === void 0 ? 'base' : _a, _b = cfg.names, names = _b === void 0 ? [] : _b, _c = cfg.scales, scales = _c === void 0 ? [] : _c, _d = cfg.values, values = _d === void 0 ? [] : _d, callback = cfg.callback;\n        this.type = type;\n        this.scales = scales;\n        this.values = values;\n        this.names = names;\n        // 构造 callback 方法\n        this.callback = function () {\n            var params = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                params[_i] = arguments[_i];\n            }\n            /**\n             * 当用户设置的 callback 返回 null 时, 应该返回默认 callback 中的值\n             */\n            if (callback) {\n                // 使用用户返回的值处理\n                var ret = callback.apply(void 0, params);\n                if (!isNil(ret)) {\n                    return [ret];\n                }\n            }\n            // 没有 callback 或者用户 callback 返回值为空，则使用默认的逻辑处理\n            return _this.defaultCallback.apply(_this, params);\n        };\n    };\n    // 获取属性值，将值映射到视觉通道\n    Attribute.prototype._getAttributeValue = function (scale, value) {\n        // 如果是非线性的字段，直接从 values 中取值即可\n        if (scale.isCategory && !this.linear) {\n            // 离散 scale 变换成索引\n            var idx = scale.translate(value);\n            return this.values[idx % this.values.length];\n        }\n        // 线性则使用线性值\n        var percent = scale.scale(value);\n        return this.getLinearValue(percent);\n    };\n    /**\n     * 通过 scale 拿到数据对应的原始的参数\n     * @param param\n     * @param scale\n     * @private\n     */\n    Attribute.prototype._toOriginParam = function (param, scale) {\n        // 是线性，直接返回\n        // 非线性，使用 scale 变换\n        return !scale.isLinear\n            ? isArray(param)\n                ? param.map(function (p) { return toScaleString(scale, p); })\n                : toScaleString(scale, param)\n            : param;\n    };\n    return Attribute;\n}());\nexport default Attribute;\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"module"}