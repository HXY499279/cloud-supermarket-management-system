{"ast":null,"code":"import { DIRECTION } from '../constant';\n/**\n * @ignore\n * 方位常量转实际的 bbox 位置大小\n * @param parentBBox\n * @param bbox\n * @param direction\n */\n\nexport function directionToPosition(parentBBox, bbox, direction) {\n  if (direction === DIRECTION.TOP) {\n    return [parentBBox.minX + parentBBox.width / 2 - bbox.width / 2, parentBBox.minY];\n  }\n\n  if (direction === DIRECTION.BOTTOM) {\n    return [parentBBox.minX + parentBBox.width / 2 - bbox.width / 2, parentBBox.maxY - bbox.height];\n  }\n\n  if (direction === DIRECTION.LEFT) {\n    return [parentBBox.minX, parentBBox.minY + parentBBox.height / 2 - bbox.height / 2];\n  }\n\n  if (direction === DIRECTION.RIGHT) {\n    return [parentBBox.maxX - bbox.width, parentBBox.minY + parentBBox.height / 2 - bbox.height / 2];\n  }\n\n  if (direction === DIRECTION.TOP_LEFT || direction === DIRECTION.LEFT_TOP) {\n    return [parentBBox.tl.x, parentBBox.tl.y];\n  }\n\n  if (direction === DIRECTION.TOP_RIGHT || direction === DIRECTION.RIGHT_TOP) {\n    return [parentBBox.tr.x - bbox.width, parentBBox.tr.y];\n  }\n\n  if (direction === DIRECTION.BOTTOM_LEFT || direction === DIRECTION.LEFT_BOTTOM) {\n    return [parentBBox.bl.x, parentBBox.bl.y - bbox.height];\n  }\n\n  if (direction === DIRECTION.BOTTOM_RIGHT || direction === DIRECTION.RIGHT_BOTTOM) {\n    return [parentBBox.br.x - bbox.width, parentBBox.br.y - bbox.height];\n  }\n\n  return [0, 0];\n}\n/**\n * get direction after coordinate transpose\n * @param direction\n * @param coordinate\n * @returns direction after transpose or not\n */\n\nfunction getTransposedDirection(direction, coordinate) {\n  if (coordinate.isTransposed) {\n    switch (direction) {\n      case DIRECTION.BOTTOM:\n        return DIRECTION.LEFT;\n\n      case DIRECTION.LEFT:\n        return DIRECTION.BOTTOM;\n\n      case DIRECTION.RIGHT:\n        return DIRECTION.TOP;\n\n      case DIRECTION.TOP:\n        return DIRECTION.RIGHT;\n    }\n  }\n\n  return direction;\n}\n\nfunction reflectX(direct) {\n  if (direct === DIRECTION.LEFT) {\n    return DIRECTION.RIGHT;\n  }\n\n  if (direct === DIRECTION.RIGHT) {\n    return DIRECTION.LEFT;\n  }\n\n  return direct;\n}\n\nfunction reflectY(direct) {\n  if (direct === DIRECTION.TOP) {\n    return DIRECTION.BOTTOM;\n  }\n\n  if (direct === DIRECTION.BOTTOM) {\n    return DIRECTION.TOP;\n  }\n\n  return direct;\n}\n/**\n * get direction after coordinate.scale\n * @param direction\n * @param coordinate\n */\n\n\nfunction getScaleDirection(direction, coordinate) {\n  var x = coordinate.matrix[0];\n  var y = coordinate.matrix[4];\n  var d = direction;\n\n  if (x < 0) {\n    d = reflectX(d);\n  }\n\n  if (y < 0) {\n    d = reflectY(d);\n  }\n\n  return d;\n}\n/**\n *\n * @param direction\n * @param coordinate\n */\n\n\nfunction getReflectDirection(direction, coordinate) {\n  var d = direction;\n\n  if (coordinate.isReflect('x')) {\n    d = reflectX(d);\n  }\n\n  if (coordinate.isReflect('y')) {\n    d = reflectY(d);\n  }\n\n  return d;\n}\n/**\n * @ignore\n * get direction after coordinate translate\n * @param direction\n * @param coordinate\n */\n\n\nexport function getTranslateDirection(direction, coordinate) {\n  var d = direction;\n  d = getTransposedDirection(d, coordinate);\n  d = getScaleDirection(d, coordinate);\n  d = getReflectDirection(d, coordinate);\n  return d;\n}","map":{"version":3,"sources":["../../src/util/direction.ts"],"names":[],"mappings":"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","sourcesContent":["import { DIRECTION } from '../constant';\nimport { Coordinate } from '../dependents';\nimport { Position } from '../interface';\nimport { BBox } from './bbox';\n\n/**\n * @ignore\n * 方位常量转实际的 bbox 位置大小\n * @param parentBBox\n * @param bbox\n * @param direction\n */\nexport function directionToPosition(parentBBox: BBox, bbox: BBox, direction: DIRECTION): Position {\n  if (direction === DIRECTION.TOP) {\n    return [parentBBox.minX + parentBBox.width / 2 - bbox.width / 2, parentBBox.minY];\n  }\n  if (direction === DIRECTION.BOTTOM) {\n    return [parentBBox.minX + parentBBox.width / 2 - bbox.width / 2, parentBBox.maxY - bbox.height];\n  }\n  if (direction === DIRECTION.LEFT) {\n    return [parentBBox.minX, parentBBox.minY + parentBBox.height / 2 - bbox.height / 2];\n  }\n  if (direction === DIRECTION.RIGHT) {\n    return [parentBBox.maxX - bbox.width, parentBBox.minY + parentBBox.height / 2 - bbox.height / 2];\n  }\n\n  if (direction === DIRECTION.TOP_LEFT || direction === DIRECTION.LEFT_TOP) {\n    return [parentBBox.tl.x, parentBBox.tl.y];\n  }\n  if (direction === DIRECTION.TOP_RIGHT || direction === DIRECTION.RIGHT_TOP) {\n    return [parentBBox.tr.x - bbox.width, parentBBox.tr.y];\n  }\n  if (direction === DIRECTION.BOTTOM_LEFT || direction === DIRECTION.LEFT_BOTTOM) {\n    return [parentBBox.bl.x, parentBBox.bl.y - bbox.height];\n  }\n  if (direction === DIRECTION.BOTTOM_RIGHT || direction === DIRECTION.RIGHT_BOTTOM) {\n    return [parentBBox.br.x - bbox.width, parentBBox.br.y - bbox.height];\n  }\n\n  return [0, 0];\n}\n\n/**\n * get direction after coordinate transpose\n * @param direction\n * @param coordinate\n * @returns direction after transpose or not\n */\nfunction getTransposedDirection(direction: DIRECTION, coordinate: Coordinate): DIRECTION {\n  if (coordinate.isTransposed) {\n    switch (direction) {\n      case DIRECTION.BOTTOM:\n        return DIRECTION.LEFT;\n      case DIRECTION.LEFT:\n        return DIRECTION.BOTTOM;\n      case DIRECTION.RIGHT:\n        return DIRECTION.TOP;\n      case DIRECTION.TOP:\n        return DIRECTION.RIGHT;\n    }\n  }\n  return direction;\n}\n\nfunction reflectX(direct: DIRECTION): DIRECTION {\n  if (direct === DIRECTION.LEFT) {\n    return DIRECTION.RIGHT;\n  }\n\n  if (direct === DIRECTION.RIGHT) {\n    return DIRECTION.LEFT;\n  }\n\n  return direct;\n}\n\nfunction reflectY(direct: DIRECTION): DIRECTION {\n  if (direct === DIRECTION.TOP) {\n    return DIRECTION.BOTTOM;\n  }\n  if (direct === DIRECTION.BOTTOM) {\n    return DIRECTION.TOP;\n  }\n\n  return direct;\n}\n\n/**\n * get direction after coordinate.scale\n * @param direction\n * @param coordinate\n */\nfunction getScaleDirection(direction: DIRECTION, coordinate: Coordinate): DIRECTION {\n  const x = coordinate.matrix[0];\n  const y = coordinate.matrix[4];\n\n  let d = direction;\n  if (x < 0) {\n    d = reflectX(d);\n  }\n  if (y < 0) {\n    d = reflectY(d);\n  }\n  return d;\n}\n\n/**\n *\n * @param direction\n * @param coordinate\n */\nfunction getReflectDirection(direction: DIRECTION, coordinate: Coordinate): DIRECTION {\n  let d = direction;\n\n  if (coordinate.isReflect('x')) {\n    d = reflectX(d);\n  }\n  if (coordinate.isReflect('y')) {\n    d = reflectY(d);\n  }\n\n  return d;\n}\n\n/**\n * @ignore\n * get direction after coordinate translate\n * @param direction\n * @param coordinate\n */\nexport function getTranslateDirection(direction: DIRECTION, coordinate: Coordinate): DIRECTION {\n  let d = direction;\n  d = getTransposedDirection(d, coordinate);\n  d = getScaleDirection(d, coordinate);\n  d = getReflectDirection(d, coordinate);\n\n  return d;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}