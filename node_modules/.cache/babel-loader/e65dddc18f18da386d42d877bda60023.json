{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { parsePathString } from '@antv/path-util';\nimport { deepMix, get, upperFirst } from '@antv/util';\nimport { convertNormalPath, convertPolarPath } from './util/path';\n/** ShapeFactory 基类 */\n\nvar ShapeFactoryBase = {\n  /** 坐标系对象 */\n  coordinate: null,\n\n  /** 默认绘制的 Shape 类型 */\n  defaultShapeType: null,\n\n  /** 主题样式 */\n  theme: null,\n\n  /**\n   * 获取 shape 绘制需要的关键点\n   * @param shapeType shape 类型\n   * @param shapePoint 每条数据映射后的坐标点以及 size 数值\n   * @returns 图形关键点信息\n   */\n  getShapePoints: function (shapeType, shapePoint) {\n    var shape = this.getShape(shapeType);\n\n    if (shape.getPoints) {\n      return shape.getPoints(shapePoint);\n    }\n\n    return this.getDefaultPoints(shapePoint);\n  },\n\n  /**\n   * 根据 shape 类型获取具体的 shape 实例\n   * @param shapeType string shape 的类型\n   * @returns\n   */\n  getShape: function (shapeType) {\n    var shape = this[shapeType] || this[this.defaultShapeType];\n    shape.coordinate = this.coordinate;\n    return shape;\n  },\n\n  /**\n   * 获取 shape 的默认关键点\n   * @override\n   */\n  getDefaultPoints: function () {\n    return [];\n  },\n\n  /**\n   * 获取 shape 的默认绘制样式 (内置的 shapeFactory 均有注册默认样式)\n   */\n  getDefaultStyle: function (geometryTheme) {\n    return get(geometryTheme, [this.defaultShapeType, 'default', 'style'], {});\n  },\n\n  /**\n   * 获取 shape 对应的缩略图配置信息。\n   * @param shapeType shape 类型\n   * @param color 颜色\n   * @param isInPolar 是否在极坐标系下\n   * @returns 返回缩略图 marker 配置。\n   */\n  getMarker: function (shapeType, markerCfg) {\n    var shape = this.getShape(shapeType);\n\n    if (!shape.getMarker) {\n      var defaultShapeType = this.defaultShapeType;\n      shape = this.getShape(defaultShapeType);\n    }\n\n    var theme = this.theme;\n    var shapeStyle = get(theme, [shapeType, 'default'], {});\n    var markerStyle = shape.getMarker(markerCfg);\n    return deepMix({}, shapeStyle, markerStyle);\n  },\n\n  /**\n   * 绘制 shape\n   * @override\n   * @param shapeType 绘制的 shape 类型\n   * @param cfg 绘制 shape 需要的信息\n   * @param element Element 实例\n   * @returns\n   */\n  drawShape: function (shapeType, cfg, container) {\n    var shape = this.getShape(shapeType);\n    return shape.draw(cfg, container);\n  }\n};\n/** Shape 基类 */\n\nvar ShapeBase = {\n  /** 坐标系对象 */\n  coordinate: null,\n\n  /**\n   * 将归一化的 path 转换成坐标系下的 path\n   * @param path 归一化的路径\n   * @returns\n   */\n  parsePath: function (path) {\n    var coordinate = this.coordinate;\n    var parsedPath = parsePathString(path);\n\n    if (coordinate.isPolar) {\n      parsedPath = convertPolarPath(coordinate, parsedPath);\n    } else {\n      parsedPath = convertNormalPath(coordinate, parsedPath);\n    }\n\n    return parsedPath;\n  },\n\n  /**\n   * 将归一化的坐标转换成画布坐标\n   * @param point 归一化的坐标点数据\n   * @returns\n   */\n  parsePoint: function (point) {\n    var coordinate = this.coordinate;\n    return coordinate.convert(point);\n  },\n\n  /**\n   * 0～1 points 转 画布 points\n   * @param points 节点集合\n   * @returns\n   */\n  parsePoints: function (points) {\n    var coordinate = this.coordinate;\n    return points.map(function (point) {\n      return coordinate.convert(point);\n    });\n  },\n\n  /**\n   * 绘制 shape\n   * @override\n   */\n  draw: function (cfg, container) {}\n};\nvar ShapeFactoryMap = {};\n/**\n * 注册 ShapeFactory。\n * @param factoryName  ShapeFactory 名称，对应 Geometry 几何标记名称。\n * @param cfg 注册 ShapeFactory 需要覆写定义的属性。\n * @returns 返回 ShapeFactory 对象。\n */\n\nexport function registerShapeFactory(factoryName, cfg) {\n  var className = upperFirst(factoryName);\n\n  var geomObj = __assign(__assign(__assign({}, ShapeFactoryBase), cfg), {\n    geometryType: factoryName\n  });\n\n  ShapeFactoryMap[className] = geomObj;\n  return geomObj;\n}\n/**\n * 注册 Shape。\n * @param factoryName 对应的 ShapeFactory 名称。\n * @param shapeType 注册的 shape 名称。\n * @param cfg 注册 Shape 需要覆写定义的属性。\n * @returns shape 返回注册的 shape 对象。\n */\n\nexport function registerShape(factoryName, shapeType, cfg) {\n  var className = upperFirst(factoryName);\n  var factory = ShapeFactoryMap[className];\n\n  var shapeObj = __assign(__assign({}, ShapeBase), cfg);\n\n  factory[shapeType] = shapeObj;\n  return shapeObj;\n}\n/**\n * 获取 factoryName 对应的 shapeFactory\n * @param factoryName\n * @returns shape factory\n */\n\nexport function getShapeFactory(factoryName) {\n  var className = upperFirst(factoryName);\n  return ShapeFactoryMap[className];\n}","map":{"version":3,"sources":["../../../src/geometry/shape/base.ts"],"names":[],"mappings":"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","sourcesContent":["import { LooseObject } from '@antv/g-svg';\nimport { parsePathString } from '@antv/path-util';\nimport { deepMix, get, upperFirst } from '@antv/util';\nimport { IGroup, IShape, PathCommand } from '../../dependents';\nimport {\n  Point,\n  RegisterShape,\n  RegisterShapeFactory,\n  Shape,\n  ShapeFactory,\n  ShapeInfo,\n  ShapeMarkerAttrs,\n  ShapeMarkerCfg,\n  ShapePoint,\n} from '../../interface';\n\nimport { convertNormalPath, convertPolarPath } from './util/path';\n\n/** ShapeFactory 基类 */\nconst ShapeFactoryBase = {\n  /** 坐标系对象 */\n  coordinate: null,\n  /** 默认绘制的 Shape 类型 */\n  defaultShapeType: null,\n  /** 主题样式 */\n  theme: null,\n  /**\n   * 获取 shape 绘制需要的关键点\n   * @param shapeType shape 类型\n   * @param shapePoint 每条数据映射后的坐标点以及 size 数值\n   * @returns 图形关键点信息\n   */\n  getShapePoints(shapeType: string, shapePoint: ShapePoint) {\n    const shape = this.getShape(shapeType);\n    if (shape.getPoints) {\n      return shape.getPoints(shapePoint);\n    }\n\n    return this.getDefaultPoints(shapePoint);\n  },\n  /**\n   * 根据 shape 类型获取具体的 shape 实例\n   * @param shapeType string shape 的类型\n   * @returns\n   */\n  getShape(shapeType: string): Shape {\n    const shape = this[shapeType] || this[this.defaultShapeType];\n    shape.coordinate = this.coordinate;\n\n    return shape;\n  },\n  /**\n   * 获取 shape 的默认关键点\n   * @override\n   */\n  getDefaultPoints() {\n    return [];\n  },\n  /**\n   * 获取 shape 的默认绘制样式 (内置的 shapeFactory 均有注册默认样式)\n   */\n  getDefaultStyle(geometryTheme: LooseObject): LooseObject {\n    return get(geometryTheme, [this.defaultShapeType, 'default', 'style'], {});\n  },\n  /**\n   * 获取 shape 对应的缩略图配置信息。\n   * @param shapeType shape 类型\n   * @param color 颜色\n   * @param isInPolar 是否在极坐标系下\n   * @returns 返回缩略图 marker 配置。\n   */\n  getMarker(shapeType: string, markerCfg: ShapeMarkerCfg): ShapeMarkerAttrs {\n    let shape = this.getShape(shapeType);\n\n    if (!shape.getMarker) {\n      const defaultShapeType = this.defaultShapeType;\n      shape = this.getShape(defaultShapeType);\n    }\n\n    const theme = this.theme;\n    const shapeStyle = get(theme, [shapeType, 'default'], {});\n    const markerStyle = shape.getMarker(markerCfg);\n\n    return deepMix({}, shapeStyle, markerStyle);\n  },\n  /**\n   * 绘制 shape\n   * @override\n   * @param shapeType 绘制的 shape 类型\n   * @param cfg 绘制 shape 需要的信息\n   * @param element Element 实例\n   * @returns\n   */\n  drawShape(shapeType: string, cfg: ShapeInfo, container: IGroup): IShape | IGroup {\n    const shape = this.getShape(shapeType);\n    return shape.draw(cfg, container);\n  },\n};\n\n/** Shape 基类 */\nconst ShapeBase = {\n  /** 坐标系对象 */\n  coordinate: null,\n  /**\n   * 将归一化的 path 转换成坐标系下的 path\n   * @param path 归一化的路径\n   * @returns\n   */\n  parsePath(path: string): PathCommand[] {\n    const coordinate = this.coordinate;\n    let parsedPath = parsePathString(path);\n    if (coordinate.isPolar) {\n      parsedPath = convertPolarPath(coordinate, parsedPath);\n    } else {\n      parsedPath = convertNormalPath(coordinate, parsedPath);\n    }\n    return parsedPath;\n  },\n  /**\n   * 将归一化的坐标转换成画布坐标\n   * @param point 归一化的坐标点数据\n   * @returns\n   */\n  parsePoint(point: Point): Point {\n    const coordinate = this.coordinate;\n    return coordinate.convert(point);\n  },\n  /**\n   * 0～1 points 转 画布 points\n   * @param points 节点集合\n   * @returns\n   */\n  parsePoints(points: Point[]): Point[] {\n    const coordinate = this.coordinate;\n    return points.map((point) => {\n      return coordinate.convert(point);\n    });\n  },\n  /**\n   * 绘制 shape\n   * @override\n   */\n  draw(cfg: ShapeInfo, container: IGroup) {},\n};\n\nconst ShapeFactoryMap = {};\n\n/**\n * 注册 ShapeFactory。\n * @param factoryName  ShapeFactory 名称，对应 Geometry 几何标记名称。\n * @param cfg 注册 ShapeFactory 需要覆写定义的属性。\n * @returns 返回 ShapeFactory 对象。\n */\nexport function registerShapeFactory(factoryName: string, cfg: RegisterShapeFactory): ShapeFactory {\n  const className = upperFirst(factoryName);\n  const geomObj = {\n    ...ShapeFactoryBase,\n    ...cfg,\n    geometryType: factoryName,\n  };\n  ShapeFactoryMap[className] = geomObj;\n  return geomObj;\n}\n\n/**\n * 注册 Shape。\n * @param factoryName 对应的 ShapeFactory 名称。\n * @param shapeType 注册的 shape 名称。\n * @param cfg 注册 Shape 需要覆写定义的属性。\n * @returns shape 返回注册的 shape 对象。\n */\nexport function registerShape(factoryName: string, shapeType: string, cfg: RegisterShape): Shape {\n  const className = upperFirst(factoryName);\n  const factory = ShapeFactoryMap[className];\n  const shapeObj = {\n    ...ShapeBase,\n    ...cfg,\n  };\n  factory[shapeType] = shapeObj;\n  return shapeObj;\n}\n\n/**\n * 获取 factoryName 对应的 shapeFactory\n * @param factoryName\n * @returns shape factory\n */\nexport function getShapeFactory(factoryName: string): ShapeFactory {\n  const className = upperFirst(factoryName);\n  return ShapeFactoryMap[className];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}