{"ast":null,"code":"import { isArray } from '@antv/util';\nvar SPACES = '\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029';\nvar PATH_COMMAND = new RegExp('([a-z])[' + SPACES + ',]*((-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?[' + SPACES + ']*,?[' + SPACES + ']*)+)', 'ig');\nvar PATH_VALUES = new RegExp('(-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?)[' + SPACES + ']*,?[' + SPACES + ']*', 'ig'); // Parses given path string into an array of arrays of path segments\n\nexport default function parsePathString(pathString) {\n  if (!pathString) {\n    return null;\n  }\n\n  if (isArray(pathString)) {\n    return pathString;\n  }\n\n  var paramCounts = {\n    a: 7,\n    c: 6,\n    o: 2,\n    h: 1,\n    l: 2,\n    m: 2,\n    r: 4,\n    q: 4,\n    s: 4,\n    t: 2,\n    v: 1,\n    u: 3,\n    z: 0\n  };\n  var data = [];\n  String(pathString).replace(PATH_COMMAND, function (a, b, c) {\n    var params = [];\n    var name = b.toLowerCase();\n    c.replace(PATH_VALUES, function (a, b) {\n      b && params.push(+b);\n    });\n\n    if (name === 'm' && params.length > 2) {\n      data.push([b].concat(params.splice(0, 2)));\n      name = 'l';\n      b = b === 'm' ? 'l' : 'L';\n    }\n\n    if (name === 'o' && params.length === 1) {\n      data.push([b, params[0]]);\n    }\n\n    if (name === 'r') {\n      data.push([b].concat(params));\n    } else {\n      while (params.length >= paramCounts[name]) {\n        data.push([b].concat(params.splice(0, paramCounts[name])));\n\n        if (!paramCounts[name]) {\n          break;\n        }\n      }\n    }\n\n    return '';\n  });\n  return data;\n}","map":{"version":3,"sources":["../src/parse-path-string.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,QAAwB,YAAxB;AAEA,IAAM,MAAM,GAAG,0IAAf;AACA,IAAM,YAAY,GAAG,IAAI,MAAJ,CAAW,aAAa,MAAb,GAAsB,uCAAtB,GAAgE,MAAhE,GAAyE,OAAzE,GAAmF,MAAnF,GAA4F,OAAvG,EAAgH,IAAhH,CAArB;AACA,IAAM,WAAW,GAAG,IAAI,MAAJ,CAAW,uCAAuC,MAAvC,GAAgD,OAAhD,GAA0D,MAA1D,GAAmE,IAA9E,EAAoF,IAApF,CAApB,C,CAEA;;AACA,eAAc,SAAU,eAAV,CAA0B,UAA1B,EAA4C;AACxD,MAAI,CAAC,UAAL,EAAiB;AACf,WAAO,IAAP;AACD;;AAED,MAAI,OAAO,CAAC,UAAD,CAAX,EAAyB;AACvB,WAAO,UAAP;AACD;;AACD,MAAM,WAAW,GAAG;AAClB,IAAA,CAAC,EAAE,CADe;AAElB,IAAA,CAAC,EAAE,CAFe;AAGlB,IAAA,CAAC,EAAE,CAHe;AAIlB,IAAA,CAAC,EAAE,CAJe;AAKlB,IAAA,CAAC,EAAE,CALe;AAMlB,IAAA,CAAC,EAAE,CANe;AAOlB,IAAA,CAAC,EAAE,CAPe;AAQlB,IAAA,CAAC,EAAE,CARe;AASlB,IAAA,CAAC,EAAE,CATe;AAUlB,IAAA,CAAC,EAAE,CAVe;AAWlB,IAAA,CAAC,EAAE,CAXe;AAYlB,IAAA,CAAC,EAAE,CAZe;AAalB,IAAA,CAAC,EAAE;AAbe,GAApB;AAeA,MAAM,IAAI,GAAG,EAAb;AAEA,EAAA,MAAM,CAAC,UAAD,CAAN,CAAmB,OAAnB,CAA2B,YAA3B,EAAyC,UAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAiB;AACxD,QAAM,MAAM,GAAG,EAAf;AACA,QAAI,IAAI,GAAG,CAAC,CAAC,WAAF,EAAX;AACA,IAAA,CAAC,CAAC,OAAF,CAAU,WAAV,EAAuB,UAAU,CAAV,EAAa,CAAb,EAAc;AACnC,MAAA,CAAC,IAAI,MAAM,CAAC,IAAP,CAAY,CAAC,CAAb,CAAL;AACD,KAFD;;AAGA,QAAI,IAAI,KAAK,GAAT,IAAgB,MAAM,CAAC,MAAP,GAAgB,CAApC,EAAuC;AACrC,MAAA,IAAI,CAAC,IAAL,CAAU,CAAE,CAAF,EAAM,MAAN,CAAa,MAAM,CAAC,MAAP,CAAc,CAAd,EAAiB,CAAjB,CAAb,CAAV;AACA,MAAA,IAAI,GAAG,GAAP;AACA,MAAA,CAAC,GAAG,CAAC,KAAK,GAAN,GAAY,GAAZ,GAAkB,GAAtB;AACD;;AACD,QAAI,IAAI,KAAK,GAAT,IAAgB,MAAM,CAAC,MAAP,KAAkB,CAAtC,EAAyC;AACvC,MAAA,IAAI,CAAC,IAAL,CAAU,CAAE,CAAF,EAAK,MAAM,CAAC,CAAD,CAAX,CAAV;AACD;;AACD,QAAI,IAAI,KAAK,GAAb,EAAkB;AAChB,MAAA,IAAI,CAAC,IAAL,CAAU,CAAE,CAAF,EAAM,MAAN,CAAa,MAAb,CAAV;AACD,KAFD,MAEO;AACL,aAAO,MAAM,CAAC,MAAP,IAAiB,WAAW,CAAC,IAAD,CAAnC,EAA2C;AACzC,QAAA,IAAI,CAAC,IAAL,CAAU,CAAE,CAAF,EAAM,MAAN,CAAa,MAAM,CAAC,MAAP,CAAc,CAAd,EAAiB,WAAW,CAAC,IAAD,CAA5B,CAAb,CAAV;;AACA,YAAI,CAAC,WAAW,CAAC,IAAD,CAAhB,EAAwB;AACtB;AACD;AACF;AACF;;AACD,WAAO,EAAP;AACD,GAzBD;AA2BA,SAAO,IAAP;AACD","sourceRoot":"","sourcesContent":["import { isArray } from '@antv/util';\nvar SPACES = '\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029';\nvar PATH_COMMAND = new RegExp('([a-z])[' + SPACES + ',]*((-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?[' + SPACES + ']*,?[' + SPACES + ']*)+)', 'ig');\nvar PATH_VALUES = new RegExp('(-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?)[' + SPACES + ']*,?[' + SPACES + ']*', 'ig');\n// Parses given path string into an array of arrays of path segments\nexport default function parsePathString(pathString) {\n    if (!pathString) {\n        return null;\n    }\n    if (isArray(pathString)) {\n        return pathString;\n    }\n    var paramCounts = {\n        a: 7,\n        c: 6,\n        o: 2,\n        h: 1,\n        l: 2,\n        m: 2,\n        r: 4,\n        q: 4,\n        s: 4,\n        t: 2,\n        v: 1,\n        u: 3,\n        z: 0,\n    };\n    var data = [];\n    String(pathString).replace(PATH_COMMAND, function (a, b, c) {\n        var params = [];\n        var name = b.toLowerCase();\n        c.replace(PATH_VALUES, function (a, b) {\n            b && params.push(+b);\n        });\n        if (name === 'm' && params.length > 2) {\n            data.push([b].concat(params.splice(0, 2)));\n            name = 'l';\n            b = b === 'm' ? 'l' : 'L';\n        }\n        if (name === 'o' && params.length === 1) {\n            data.push([b, params[0]]);\n        }\n        if (name === 'r') {\n            data.push([b].concat(params));\n        }\n        else {\n            while (params.length >= paramCounts[name]) {\n                data.push([b].concat(params.splice(0, paramCounts[name])));\n                if (!paramCounts[name]) {\n                    break;\n                }\n            }\n        }\n        return '';\n    });\n    return data;\n}\n//# sourceMappingURL=parse-path-string.js.map"]},"metadata":{},"sourceType":"module"}