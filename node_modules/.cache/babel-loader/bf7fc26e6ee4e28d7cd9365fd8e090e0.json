{"ast":null,"code":"import { __assign, __extends, __rest, __spreadArrays } from \"tslib\";\nimport { clone, deepMix, each, filter, find, flatten, get, isBoolean, isFunction, isNil, isObject, isString, isUndefined, mix, remove, set, size, uniqueId, isEqual, isPlainObject } from '@antv/util';\nimport { GROUP_Z_INDEX, LAYER, PLOT_EVENTS, VIEW_LIFE_CIRCLE } from '../constant';\nimport Base from '../base';\nimport { getFacet } from '../facet';\nimport { createInteraction } from '../interaction';\nimport { getTheme } from '../theme';\nimport { BBox } from '../util/bbox';\nimport { getCoordinateClipCfg, isPointInCoordinate } from '../util/coordinate';\nimport { uniq } from '../util/helper';\nimport { findDataByPoint } from '../util/tooltip';\nimport { parsePadding } from '../util/padding';\nimport { getDefaultCategoryScaleRange } from '../util/scale';\nimport { createTheme } from '../theme/util';\nimport { getComponentController, getComponentControllerNames } from './controller';\nimport CoordinateController from './controller/coordinate';\nimport Event from './event';\nimport defaultLayout from './layout';\nimport { ScalePool } from './util/scale-pool';\nimport { PaddingCal } from './layout/padding-cal';\nimport { calculatePadding } from './layout/auto';\nimport { defaultSyncViewPadding } from './util/sync-view-padding';\n/**\n * G2 视图 View 类\n */\n\nvar View =\n/** @class */\nfunction (_super) {\n  __extends(View, _super);\n\n  function View(props) {\n    var _this = _super.call(this, {\n      visible: props.visible\n    }) || this;\n    /** 所有的子 view。 */\n\n\n    _this.views = [];\n    /** 所有的 geometry 实例。 */\n\n    _this.geometries = [];\n    /** 所有的组件 controllers。 */\n\n    _this.controllers = [];\n    /** 所有的 Interaction 实例。 */\n\n    _this.interactions = {};\n    /** 是否对超出坐标系范围的 Geometry 进行剪切 */\n\n    _this.limitInPlot = false; // 配置信息存储\n\n    _this.options = {\n      data: [],\n      animate: true\n    }; // 初始化为空\n\n    /** 配置开启的组件插件，默认为全局配置的组件。 */\n\n    _this.usedControllers = getComponentControllerNames();\n    /** 所有的 scales */\n\n    _this.scalePool = new ScalePool();\n    /** 布局函数 */\n\n    _this.layoutFunc = defaultLayout;\n    /** 当前鼠标是否在 plot 内（CoordinateBBox） */\n\n    _this.isPreMouseInPlot = false;\n    /** 默认标识位，用于判定数据是否更新 */\n\n    _this.isDataChanged = false;\n    /** 用于判断坐标系范围是否发生变化的标志位 */\n\n    _this.isCoordinateChanged = false;\n    /** 从当前这个 view 创建的 scale key */\n\n    _this.createdScaleKeys = new Map();\n\n    _this.onCanvasEvent = function (evt) {\n      var name = evt.name;\n\n      if (!name.includes(':')) {\n        // 非委托事件\n        var e = _this.createViewEvent(evt); // 处理 plot 事件\n\n\n        _this.doPlotEvent(e);\n\n        _this.emit(name, e);\n      }\n    };\n    /**\n     * 触发事件之后\n     * @param evt\n     */\n\n\n    _this.onDelegateEvents = function (evt) {\n      // 阻止继续冒泡，防止重复事件触发\n      // evt.preventDefault();\n      var name = evt.name;\n\n      if (!name.includes(':')) {\n        return;\n      } // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n\n\n      var e = _this.createViewEvent(evt); // 包含有基本事件、组合事件\n\n\n      _this.emit(name, e); // const currentTarget = evt.currentTarget as IShape;\n      // const inheritNames = currentTarget.get('inheritNames');\n      // if (evt.delegateObject || inheritNames) {\n      //   const events = this.getEvents();\n      //   each(inheritNames, (subName) => {\n      //     const eventName = `${subName}:${type}`;\n      //     if (events[eventName]) {\n      //       this.emit(eventName, e);\n      //     }\n      //   });\n      // }\n\n    };\n\n    var _a = props.id,\n        id = _a === void 0 ? uniqueId('view') : _a,\n        parent = props.parent,\n        canvas = props.canvas,\n        backgroundGroup = props.backgroundGroup,\n        middleGroup = props.middleGroup,\n        foregroundGroup = props.foregroundGroup,\n        _b = props.region,\n        region = _b === void 0 ? {\n      start: {\n        x: 0,\n        y: 0\n      },\n      end: {\n        x: 1,\n        y: 1\n      }\n    } : _b,\n        padding = props.padding,\n        appendPadding = props.appendPadding,\n        theme = props.theme,\n        options = props.options,\n        limitInPlot = props.limitInPlot,\n        syncViewPadding = props.syncViewPadding;\n    _this.parent = parent;\n    _this.canvas = canvas;\n    _this.backgroundGroup = backgroundGroup;\n    _this.middleGroup = middleGroup;\n    _this.foregroundGroup = foregroundGroup;\n    _this.region = region;\n    _this.padding = padding;\n    _this.appendPadding = appendPadding; // 接受父 view 传入的参数\n\n    _this.options = __assign(__assign({}, _this.options), options);\n    _this.limitInPlot = limitInPlot;\n    _this.id = id;\n    _this.syncViewPadding = syncViewPadding; // 初始化 theme\n\n    _this.themeObject = isObject(theme) ? deepMix({}, getTheme('default'), createTheme(theme)) : getTheme(theme);\n\n    _this.init();\n\n    return _this;\n  }\n  /**\n   * 设置 layout 布局函数\n   * @param layout 布局函数\n   * @returns void\n   */\n\n\n  View.prototype.setLayout = function (layout) {\n    this.layoutFunc = layout;\n  };\n  /**\n   * 生命周期：初始化\n   * @returns voids\n   */\n\n\n  View.prototype.init = function () {\n    // 计算画布的 viewBBox\n    this.calculateViewBBox(); // 事件委托机制\n\n    this.initEvents(); // 初始化组件 controller\n\n    this.initComponentController();\n    this.initOptions();\n  };\n  /**\n   * 生命周期：渲染流程，渲染过程需要处理数据更新的情况。\n   * render 函数仅仅会处理 view 和子 view。\n   * @param isUpdate 是否触发更新流程。\n   */\n\n\n  View.prototype.render = function (isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_RENDER); // 递归渲染\n\n    this.paint(isUpdate);\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_RENDER);\n\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  };\n  /**\n   * 生命周期：清空图表上所有的绘制内容，但是不销毁图表，chart 仍可使用。\n   * @returns void\n   */\n\n\n  View.prototype.clear = function () {\n    var _this = this;\n\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CLEAR); // 1. 清空缓存和计算数据\n\n    this.filteredData = [];\n    this.coordinateInstance = undefined;\n    this.isDataChanged = false; // 复位\n\n    this.isCoordinateChanged = false; // 复位\n    // 2. 清空 geometries\n\n    var geometries = this.geometries;\n\n    for (var i = 0; i < geometries.length; i++) {\n      geometries[i].clear(); // view 中使用 geometry 的时候，还需要清空它的容器，不然下一次 chart.geometry() 的时候，又创建了一个，导致泄露， #2799。\n\n      geometries[i].container.remove(true);\n    }\n\n    this.geometries = []; // 3. 清空 controllers\n\n    var controllers = this.controllers;\n\n    for (var i = 0; i < controllers.length; i++) {\n      if (controllers[i].name === 'annotation') {\n        // 需要清空配置项\n        controllers[i].clear(true);\n      } else {\n        controllers[i].clear();\n      }\n    } // 4. 删除 scale 缓存\n\n\n    this.createdScaleKeys.forEach(function (v, k) {\n      _this.getRootView().scalePool.deleteScale(k);\n    });\n    this.createdScaleKeys.clear(); // 递归处理子 view\n\n    var views = this.views;\n\n    for (var i = 0; i < views.length; i++) {\n      views[i].clear();\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CLEAR);\n  };\n  /**\n   * 生命周期：销毁，完全无法使用。\n   * @returns void\n   */\n\n\n  View.prototype.destroy = function () {\n    // 销毁前事件，销毁之后已经没有意义了，所以不抛出事件\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_DESTROY);\n    var interactions = this.interactions; // 销毁 interactions\n\n    each(interactions, function (interaction) {\n      if (interaction) {\n        // 有可能已经销毁，设置了 undefined\n        interaction.destroy();\n      }\n    });\n    this.clear(); // 销毁 controller 中的组件\n\n    var controllers = this.controllers;\n\n    for (var i = 0, len = controllers.length; i < len; i++) {\n      var controller = controllers[i];\n      controller.destroy();\n    }\n\n    this.backgroundGroup.remove(true);\n    this.middleGroup.remove(true);\n    this.foregroundGroup.remove(true);\n\n    _super.prototype.destroy.call(this);\n  };\n  /* end 生命周期函数 */\n\n  /**\n   * 显示或者隐藏整个 view。\n   * @param visible 是否可见\n   * @returns View\n   */\n\n\n  View.prototype.changeVisible = function (visible) {\n    _super.prototype.changeVisible.call(this, visible);\n\n    var geometries = this.geometries;\n\n    for (var i = 0, len = geometries.length; i < len; i++) {\n      var geometry = geometries[i];\n      geometry.changeVisible(visible);\n    }\n\n    var controllers = this.controllers;\n\n    for (var i = 0, len = controllers.length; i < len; i++) {\n      var controller = controllers[i];\n      controller.changeVisible(visible);\n    }\n\n    this.foregroundGroup.set('visible', visible);\n    this.middleGroup.set('visible', visible);\n    this.backgroundGroup.set('visible', visible); // group.set('visible', visible) 不会触发自动刷新\n\n    this.getCanvas().draw();\n    return this;\n  };\n  /**\n   * 装载数据源。\n   *\n   * ```ts\n   * view.data([{ city: '杭州', sale: 100 }, { city: '上海', sale: 110 } ]);\n   * ```\n   *\n   * @param data 数据源，json 数组。\n   * @returns View\n   */\n\n\n  View.prototype.data = function (data) {\n    set(this.options, 'data', data);\n    this.isDataChanged = true;\n    return this;\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #data(data)}\n   */\n\n\n  View.prototype.source = function (data) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.data() instead.');\n    return this.data(data);\n  };\n  /**\n   * 设置数据筛选规则。\n   *\n   * ```ts\n   * view.filter('city', (value: any, datum: Datum) => value !== '杭州');\n   *\n   * // 删除 'city' 字段对应的筛选规则。\n   * view.filter('city', null);\n   * ```\n   *\n   * @param field 数据字段\n   * @param condition 筛选规则\n   * @returns View\n   */\n\n\n  View.prototype.filter = function (field, condition) {\n    if (isFunction(condition)) {\n      set(this.options, ['filters', field], condition);\n      return this;\n    } // condition 为空，则表示删除过滤条件\n\n\n    if (!condition && get(this.options, ['filters', field])) {\n      delete this.options.filters[field];\n    }\n\n    return this;\n  };\n\n  View.prototype.axis = function (field, axisOption) {\n    if (isBoolean(field)) {\n      set(this.options, ['axes'], field);\n    } else {\n      set(this.options, ['axes', field], axisOption);\n    }\n\n    return this;\n  };\n\n  View.prototype.legend = function (field, legendOption) {\n    if (isBoolean(field)) {\n      set(this.options, ['legends'], field);\n    } else if (isString(field)) {\n      set(this.options, ['legends', field], legendOption);\n\n      if (isPlainObject(legendOption) && (legendOption === null || legendOption === void 0 ? void 0 : legendOption.selected)) {\n        set(this.options, ['filters', field], function (name) {\n          var _a;\n\n          return (_a = legendOption === null || legendOption === void 0 ? void 0 : legendOption.selected[name]) !== null && _a !== void 0 ? _a : true;\n        });\n      }\n    } else {\n      // 设置全局的 legend 配置\n      set(this.options, ['legends'], field);\n    }\n\n    return this;\n  };\n\n  View.prototype.scale = function (field, scaleOption) {\n    var _this = this;\n\n    if (isString(field)) {\n      set(this.options, ['scales', field], scaleOption);\n    } else if (isObject(field)) {\n      each(field, function (v, k) {\n        set(_this.options, ['scales', k], v);\n      });\n    }\n\n    return this;\n  };\n  /**\n   * tooltip 提示信息配置。\n   *\n   * ```ts\n   * view.tooltip(false); // 关闭 tooltip\n   *\n   * view.tooltip({\n   *   shared: true\n   * });\n   * ```\n   *\n   * @param cfg Tooltip 配置，更详细的配置项参考：https://github.com/antvis/component#tooltip\n   * @returns View\n   */\n\n\n  View.prototype.tooltip = function (cfg) {\n    set(this.options, 'tooltip', cfg);\n    return this;\n  };\n  /**\n   * 辅助标记配置。\n   *\n   * ```ts\n   * view.annotation().line({\n   *   start: ['min', 85],\n   *   end: ['max', 85],\n   *   style: {\n   *     stroke: '#595959',\n   *     lineWidth: 1,\n   *     lineDash: [3, 3],\n   *   },\n   * });\n   * ```\n   * 更详细的配置项：https://github.com/antvis/component#annotation\n   * @returns [[Annotation]]\n   */\n\n\n  View.prototype.annotation = function () {\n    return this.getController('annotation');\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #guide()}\n   */\n\n\n  View.prototype.guide = function () {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.annotation() instead.');\n    return this.annotation();\n  };\n\n  View.prototype.coordinate = function (type, coordinateCfg) {\n    // 提供语法糖，使用更简单\n    if (isString(type)) {\n      set(this.options, 'coordinate', {\n        type: type,\n        cfg: coordinateCfg\n      });\n    } else {\n      set(this.options, 'coordinate', type);\n    } // 更新 coordinate 配置\n\n\n    this.coordinateController.update(this.options.coordinate);\n    return this.coordinateController;\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #coordinate()}\n   */\n\n\n  View.prototype.coord = function (type, coordinateCfg) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.coordinate() instead.'); // @ts-ignore\n\n    return this.coordinate(type, coordinateCfg);\n  };\n  /**\n   * view 分面绘制。\n   *\n   * ```ts\n   * view.facet('rect', {\n   *   rowField: 'province',\n   *   columnField: 'category',\n   *   eachView: (innerView: View, facet?: FacetData) => {\n   *     innerView.line().position('city*sale');\n   *   },\n   * });\n   * ```\n   *\n   * @param type 分面类型\n   * @param cfg 分面配置， [[FacetCfgMap]]\n   * @returns View\n   */\n\n\n  View.prototype.facet = function (type, cfg) {\n    // 先销毁掉之前的分面\n    if (this.facetInstance) {\n      this.facetInstance.destroy();\n    } // 创建新的分面\n\n\n    var Ctor = getFacet(type);\n\n    if (!Ctor) {\n      throw new Error(\"facet '\" + type + \"' is not exist!\");\n    }\n\n    this.facetInstance = new Ctor(this, __assign(__assign({}, cfg), {\n      type: type\n    }));\n    return this;\n  };\n  /*\n   * 开启或者关闭动画。\n   *\n   * ```ts\n   * view.animate(false);\n   * ```\n   *\n   * @param status 动画状态，true 表示开始，false 表示关闭\n   * @returns View\n   */\n\n\n  View.prototype.animate = function (status) {\n    set(this.options, 'animate', status);\n    return this;\n  };\n  /**\n   * 更新配置项，用于配置项式声明。\n   * @param options 配置项\n   */\n\n\n  View.prototype.updateOptions = function (options) {\n    this.clear(); // 清空\n\n    mix(this.options, options); // 需要把已存在的 view 销毁，否则会重复创建\n    // 目前针对配置项还没有特别好的 view 更新机制，为了不影响主流流程，所以在这里直接销毁\n\n    this.views.forEach(function (view) {\n      return view.destroy();\n    });\n    this.views = [];\n    this.initOptions(); // 初始化坐标系大小，保证 padding 计算正确\n\n    this.coordinateBBox = this.viewBBox;\n    return this;\n  };\n  /**\n   * 往 `view.options` 属性中存储配置项。\n   * @param name 属性名称\n   * @param opt 属性值\n   * @returns view\n   */\n\n\n  View.prototype.option = function (name, opt) {\n    // 对于内置的 option，避免覆盖。\n    // name 在原型上，说明可能是内置 API，存在 option 被覆盖的风险，不处理\n    if (View.prototype[name]) {\n      throw new Error(\"Can't use built in variable name \\\"\" + name + \"\\\", please change another one.\");\n    } // 存入到 option 中\n\n\n    set(this.options, name, opt);\n    return this;\n  };\n  /**\n   * 设置主题。\n   *\n   * ```ts\n   * view.theme('dark'); // 'dark' 需要事先通过 `registerTheme()` 接口注册完成\n   *\n   * view.theme({ defaultColor: 'red' });\n   * ```\n   *\n   * @param theme 主题名或者主题配置\n   * @returns View\n   */\n\n\n  View.prototype.theme = function (theme) {\n    this.themeObject = isObject(theme) ? deepMix({}, this.themeObject, createTheme(theme)) : getTheme(theme);\n    return this;\n  };\n  /* end 一系列传入配置的 API */\n\n  /**\n   * Call the interaction based on the interaction name\n   *\n   * ```ts\n   * view.interaction('my-interaction', { extra: 'hello world' });\n   * ```\n   * 详细文档可以参考：https://g2.antv.vision/zh/docs/api/general/interaction\n   * @param name interaction name\n   * @param cfg interaction config\n   * @returns\n   */\n\n\n  View.prototype.interaction = function (name, cfg) {\n    var existInteraction = this.interactions[name]; // 存在则先销毁已有的\n\n    if (existInteraction) {\n      existInteraction.destroy();\n    } // 新建交互实例\n\n\n    var interaction = createInteraction(name, this, cfg);\n\n    if (interaction) {\n      interaction.init();\n      this.interactions[name] = interaction;\n    }\n\n    return this;\n  };\n  /**\n   * 移除当前 View 的 interaction\n   * ```ts\n   * view.removeInteraction('my-interaction');\n   * ```\n   * @param name interaction name\n   */\n\n\n  View.prototype.removeInteraction = function (name) {\n    var existInteraction = this.interactions[name]; // 存在则先销毁已有的\n\n    if (existInteraction) {\n      existInteraction.destroy();\n      this.interactions[name] = undefined;\n    }\n  };\n  /**\n   * 修改数据，数据更新逻辑，数据更新仅仅影响当前这一层的 view\n   *\n   * ```ts\n   * view.changeData([{ city: '北京', sale: '200' }]);\n   * ```\n   *\n   * @param data\n   * @returns void\n   */\n\n\n  View.prototype.changeData = function (data) {\n    this.isDataChanged = true;\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null)); // 1. 保存数据\n\n    this.data(data); // 2. 渲染\n\n    this.paint(true); // 3. 遍历子 view 进行 change data\n\n    var views = this.views;\n\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i]; // FIXME 子 view 有自己的数据的情况，该如何处理？\n\n      view.changeData(data);\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n  /* View 管理相关的 API */\n\n  /**\n   * 创建子 view\n   *\n   * ```ts\n   * const innerView = view.createView({\n   *   start: { x: 0, y: 0 },\n   *   end: { x: 0.5, y: 0.5 },\n   *   padding: 8,\n   * });\n   * ```\n   *\n   * @param cfg\n   * @returns View\n   */\n\n\n  View.prototype.createView = function (cfg) {\n    // 将会在 4.1 版本中移除递归嵌套 view，仅仅只允许 chart - view 两层。\n    // 这个 API 理论上用户量不多，所以暂时不发大版本，所以先暂时打一个 warning。\n    if (this.parent && this.parent.parent) {\n      // 存在 3 层 结构了\n      console.warn('The view nesting recursive feature will be removed at G2 V4.1. Please avoid to use it.');\n    } // 子 view 共享 options 配置数据\n\n\n    var sharedOptions = {\n      data: this.options.data,\n      scales: clone(this.options.scales),\n      axes: clone(this.options.axes),\n      coordinate: clone(this.coordinateController.getOption()),\n      tooltip: clone(this.options.tooltip),\n      legends: clone(this.options.legends),\n      animate: this.options.animate,\n      visible: this.visible\n    };\n    var v = new View(__assign(__assign({\n      parent: this,\n      canvas: this.canvas,\n      // 子 view 共用三层 group\n      backgroundGroup: this.backgroundGroup.addGroup({\n        zIndex: GROUP_Z_INDEX.BG\n      }),\n      middleGroup: this.middleGroup.addGroup({\n        zIndex: GROUP_Z_INDEX.MID\n      }),\n      foregroundGroup: this.foregroundGroup.addGroup({\n        zIndex: GROUP_Z_INDEX.FORE\n      }),\n      theme: this.themeObject,\n      padding: this.padding\n    }, cfg), {\n      options: __assign(__assign({}, sharedOptions), get(cfg, 'options', {}))\n    }));\n    this.views.push(v);\n    return v;\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #createView()}\n   */\n\n\n  View.prototype.view = function (cfg) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.createView() instead.');\n    return this.createView(cfg);\n  };\n  /**\n   * 删除一个子 view\n   * @param view\n   * @return removedView\n   */\n\n\n  View.prototype.removeView = function (view) {\n    var removedView = remove(this.views, function (v) {\n      return v === view;\n    })[0];\n\n    if (removedView) {\n      removedView.destroy();\n    }\n\n    return removedView;\n  };\n  /* end View 管理相关的 API */\n  // 一些 get 方法\n\n  /**\n   * 获取当前坐标系实例。\n   * @returns [[Coordinate]]\n   */\n\n\n  View.prototype.getCoordinate = function () {\n    return this.coordinateInstance;\n  };\n  /**\n   * 获取当前 view 的主题配置。\n   * @returns themeObject\n   */\n\n\n  View.prototype.getTheme = function () {\n    return this.themeObject;\n  };\n  /**\n   * 获得 x 轴字段的 scale 实例。\n   * @returns view 中 Geometry 对于的 x scale\n   */\n\n\n  View.prototype.getXScale = function () {\n    // 拿第一个 Geometry 的 X scale\n    // 隐藏逻辑：一个 view 中的 Geometry 必须 x 字段一致\n    var g = this.geometries[0];\n    return g ? g.getXScale() : null;\n  };\n  /**\n   * 获取 y 轴字段的 scales 实例。\n   * @returns view 中 Geometry 对于的 y scale 数组\n   */\n\n\n  View.prototype.getYScales = function () {\n    // 拿到所有的 Geometry 的 Y scale，然后去重\n    var tmpMap = {};\n    return this.geometries.map(function (g) {\n      var yScale = g.getYScale();\n      var field = yScale.field;\n\n      if (!tmpMap[field]) {\n        tmpMap[field] = true;\n        return yScale;\n      }\n    });\n  };\n  /**\n   * 获取 x 轴或者 y 轴对应的所有 scale 实例。\n   * @param dimType x | y\n   * @returns x 轴或者 y 轴对应的所有 scale 实例。\n   */\n\n\n  View.prototype.getScalesByDim = function (dimType) {\n    var geometries = this.geometries;\n    var scales = {};\n\n    for (var i = 0, len = geometries.length; i < len; i++) {\n      var geometry = geometries[i];\n      var scale = dimType === 'x' ? geometry.getXScale() : geometry.getYScale();\n\n      if (scale && !scales[scale.field]) {\n        scales[scale.field] = scale;\n      }\n    }\n\n    return scales;\n  };\n  /**\n   * 根据字段名去获取 scale 实例。\n   * @param field 数据字段名称\n   * @param key id\n   */\n\n\n  View.prototype.getScaleByField = function (field, key) {\n    var defaultKey = key ? key : this.getScaleKey(field); // 调用根节点 view 的方法获取\n\n    return this.getRootView().scalePool.getScale(defaultKey);\n  };\n  /**\n   * 返回所有配置信息。\n   * @returns 所有的 view API 配置。\n   */\n\n\n  View.prototype.getOptions = function () {\n    return this.options;\n  };\n  /**\n   * 获取 view 的数据（过滤后的数据）。\n   * @returns 处理过滤器之后的数据。\n   */\n\n\n  View.prototype.getData = function () {\n    return this.filteredData;\n  };\n  /**\n   * 获得绘制的层级 group。\n   * @param layer 层级名称。\n   * @returns 对应层级的 Group。\n   */\n\n\n  View.prototype.getLayer = function (layer) {\n    return layer === LAYER.BG ? this.backgroundGroup : layer === LAYER.MID ? this.middleGroup : layer === LAYER.FORE ? this.foregroundGroup : this.foregroundGroup;\n  };\n  /**\n   * 对外暴露方法，判断一个点是否在绘图区域（即坐标系范围）内部。\n   * @param point 坐标点\n   */\n\n\n  View.prototype.isPointInPlot = function (point) {\n    return isPointInCoordinate(this.getCoordinate(), point);\n  };\n  /**\n   * 获得所有的 legend 对应的 attribute 实例。\n   * @returns 维度字段的 Attribute 数组\n   */\n\n\n  View.prototype.getLegendAttributes = function () {\n    return flatten(this.geometries.map(function (g) {\n      return g.getGroupAttributes();\n    }));\n  };\n  /**\n   * 获取所有的分组字段的 scale 实例。\n   * @returns 获得分组字段的 scale 实例数组。\n   */\n\n\n  View.prototype.getGroupScales = function () {\n    // 拿到所有的 Geometry 的 分组字段 scale，然后打平去重\n    var scales = this.geometries.map(function (g) {\n      return g.getGroupScales();\n    });\n    return uniq(flatten(scales));\n  };\n  /**\n   * 获取 G.Canvas 实例。\n   * @returns G.Canvas 画布实例。\n   */\n\n\n  View.prototype.getCanvas = function () {\n    return this.getRootView().canvas;\n  };\n  /**\n   * 获得根节点 view。\n   */\n\n\n  View.prototype.getRootView = function () {\n    var v = this;\n\n    while (true) {\n      if (v.parent) {\n        v = v.parent;\n        continue;\n      }\n\n      break;\n    }\n\n    return v;\n  };\n  /**\n   * 获取该数据在可视化后，对应的画布坐标点。\n   * @param data 原始数据记录\n   * @returns 对应的画布坐标点\n   */\n\n\n  View.prototype.getXY = function (data) {\n    var coordinate = this.getCoordinate();\n    var xScales = this.getScalesByDim('x');\n    var yScales = this.getScalesByDim('y');\n    var x;\n    var y;\n    each(data, function (value, key) {\n      if (xScales[key]) {\n        x = xScales[key].scale(value);\n      }\n\n      if (yScales[key]) {\n        y = yScales[key].scale(value);\n      }\n    });\n\n    if (!isNil(x) && !isNil(y)) {\n      return coordinate.convert({\n        x: x,\n        y: y\n      });\n    }\n  };\n  /**\n   * 获取 name 对应的 controller 实例\n   * @param name\n   */\n\n\n  View.prototype.getController = function (name) {\n    return find(this.controllers, function (c) {\n      return c.name === name;\n    });\n  };\n  /**\n   * 显示 point 坐标点对应的 tooltip。\n   * @param point 画布坐标点\n   * @returns View\n   */\n\n\n  View.prototype.showTooltip = function (point) {\n    var tooltip = this.getController('tooltip');\n\n    if (tooltip) {\n      tooltip.showTooltip(point);\n    }\n\n    return this;\n  };\n  /**\n   * 隐藏 tooltip。\n   * @returns View\n   */\n\n\n  View.prototype.hideTooltip = function () {\n    var tooltip = this.getController('tooltip');\n\n    if (tooltip) {\n      tooltip.hideTooltip();\n    }\n\n    return this;\n  };\n  /**\n   * 将 tooltip 锁定到当前位置不能移动。\n   * @returns View\n   */\n\n\n  View.prototype.lockTooltip = function () {\n    var tooltip = this.getController('tooltip');\n\n    if (tooltip) {\n      tooltip.lockTooltip();\n    }\n\n    return this;\n  };\n  /**\n   * 将 tooltip 锁定解除。\n   * @returns View\n   */\n\n\n  View.prototype.unlockTooltip = function () {\n    var tooltip = this.getController('tooltip');\n\n    if (tooltip) {\n      tooltip.unlockTooltip();\n    }\n\n    return this;\n  };\n  /**\n   * 是否锁定 tooltip。\n   * @returns 是否锁定\n   */\n\n\n  View.prototype.isTooltipLocked = function () {\n    var tooltip = this.getController('tooltip');\n    return tooltip && tooltip.isTooltipLocked();\n  };\n  /**\n   * 获取当前 point 对应的 tooltip 数据项。\n   * @param point 坐标点\n   * @returns tooltip 数据项\n   */\n\n\n  View.prototype.getTooltipItems = function (point) {\n    var tooltip = this.getController('tooltip');\n    return tooltip ? tooltip.getTooltipItems(point) : [];\n  };\n  /**\n   * 获取逼近的点的数据集合\n   * @param point 当前坐标点\n   * @returns  数据\n   */\n\n\n  View.prototype.getSnapRecords = function (point) {\n    var geometries = this.geometries;\n    var rst = [];\n\n    for (var i = 0, len = geometries.length; i < len; i++) {\n      var geom = geometries[i];\n      var dataArray = geom.dataArray;\n      geom.sort(dataArray); // 先进行排序，便于 tooltip 查找\n\n      var record = void 0;\n\n      for (var j = 0, dataLen = dataArray.length; j < dataLen; j++) {\n        var data = dataArray[j];\n        record = findDataByPoint(point, data, geom);\n\n        if (record) {\n          rst.push(record);\n        }\n      }\n    } // 同样递归处理子 views\n\n\n    var views = this.views;\n\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      var snapRecords = view.getSnapRecords(point);\n      rst = rst.concat(snapRecords);\n    }\n\n    return rst;\n  };\n  /**\n   * 获取所有的 pure component 组件，用于布局。\n   */\n\n\n  View.prototype.getComponents = function () {\n    var components = [];\n    var controllers = this.controllers;\n\n    for (var i = 0, len = controllers.length; i < len; i++) {\n      var controller = controllers[i];\n      components = components.concat(controller.getComponents());\n    }\n\n    return components;\n  };\n  /**\n   * 将 data 数据进行过滤。\n   * @param data\n   * @returns 过滤之后的数据\n   */\n\n\n  View.prototype.filterData = function (data) {\n    var filters = this.options.filters; // 不存在 filters，则不需要进行数据过滤\n\n    if (size(filters) === 0) {\n      return data;\n    } // 存在过滤器，则逐个执行过滤，过滤器之间是 与 的关系\n\n\n    return filter(data, function (datum, idx) {\n      // 所有的 filter 字段\n      var fields = Object.keys(filters); // 所有的条件都通过，才算通过\n\n      return fields.every(function (field) {\n        var condition = filters[field]; // condition 返回 true，则保留\n\n        return condition(datum[field], datum, idx);\n      });\n    });\n  };\n  /**\n   * 对某一个字段进行过滤\n   * @param field\n   * @param data\n   */\n\n\n  View.prototype.filterFieldData = function (field, data) {\n    var filters = this.options.filters;\n    var condition = get(filters, field);\n\n    if (isUndefined(condition)) {\n      return data;\n    }\n\n    return data.filter(function (datum, idx) {\n      return condition(datum[field], datum, idx);\n    });\n  };\n  /**\n   * 调整 coordinate 的坐标范围。\n   */\n\n\n  View.prototype.adjustCoordinate = function () {\n    var _a = this.getCoordinate(),\n        curStart = _a.start,\n        curEnd = _a.end;\n\n    var start = this.coordinateBBox.bl;\n    var end = this.coordinateBBox.tr; // 在 defaultLayoutFn 中只会在 coordinateBBox 发生变化的时候会调用 adjustCoordinate()，所以不用担心被置位\n\n    if (isEqual(curStart, start) && isEqual(curEnd, end)) {\n      this.isCoordinateChanged = false; // 如果大小没有变化则不更新\n\n      return;\n    }\n\n    this.isCoordinateChanged = true;\n    this.coordinateInstance = this.coordinateController.adjust(start, end);\n  };\n\n  View.prototype.paint = function (isUpdate) {\n    this.renderDataRecursive(isUpdate); // 处理 sync scale 的逻辑\n\n    this.syncScale();\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_PAINT); // 初始化图形、组件位置，计算 padding\n\n    this.renderPaddingRecursive(isUpdate); // 布局图形、组件\n\n    this.renderLayoutRecursive(isUpdate); // 背景色 shape\n\n    this.renderBackgroundStyleShape(); // 最终的绘制 render\n\n    this.renderPaintRecursive(isUpdate);\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_PAINT);\n    this.isDataChanged = false; // 渲染完毕复位\n  };\n  /**\n   * 渲染背景样式的 shape。\n   * 放到 view 中创建的原因是让使用 view 绘制图形的时候，也能够处理背景色\n   */\n\n\n  View.prototype.renderBackgroundStyleShape = function () {\n    // 只有根节点才处理\n    if (this.parent) {\n      return;\n    }\n\n    var background = get(this.themeObject, 'background'); // 配置了背景色\n\n    if (background) {\n      // 1. 不存在则创建\n      if (!this.backgroundStyleRectShape) {\n        this.backgroundStyleRectShape = this.backgroundGroup.addShape('rect', {\n          attrs: {},\n          zIndex: -1,\n          // 背景色 shape 不设置事件捕获\n          capture: false\n        });\n        this.backgroundStyleRectShape.toBack();\n      } // 2. 有了 shape 之后设置背景，位置（更新的时候）\n\n\n      var _a = this.viewBBox,\n          x = _a.x,\n          y = _a.y,\n          width = _a.width,\n          height = _a.height;\n      this.backgroundStyleRectShape.attr({\n        fill: background,\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      });\n    } else {\n      // 没有配置背景色\n      if (this.backgroundStyleRectShape) {\n        this.backgroundStyleRectShape.remove(true);\n        this.backgroundStyleRectShape = undefined;\n      }\n    }\n  };\n  /**\n   * 递归计算每个 view 的 padding 值，coordinateBBox 和 coordinateInstance\n   * @param isUpdate\n   */\n\n\n  View.prototype.renderPaddingRecursive = function (isUpdate) {\n    // 1. 子 view 大小相对 coordinateBBox，changeSize 的时候需要重新计算\n    this.calculateViewBBox(); // 2. 更新 coordinate\n\n    this.adjustCoordinate(); // 3. 初始化组件 component\n\n    this.initComponents(isUpdate); // 4. 布局计算每隔 view 的 padding 值\n    // 4.1. 自动加 auto padding -> absolute padding，并且增加 appendPadding\n\n    this.autoPadding = calculatePadding(this).shrink(parsePadding(this.appendPadding)); // 4.2. 计算出新的 coordinateBBox，更新 Coordinate\n    // 这里必须保留，原因是后面子 view 的 viewBBox 或根据 parent 的 coordinateBBox\n\n    this.coordinateBBox = this.viewBBox.shrink(this.autoPadding.getPadding());\n    this.adjustCoordinate(); // 同样递归处理子 views\n\n    var views = this.views;\n\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      view.renderPaddingRecursive(isUpdate);\n    }\n  };\n  /**\n   * 递归处理 view 的布局，最终是计算各个 view 的 coordinateBBox 和 coordinateInstance\n   * @param isUpdate\n   */\n\n\n  View.prototype.renderLayoutRecursive = function (isUpdate) {\n    // 1. 同步子 view padding\n    // 根据配置获取 padding\n    var syncViewPaddingFn = this.syncViewPadding === true ? defaultSyncViewPadding : isFunction(this.syncViewPadding) ? this.syncViewPadding : undefined;\n\n    if (syncViewPaddingFn) {\n      syncViewPaddingFn(this, this.views, PaddingCal); // 同步 padding 之后，更新 coordinate\n\n      this.views.forEach(function (v) {\n        v.coordinateBBox = v.viewBBox.shrink(v.autoPadding.getPadding());\n        v.adjustCoordinate();\n      });\n    } // 3. 将 view 中的组件按照 view padding 移动到对应的位置\n\n\n    this.doLayout(); // 同样递归处理子 views\n\n    var views = this.views;\n\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      view.renderLayoutRecursive(isUpdate);\n    }\n  };\n  /**\n   * 最终递归绘制组件和图形\n   * @param isUpdate\n   */\n\n\n  View.prototype.renderPaintRecursive = function (isUpdate) {\n    var middleGroup = this.middleGroup;\n\n    if (this.limitInPlot) {\n      var _a = getCoordinateClipCfg(this.coordinateInstance),\n          type = _a.type,\n          attrs = _a.attrs;\n\n      middleGroup.setClip({\n        type: type,\n        attrs: attrs\n      });\n    } else {\n      // 清除已有的 clip\n      middleGroup.setClip(undefined);\n    } // 1. 渲染几何标记\n\n\n    this.paintGeometries(isUpdate); // 2. 绘制组件\n\n    this.renderComponents(isUpdate); // 同样递归处理子 views\n\n    var views = this.views;\n\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      view.renderPaintRecursive(isUpdate);\n    }\n  }; // end Get 方法\n\n  /**\n   * 创建 scale，递归到顶层 view 去创建和缓存 scale\n   * @param field\n   * @param data\n   * @param scaleDef\n   * @param key\n   */\n\n\n  View.prototype.createScale = function (field, data, scaleDef, key) {\n    // 1. 合并 field 对应的 scaleDef，合并原则是底层覆盖顶层（就近原则）\n    var currentScaleDef = get(this.options.scales, [field]);\n\n    var mergedScaleDef = __assign(__assign({}, currentScaleDef), scaleDef); // 2. 是否存在父 view，在则递归，否则创建\n\n\n    if (this.parent) {\n      return this.parent.createScale(field, data, mergedScaleDef, key);\n    } // 3. 在根节点 view 通过 scalePool 创建\n\n\n    return this.scalePool.createScale(field, data, mergedScaleDef, key);\n  };\n  /**\n   * 递归渲染中的数据处理\n   * @param isUpdate\n   */\n\n\n  View.prototype.renderDataRecursive = function (isUpdate) {\n    // 1. 处理数据\n    this.doFilterData(); // 2. 创建实例\n\n    this.createCoordinate(); // 3. 初始化 Geometry\n\n    this.initGeometries(isUpdate); // 4. 处理分面逻辑，最终都是生成子 view 和 geometry\n\n    this.renderFacet(isUpdate); // 同样递归处理子 views\n\n    var views = this.views;\n\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      view.renderDataRecursive(isUpdate);\n    }\n  };\n  /**\n   * 计算 region，计算实际的像素范围坐标\n   * @private\n   */\n\n\n  View.prototype.calculateViewBBox = function () {\n    var x;\n    var y;\n    var width;\n    var height;\n\n    if (this.parent) {\n      var bbox = this.parent.coordinateBBox; // 存在 parent， 那么就是通过父容器大小计算\n\n      x = bbox.x;\n      y = bbox.y;\n      width = bbox.width;\n      height = bbox.height;\n    } else {\n      // 顶层容器，从 canvas 中取值 宽高\n      x = 0;\n      y = 0;\n      width = this.canvas.get('width');\n      height = this.canvas.get('height');\n    }\n\n    var _a = this.region,\n        start = _a.start,\n        end = _a.end; // 根据 region 计算当前 view 的 bbox 大小。\n\n    var viewBBox = new BBox(x + width * start.x, y + height * start.y, width * (end.x - start.x), height * (end.y - start.y));\n\n    if (!this.viewBBox || !this.viewBBox.isEqual(viewBBox)) {\n      // viewBBox 发生变化的时候进行更新\n      this.viewBBox = new BBox(x + width * start.x, y + height * start.y, width * (end.x - start.x), height * (end.y - start.y));\n    } // 初始的 coordinate bbox 大小\n\n\n    this.coordinateBBox = this.viewBBox;\n  };\n  /**\n   * 初始化事件机制：G 4.0 底层内置支持 name:event 的机制，那么只要所有组件都有自己的 name 即可。\n   *\n   * G2 的事件只是获取事件委托，然后在 view 嵌套结构中，形成事件冒泡机制。\n   * 当前 view 只委托自己 view 中的 Component 和 Geometry 事件，并向上冒泡\n   * @private\n   */\n\n\n  View.prototype.initEvents = function () {\n    // 三层 group 中的 shape 事件都会通过 G 冒泡上来的\n    this.foregroundGroup.on('*', this.onDelegateEvents);\n    this.middleGroup.on('*', this.onDelegateEvents);\n    this.backgroundGroup.on('*', this.onDelegateEvents);\n    this.canvas.on('*', this.onCanvasEvent);\n  };\n  /**\n   * 初始化插件\n   */\n\n\n  View.prototype.initComponentController = function () {\n    var usedControllers = this.usedControllers;\n\n    for (var i = 0, len = usedControllers.length; i < len; i++) {\n      var controllerName = usedControllers[i];\n      var Ctor = getComponentController(controllerName);\n\n      if (Ctor) {\n        this.controllers.push(new Ctor(this));\n      }\n    }\n  };\n\n  View.prototype.createViewEvent = function (evt) {\n    var shape = evt.shape,\n        name = evt.name;\n    var data = shape ? shape.get('origin') : null; // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n\n    var e = new Event(this, evt, data);\n    e.type = name;\n    return e;\n  };\n  /**\n   * 处理 PLOT_EVENTS\n   * plot event 需要处理所有的基础事件，并判断是否在画布中，然后再决定是否要 emit。\n   * 对于 mouseenter、mouseleave 比较特殊，需要做一下数学比较。\n   * @param e\n   */\n\n\n  View.prototype.doPlotEvent = function (e) {\n    var type = e.type,\n        x = e.x,\n        y = e.y;\n    var point = {\n      x: x,\n      y: y\n    };\n    var ALL_EVENTS = ['mousedown', 'mouseup', 'mousemove', 'mouseleave', 'mousewheel', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'click', 'dblclick', 'contextmenu'];\n\n    if (ALL_EVENTS.includes(type)) {\n      var currentInPlot = this.isPointInPlot(point);\n      var newEvent = e.clone();\n\n      if (currentInPlot) {\n        var TYPE = \"plot:\" + type; // 组合 plot 事件\n\n        newEvent.type = TYPE;\n        this.emit(TYPE, newEvent);\n\n        if (type === 'mouseleave' || type === 'touchend') {\n          // 在plot 内部却离开画布\n          this.isPreMouseInPlot = false;\n        }\n      } // 对于 mouseenter, mouseleave 的计算处理\n\n\n      if (type === 'mousemove' || type === 'touchmove') {\n        if (this.isPreMouseInPlot && !currentInPlot) {\n          if (type === 'mousemove') {\n            newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n          }\n\n          newEvent.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, newEvent);\n        } else if (!this.isPreMouseInPlot && currentInPlot) {\n          if (type === 'mousemove') {\n            newEvent.type = PLOT_EVENTS.MOUSE_ENTER;\n            this.emit(PLOT_EVENTS.MOUSE_ENTER, newEvent);\n          }\n\n          newEvent.type = PLOT_EVENTS.ENTER;\n          this.emit(PLOT_EVENTS.ENTER, newEvent);\n        } // 赋新的状态值\n\n\n        this.isPreMouseInPlot = currentInPlot;\n      } else if (type === 'mouseleave' || type === 'touchend') {\n        // 可能不在 currentInPlot 中\n        if (this.isPreMouseInPlot) {\n          if (type === 'mouseleave') {\n            newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n          }\n\n          newEvent.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, newEvent);\n          this.isPreMouseInPlot = false;\n        }\n      }\n    }\n  }; // view 生命周期 —— 渲染流程\n\n  /**\n   * 处理筛选器，筛选数据\n   * @private\n   */\n\n\n  View.prototype.doFilterData = function () {\n    var data = this.options.data;\n    this.filteredData = this.filterData(data);\n  };\n  /**\n   * 初始化 Geometries\n   * @private\n   */\n\n\n  View.prototype.initGeometries = function (isUpdate) {\n    // 初始化图形的之前，先创建 / 更新 scales\n    this.createOrUpdateScales(); // 实例化 Geometry，然后 view 将所有的 scale 管理起来\n\n    var coordinate = this.getCoordinate();\n    var scaleDefs = get(this.options, 'scales', {});\n    var geometries = this.geometries;\n\n    for (var i = 0, len = geometries.length; i < len; i++) {\n      var geometry = geometries[i]; // 保持 scales 引用不要变化\n\n      geometry.scales = this.getGeometryScales();\n      var cfg = {\n        coordinate: coordinate,\n        scaleDefs: scaleDefs,\n        data: this.filteredData,\n        theme: this.themeObject,\n        isDataChanged: this.isDataChanged,\n        isCoordinateChanged: this.isCoordinateChanged\n      };\n\n      if (isUpdate) {\n        // 数据发生更新\n        geometry.update(cfg);\n      } else {\n        geometry.init(cfg);\n      }\n    } // Geometry 初始化之后，生成了 scale，然后进行调整 scale 配置\n\n\n    this.adjustScales();\n  };\n  /**\n   * 根据 Geometry 的所有字段创建 scales\n   * 如果存在，则更新，不存在则创建\n   */\n\n\n  View.prototype.createOrUpdateScales = function () {\n    var fields = this.getScaleFields();\n    var groupedFields = this.getGroupedFields();\n\n    var _a = this.getOptions(),\n        data = _a.data,\n        _b = _a.scales,\n        scales = _b === void 0 ? {} : _b;\n\n    var filteredData = this.filteredData;\n\n    for (var i = 0, len = fields.length; i < len; i++) {\n      var field = fields[i];\n      var scaleDef = scales[field]; // 调用方法，递归去创建\n\n      var key = this.getScaleKey(field);\n      this.createScale(field, // 分组字段的 scale 使用未过滤的数据创建\n      groupedFields.includes(field) ? data : filteredData, scaleDef, key); // 缓存从当前 view 创建的 scale key\n\n      this.createdScaleKeys.set(key, true);\n    }\n  };\n  /**\n   * 处理 scale 同步逻辑\n   */\n\n\n  View.prototype.syncScale = function () {\n    // 最终调用 root view 的\n    this.getRootView().scalePool.sync(this.getCoordinate(), this.theme);\n  };\n  /**\n   * 获得 Geometry 中的 scale 对象\n   */\n\n\n  View.prototype.getGeometryScales = function () {\n    var fields = this.getScaleFields();\n    var scales = {};\n\n    for (var i = 0; i < fields.length; i++) {\n      var field = fields[i];\n      scales[field] = this.getScaleByField(field);\n    }\n\n    return scales;\n  };\n\n  View.prototype.getScaleFields = function () {\n    var fields = [];\n    var tmpMap = {};\n    var geometries = this.geometries;\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geometry = geometries[i];\n      var geometryScales = geometry.getScaleFields();\n      uniq(geometryScales, fields, tmpMap);\n    }\n\n    return fields;\n  };\n\n  View.prototype.getGroupedFields = function () {\n    var fields = [];\n    var tmpMap = {};\n    var geometries = this.geometries;\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geometry = geometries[i];\n      var groupFields = geometry.getGroupFields();\n      uniq(groupFields, fields, tmpMap);\n    }\n\n    return fields;\n  };\n  /**\n   * 调整 scale 配置\n   * @private\n   */\n\n\n  View.prototype.adjustScales = function () {\n    // 调整目前包括：\n    // 分类 scale，调整 range 范围\n    this.adjustCategoryScaleRange();\n  };\n  /**\n   * 调整分类 scale 的 range，防止超出坐标系外面\n   * @private\n   */\n\n\n  View.prototype.adjustCategoryScaleRange = function () {\n    var _this = this;\n\n    var xyScales = __spreadArrays([this.getXScale()], this.getYScales()).filter(function (e) {\n      return !!e;\n    });\n\n    var coordinate = this.getCoordinate();\n    var scaleOptions = this.options.scales;\n    each(xyScales, function (scale) {\n      var field = scale.field,\n          values = scale.values,\n          isCategory = scale.isCategory,\n          isIdentity = scale.isIdentity; // 分类或者 identity 的 scale 才进行处理\n\n      if (isCategory || isIdentity) {\n        // 存在 value 值，且用户没有配置 range 配置\n        if (values && !get(scaleOptions, [field, 'range'])) {\n          // 更新 range\n          scale.range = getDefaultCategoryScaleRange(scale, coordinate, _this.theme);\n        }\n      }\n    });\n  };\n  /**\n   * 根据 options 配置、Geometry 字段配置，自动生成 components\n   * @param isUpdate 是否是更新\n   * @private\n   */\n\n\n  View.prototype.initComponents = function (isUpdate) {\n    // 先全部清空，然后 render\n    var controllers = this.controllers;\n\n    for (var i = 0; i < controllers.length; i++) {\n      var controller = controllers[i]; // 更新则走更新逻辑；否则清空载重绘\n\n      if (isUpdate) {\n        controller.update();\n      } else {\n        controller.clear();\n        controller.render();\n      }\n    }\n  };\n\n  View.prototype.doLayout = function () {\n    this.layoutFunc(this);\n  };\n  /**\n   * 创建坐标系\n   * @private\n   */\n\n\n  View.prototype.createCoordinate = function () {\n    var start = this.coordinateBBox.bl;\n    var end = this.coordinateBBox.tr;\n    this.coordinateInstance = this.coordinateController.create(start, end);\n  };\n  /**\n   * 根据 options 配置自动渲染 geometry\n   * @private\n   */\n\n\n  View.prototype.paintGeometries = function (isUpdate) {\n    var doAnimation = this.options.animate; // geometry 的 paint 阶段\n\n    var coordinate = this.getCoordinate();\n    var canvasRegion = {\n      x: this.viewBBox.x,\n      y: this.viewBBox.y,\n      minX: this.viewBBox.minX,\n      minY: this.viewBBox.minY,\n      maxX: this.viewBBox.maxX,\n      maxY: this.viewBBox.maxY,\n      width: this.viewBBox.width,\n      height: this.viewBBox.height\n    };\n    var geometries = this.geometries;\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geometry = geometries[i];\n      geometry.coordinate = coordinate;\n      geometry.canvasRegion = canvasRegion;\n\n      if (!doAnimation) {\n        // 如果 view 不执行动画，那么 view 下所有的 geometry 都不执行动画\n        geometry.animate(false);\n      }\n\n      geometry.paint(isUpdate);\n    }\n  };\n  /**\n   * 最后的绘制组件\n   * @param isUpdate\n   */\n\n\n  View.prototype.renderComponents = function (isUpdate) {\n    // 先全部清空，然后 render\n    for (var i = 0; i < this.getComponents().length; i++) {\n      var co = this.getComponents()[i];\n      co.component.render();\n    }\n  };\n  /**\n   * 渲染分面，会在其中进行数据分面，然后进行子 view 创建\n   * @param isUpdate\n   */\n\n\n  View.prototype.renderFacet = function (isUpdate) {\n    if (this.facetInstance) {\n      if (isUpdate) {\n        this.facetInstance.update();\n      } else {\n        this.facetInstance.clear(); // 计算分面数据\n\n        this.facetInstance.init(); // 渲染组件和 views\n\n        this.facetInstance.render();\n      }\n    }\n  };\n\n  View.prototype.initOptions = function () {\n    var _this = this;\n\n    var _a = this.options,\n        _b = _a.geometries,\n        geometries = _b === void 0 ? [] : _b,\n        _c = _a.interactions,\n        interactions = _c === void 0 ? [] : _c,\n        _d = _a.views,\n        views = _d === void 0 ? [] : _d,\n        _e = _a.annotations,\n        annotations = _e === void 0 ? [] : _e,\n        coordinate = _a.coordinate,\n        events = _a.events,\n        facets = _a.facets; // 设置坐标系\n\n    if (this.coordinateController) {\n      // 更新 coordinate controller\n      coordinate && this.coordinateController.update(coordinate);\n    } else {\n      // 创建 coordinate controller\n      this.coordinateController = new CoordinateController(coordinate);\n    } // 创建 geometry 实例\n\n\n    for (var i = 0; i < geometries.length; i++) {\n      var geometryOption = geometries[i];\n      this.createGeometry(geometryOption);\n    } // 创建 interactions 实例\n\n\n    for (var j = 0; j < interactions.length; j++) {\n      var interactionOption = interactions[j];\n      var type = interactionOption.type,\n          cfg = interactionOption.cfg;\n      this.interaction(type, cfg);\n    } // 创建 view 实例\n\n\n    for (var k = 0; k < views.length; k++) {\n      var viewOption = views[k];\n      this.createView(viewOption);\n    } // 设置 annotation\n\n\n    var annotationComponent = this.getController('annotation');\n\n    for (var l = 0; l < annotations.length; l++) {\n      var annotationOption = annotations[l];\n      annotationComponent.annotation(annotationOption);\n    } // 设置 events\n\n\n    if (events) {\n      each(events, function (eventCallback, eventName) {\n        _this.on(eventName, eventCallback);\n      });\n    }\n\n    if (facets) {\n      each(facets, function (facet) {\n        var type = facet.type,\n            rest = __rest(facet, [\"type\"]);\n\n        _this.facet(type, rest);\n      });\n    }\n  };\n\n  View.prototype.createGeometry = function (geometryOption) {\n    var type = geometryOption.type,\n        _a = geometryOption.cfg,\n        cfg = _a === void 0 ? {} : _a;\n\n    if (this[type]) {\n      var geometry_1 = this[type](cfg);\n      each(geometryOption, function (v, k) {\n        if (isFunction(geometry_1[k])) {\n          geometry_1[k](v);\n        }\n      });\n    }\n  };\n  /**\n   * scale key 的创建方式\n   * @param field\n   */\n\n\n  View.prototype.getScaleKey = function (field) {\n    return this.id + \"-\" + field;\n  };\n\n  return View;\n}(Base);\n\nexport { View };\n/**\n * 注册 geometry 组件\n * @param name\n * @param Ctor\n * @returns Geometry\n */\n\nexport function registerGeometry(name, Ctor) {\n  // 语法糖，在 view API 上增加原型方法\n  View.prototype[name.toLowerCase()] = function (cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n\n    var props = __assign({\n      /** 图形容器 */\n      container: this.middleGroup.addGroup(),\n      labelsContainer: this.foregroundGroup.addGroup()\n    }, cfg);\n\n    var geometry = new Ctor(props);\n    this.geometries.push(geometry);\n    return geometry;\n  };\n}\nexport default View;","map":{"version":3,"sources":["../../src/chart/view.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  clone,\n  deepMix,\n  each,\n  filter,\n  find,\n  flatten,\n  get,\n  isBoolean,\n  isFunction,\n  isNil,\n  isObject,\n  isString,\n  isUndefined,\n  mix,\n  remove,\n  set,\n  size,\n  uniqueId,\n  isEqual,\n  isPlainObject,\n} from '@antv/util';\nimport { Attribute, Coordinate, Event as GEvent, GroupComponent, ICanvas, IGroup, IShape, Scale } from '../dependents';\nimport {\n  AxisOption,\n  ComponentOption,\n  CoordinateCfg,\n  CoordinateOption,\n  Data,\n  Datum,\n  FacetCfgMap,\n  FilterCondition,\n  GeometryOption,\n  LegendOption,\n  LooseObject,\n  Options,\n  Point,\n  Region,\n  ScaleOption,\n  TooltipOption,\n  ViewCfg,\n  ViewPadding,\n  ViewAppendPadding,\n} from '../interface';\nimport { GROUP_Z_INDEX, LAYER, PLOT_EVENTS, VIEW_LIFE_CIRCLE } from '../constant';\nimport Base from '../base';\nimport { Facet, getFacet } from '../facet';\nimport Geometry from '../geometry/base';\nimport { createInteraction, Interaction } from '../interaction';\nimport { getTheme } from '../theme';\nimport { BBox } from '../util/bbox';\nimport { getCoordinateClipCfg, isPointInCoordinate } from '../util/coordinate';\nimport { uniq } from '../util/helper';\nimport { findDataByPoint } from '../util/tooltip';\nimport { parsePadding } from '../util/padding';\nimport { getDefaultCategoryScaleRange } from '../util/scale';\nimport { createTheme } from '../theme/util';\nimport Chart from './chart';\nimport { getComponentController, getComponentControllerNames } from './controller';\nimport Annotation from './controller/annotation';\nimport { Controller } from './controller/base';\nimport CoordinateController from './controller/coordinate';\nimport Tooltip from './controller/tooltip';\nimport Slider from './controller/slider';\nimport Scrollbar from './controller/scrollbar';\nimport Axis from './controller/axis';\nimport Gesture from './controller/gesture';\nimport Legend from './controller/legend';\nimport Event from './event';\nimport defaultLayout, { Layout } from './layout';\nimport { ScalePool } from './util/scale-pool';\nimport { PaddingCal } from './layout/padding-cal';\nimport { calculatePadding } from './layout/auto';\nimport { defaultSyncViewPadding } from './util/sync-view-padding';\n\n/**\n * G2 视图 View 类\n */\nexport class View extends Base {\n  /** view id，全局唯一。 */\n  public id: string;\n  /** 父级 view，如果没有父级，则为空。 */\n  public parent: View;\n  /** 所有的子 view。 */\n  public views: View[] = [];\n  /** 所有的 geometry 实例。 */\n  public geometries: Geometry[] = [];\n  /** 所有的组件 controllers。 */\n  public controllers: Controller[] = [];\n  /** 所有的 Interaction 实例。 */\n  public interactions: Record<string, Interaction> = {};\n\n  /** view 区域空间。 */\n  public viewBBox: BBox;\n  /** 坐标系的位置大小，ViewBBox - padding = coordinateBBox。 */\n  public coordinateBBox: BBox;\n  /** view 的 padding 大小，传入的配置（不是解析之后的值）。 */\n  public padding: ViewPadding;\n  /** padding的基础上增加的调整值 */\n  public appendPadding: ViewAppendPadding;\n  /** G.Canvas 实例。 */\n  public canvas: ICanvas;\n  /** 存储最终计算的 padding 结果 */\n  public autoPadding: PaddingCal;\n\n  /** 三层 Group 图形中的背景层。 */\n  public backgroundGroup: IGroup;\n  /** 三层 Group 图形中的中间层。 */\n  public middleGroup: IGroup;\n  /** 三层 Group 图形中的前景层。 */\n  public foregroundGroup: IGroup;\n  /** 是否对超出坐标系范围的 Geometry 进行剪切 */\n  public limitInPlot: boolean = false;\n\n  /**\n   * 标记 view 的大小位置范围，均是 0 ~ 1 范围，便于开发者使用，起始点为左上角。\n   */\n  protected region: Region;\n  /** 主题配置，存储当前主题配置。 */\n  protected themeObject: LooseObject;\n\n  // 配置信息存储\n  protected options: Options = {\n    data: [],\n    animate: true, // 默认开启动画\n  }; // 初始化为空\n\n  /** 过滤之后的数据 */\n  protected filteredData: Data;\n\n  /** 配置开启的组件插件，默认为全局配置的组件。 */\n  private usedControllers: string[] = getComponentControllerNames();\n\n  /** 所有的 scales */\n  private scalePool: ScalePool = new ScalePool();\n\n  /** 布局函数 */\n  protected layoutFunc: Layout = defaultLayout;\n  /** 生成的坐标系实例，{@link https://github.com/antvis/coord/blob/master/src/coord/base.ts|Coordinate} */\n  protected coordinateInstance: Coordinate;\n  /** Coordinate 相关的控制器类，负责坐标系实例的创建、更新、变换等 */\n  protected coordinateController: CoordinateController;\n  /** 分面类实例 */\n  protected facetInstance: Facet;\n\n  /** 当前鼠标是否在 plot 内（CoordinateBBox） */\n  private isPreMouseInPlot: boolean = false;\n  /** 默认标识位，用于判定数据是否更新 */\n  private isDataChanged: boolean = false;\n  /** 用于判断坐标系范围是否发生变化的标志位 */\n  private isCoordinateChanged: boolean = false;\n  /** 从当前这个 view 创建的 scale key */\n  private createdScaleKeys = new Map<string, boolean>();\n  /** 背景色样式的 shape */\n  private backgroundStyleRectShape;\n  /** 是否同步子 view 的 padding */\n  private syncViewPadding;\n\n  constructor(props: ViewCfg) {\n    super({ visible: props.visible });\n\n    const {\n      id = uniqueId('view'),\n      parent,\n      canvas,\n      backgroundGroup,\n      middleGroup,\n      foregroundGroup,\n      region = { start: { x: 0, y: 0 }, end: { x: 1, y: 1 } },\n      padding,\n      appendPadding,\n      theme,\n      options,\n      limitInPlot,\n      syncViewPadding,\n    } = props;\n\n    this.parent = parent;\n    this.canvas = canvas;\n    this.backgroundGroup = backgroundGroup;\n    this.middleGroup = middleGroup;\n    this.foregroundGroup = foregroundGroup;\n    this.region = region;\n    this.padding = padding;\n    this.appendPadding = appendPadding;\n    // 接受父 view 传入的参数\n    this.options = { ...this.options, ...options };\n    this.limitInPlot = limitInPlot;\n    this.id = id;\n    this.syncViewPadding = syncViewPadding;\n\n    // 初始化 theme\n    this.themeObject = isObject(theme) ? deepMix({}, getTheme('default'), createTheme(theme)) : getTheme(theme);\n    this.init();\n  }\n\n  /**\n   * 设置 layout 布局函数\n   * @param layout 布局函数\n   * @returns void\n   */\n  public setLayout(layout: Layout) {\n    this.layoutFunc = layout;\n  }\n\n  /**\n   * 生命周期：初始化\n   * @returns voids\n   */\n  public init() {\n    // 计算画布的 viewBBox\n    this.calculateViewBBox();\n\n    // 事件委托机制\n    this.initEvents();\n\n    // 初始化组件 controller\n    this.initComponentController();\n\n    this.initOptions();\n  }\n\n  /**\n   * 生命周期：渲染流程，渲染过程需要处理数据更新的情况。\n   * render 函数仅仅会处理 view 和子 view。\n   * @param isUpdate 是否触发更新流程。\n   */\n  public render(isUpdate: boolean = false) {\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_RENDER);\n    // 递归渲染\n    this.paint(isUpdate);\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_RENDER);\n\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  }\n\n  /**\n   * 生命周期：清空图表上所有的绘制内容，但是不销毁图表，chart 仍可使用。\n   * @returns void\n   */\n  public clear() {\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CLEAR);\n    // 1. 清空缓存和计算数据\n    this.filteredData = [];\n    this.coordinateInstance = undefined;\n    this.isDataChanged = false; // 复位\n    this.isCoordinateChanged = false; // 复位\n\n    // 2. 清空 geometries\n    const geometries = this.geometries;\n    for (let i = 0; i < geometries.length; i++) {\n      geometries[i].clear();\n      // view 中使用 geometry 的时候，还需要清空它的容器，不然下一次 chart.geometry() 的时候，又创建了一个，导致泄露， #2799。\n      geometries[i].container.remove(true);\n    }\n    this.geometries = [];\n\n    // 3. 清空 controllers\n    const controllers = this.controllers;\n    for (let i = 0; i < controllers.length; i++) {\n      if (controllers[i].name === 'annotation') {\n        // 需要清空配置项\n        (controllers[i] as Annotation).clear(true);\n      } else {\n        controllers[i].clear();\n      }\n    }\n\n    // 4. 删除 scale 缓存\n    this.createdScaleKeys.forEach((v: boolean, k: string) => {\n      this.getRootView().scalePool.deleteScale(k);\n    });\n    this.createdScaleKeys.clear();\n\n    // 递归处理子 view\n    const views = this.views;\n    for (let i = 0; i < views.length; i++) {\n      views[i].clear();\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CLEAR);\n  }\n\n  /**\n   * 生命周期：销毁，完全无法使用。\n   * @returns void\n   */\n  public destroy() {\n    // 销毁前事件，销毁之后已经没有意义了，所以不抛出事件\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_DESTROY);\n    const interactions = this.interactions;\n    // 销毁 interactions\n    each(interactions, (interaction) => {\n      if (interaction) {\n        // 有可能已经销毁，设置了 undefined\n        interaction.destroy();\n      }\n    });\n\n    this.clear();\n\n    // 销毁 controller 中的组件\n    const controllers = this.controllers;\n    for (let i = 0, len = controllers.length; i < len; i++) {\n      const controller = controllers[i];\n      controller.destroy();\n    }\n\n    this.backgroundGroup.remove(true);\n    this.middleGroup.remove(true);\n    this.foregroundGroup.remove(true);\n\n    super.destroy();\n  }\n  /* end 生命周期函数 */\n\n  /**\n   * 显示或者隐藏整个 view。\n   * @param visible 是否可见\n   * @returns View\n   */\n  public changeVisible(visible: boolean): View {\n    super.changeVisible(visible);\n\n    const geometries = this.geometries;\n    for (let i = 0, len = geometries.length; i < len; i++) {\n      const geometry = geometries[i];\n      geometry.changeVisible(visible);\n    }\n\n    const controllers = this.controllers;\n    for (let i = 0, len = controllers.length; i < len; i++) {\n      const controller = controllers[i];\n      controller.changeVisible(visible);\n    }\n\n    this.foregroundGroup.set('visible', visible);\n    this.middleGroup.set('visible', visible);\n    this.backgroundGroup.set('visible', visible);\n\n    // group.set('visible', visible) 不会触发自动刷新\n    this.getCanvas().draw();\n\n    return this;\n  }\n\n  /**\n   * 装载数据源。\n   *\n   * ```ts\n   * view.data([{ city: '杭州', sale: 100 }, { city: '上海', sale: 110 } ]);\n   * ```\n   *\n   * @param data 数据源，json 数组。\n   * @returns View\n   */\n  public data(data: Data): View {\n    set(this.options, 'data', data);\n    this.isDataChanged = true;\n    return this;\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #data(data)}\n   */\n  public source(data: Data): View {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.data() instead.');\n    return this.data(data);\n  }\n\n  /**\n   * 设置数据筛选规则。\n   *\n   * ```ts\n   * view.filter('city', (value: any, datum: Datum) => value !== '杭州');\n   *\n   * // 删除 'city' 字段对应的筛选规则。\n   * view.filter('city', null);\n   * ```\n   *\n   * @param field 数据字段\n   * @param condition 筛选规则\n   * @returns View\n   */\n  public filter(field: string, condition: FilterCondition | null): View {\n    if (isFunction(condition)) {\n      set(this.options, ['filters', field], condition);\n      return this;\n    }\n    // condition 为空，则表示删除过滤条件\n    if (!condition && get(this.options, ['filters', field])) {\n      delete this.options.filters[field];\n    }\n\n    return this;\n  }\n\n  /**\n   * 开启或者关闭坐标轴。\n   *\n   * ```ts\n   *  view.axis(false); // 不展示坐标轴\n   * ```\n   * @param field 坐标轴开关\n   */\n  public axis(field: boolean): View;\n  /**\n   * 对特定的某条坐标轴进行配置。\n   *\n   * @example\n   * ```ts\n   * view.axis('city', false); // 不展示 'city' 字段对应的坐标轴\n   *\n   * // 将 'city' 字段对应的坐标轴的标题隐藏\n   * view.axis('city', {\n   *   title: null,\n   * });\n   * ```\n   *\n   * @param field 要配置的坐标轴对应的字段名称\n   * @param axisOption 坐标轴具体配置，更详细的配置项可以参考：https://github.com/antvis/component#axis\n   */\n  public axis(field: string, axisOption: AxisOption): View;\n  public axis(field: string | boolean, axisOption?: AxisOption): View {\n    if (isBoolean(field)) {\n      set(this.options, ['axes'], field);\n    } else {\n      set(this.options, ['axes', field], axisOption);\n    }\n\n    return this;\n  }\n\n  /**\n   * 对图例进行整体配置。\n   *\n   * ```ts\n   * view.legend(false); // 关闭图例\n   *\n   * view.legend({\n   *   position: 'right',\n   * }); // 图例进行整体配置\n   * ```\n   * @param field\n   * @returns View\n   */\n  public legend(field: LegendOption): View;\n  /**\n   * 对特定的图例进行配置。\n   *\n   * @example\n   * ```ts\n   * view.legend('city', false); // 关闭某个图例，通过数据字段名进行关联\n   *\n   * // 对特定的图例进行配置\n   * view.legend('city', {\n   *   position: 'right',\n   * });\n   * ```\n   *\n   * @param field 图例对应的数据字段名称\n   * @param legendOption 图例配置，更详细的配置项可以参考：https://github.com/antvis/component#axis\n   * @returns View\n   */\n  public legend(field: string, legendOption: LegendOption): View;\n  public legend(field: string | LegendOption, legendOption?: LegendOption): View {\n    if (isBoolean(field)) {\n      set(this.options, ['legends'], field);\n    } else if (isString(field)) {\n      set(this.options, ['legends', field], legendOption);\n      if (isPlainObject(legendOption) && legendOption?.selected) {\n        set(this.options, ['filters', field], (name: string) => {\n          return legendOption?.selected[name] ?? true;\n        });\n      }\n    } else {\n      // 设置全局的 legend 配置\n      set(this.options, ['legends'], field);\n    }\n\n    return this;\n  }\n\n  /**\n   * 批量设置 scale 配置。\n   *\n   * ```ts\n   * view.scale({\n   *   sale: {\n   *     min: 0,\n   *     max: 100,\n   *   }\n   * });\n   * ```\n   * Scale 的详细配置项可以参考：https://github.com/antvis/scale#api\n   * @returns View\n   */\n  public scale(field: Record<string, ScaleOption>): View;\n  /**\n   * 为特性的数据字段进行 scale 配置。\n   *\n   * ```ts\n   * view.scale('sale', {\n   *   min: 0,\n   *   max: 100,\n   * });\n   * ```\n   *\n   * @returns View\n   */\n  public scale(field: string, scaleOption: ScaleOption): View;\n  public scale(field: string | Record<string, ScaleOption>, scaleOption?: ScaleOption): View {\n    if (isString(field)) {\n      set(this.options, ['scales', field], scaleOption);\n    } else if (isObject(field)) {\n      each(field, (v: ScaleOption, k: string) => {\n        set(this.options, ['scales', k], v);\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * tooltip 提示信息配置。\n   *\n   * ```ts\n   * view.tooltip(false); // 关闭 tooltip\n   *\n   * view.tooltip({\n   *   shared: true\n   * });\n   * ```\n   *\n   * @param cfg Tooltip 配置，更详细的配置项参考：https://github.com/antvis/component#tooltip\n   * @returns View\n   */\n  public tooltip(cfg: boolean | TooltipOption): View {\n    set(this.options, 'tooltip', cfg);\n\n    return this;\n  }\n\n  /**\n   * 辅助标记配置。\n   *\n   * ```ts\n   * view.annotation().line({\n   *   start: ['min', 85],\n   *   end: ['max', 85],\n   *   style: {\n   *     stroke: '#595959',\n   *     lineWidth: 1,\n   *     lineDash: [3, 3],\n   *   },\n   * });\n   * ```\n   * 更详细的配置项：https://github.com/antvis/component#annotation\n   * @returns [[Annotation]]\n   */\n  public annotation(): Annotation {\n    return this.getController('annotation');\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #guide()}\n   */\n  public guide(): Annotation {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.annotation() instead.');\n    return this.annotation();\n  }\n\n  /**\n   * 坐标系配置。\n   *\n   * @example\n   * ```ts\n   * view.coordinate({\n   *   type: 'polar',\n   *   cfg: {\n   *     radius: 0.85,\n   *   },\n   *   actions: [\n   *     [ 'transpose' ],\n   *   ],\n   * });\n   * ```\n   *\n   * @param option\n   * @returns\n   */\n  public coordinate(option?: CoordinateOption): CoordinateController;\n  /**\n   * 声明坐标系类型，并进行配置。\n   *\n   * ```ts\n   * // 直角坐标系，并进行转置变换\n   * view.coordinate('rect').transpose();\n   *\n   * // 默认创建直角坐标系\n   * view.coordinate();\n   * ```\n   *\n   * @param type 坐标系类型\n   * @param [coordinateCfg] 坐标系配置\n   * @returns\n   */\n  public coordinate(type: string, coordinateCfg?: CoordinateCfg): CoordinateController;\n  public coordinate(type: string | CoordinateOption, coordinateCfg?: CoordinateCfg): CoordinateController {\n    // 提供语法糖，使用更简单\n    if (isString(type)) {\n      set(this.options, 'coordinate', { type, cfg: coordinateCfg } as CoordinateOption);\n    } else {\n      set(this.options, 'coordinate', type);\n    }\n\n    // 更新 coordinate 配置\n    this.coordinateController.update(this.options.coordinate);\n\n    return this.coordinateController;\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #coordinate()}\n   */\n  public coord(type: string | CoordinateOption, coordinateCfg?: CoordinateCfg): CoordinateController {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.coordinate() instead.');\n    // @ts-ignore\n    return this.coordinate(type, coordinateCfg);\n  }\n\n  /**\n   * view 分面绘制。\n   *\n   * ```ts\n   * view.facet('rect', {\n   *   rowField: 'province',\n   *   columnField: 'category',\n   *   eachView: (innerView: View, facet?: FacetData) => {\n   *     innerView.line().position('city*sale');\n   *   },\n   * });\n   * ```\n   *\n   * @param type 分面类型\n   * @param cfg 分面配置， [[FacetCfgMap]]\n   * @returns View\n   */\n  public facet<T extends keyof FacetCfgMap>(type: T, cfg: FacetCfgMap[T]): View {\n    // 先销毁掉之前的分面\n    if (this.facetInstance) {\n      this.facetInstance.destroy();\n    }\n\n    // 创建新的分面\n    const Ctor = getFacet(type);\n\n    if (!Ctor) {\n      throw new Error(`facet '${type}' is not exist!`);\n    }\n\n    this.facetInstance = new Ctor(this, { ...cfg, type });\n\n    return this;\n  }\n\n  /*\n   * 开启或者关闭动画。\n   *\n   * ```ts\n   * view.animate(false);\n   * ```\n   *\n   * @param status 动画状态，true 表示开始，false 表示关闭\n   * @returns View\n   */\n  public animate(status: boolean): View {\n    set(this.options, 'animate', status);\n    return this;\n  }\n\n  /**\n   * 更新配置项，用于配置项式声明。\n   * @param options 配置项\n   */\n  public updateOptions(options: Options) {\n    this.clear(); // 清空\n    mix(this.options, options);\n\n    // 需要把已存在的 view 销毁，否则会重复创建\n    // 目前针对配置项还没有特别好的 view 更新机制，为了不影响主流流程，所以在这里直接销毁\n    this.views.forEach((view) => view.destroy());\n    this.views = [];\n\n    this.initOptions();\n    // 初始化坐标系大小，保证 padding 计算正确\n    this.coordinateBBox = this.viewBBox;\n    return this;\n  }\n\n  /**\n   * 往 `view.options` 属性中存储配置项。\n   * @param name 属性名称\n   * @param opt 属性值\n   * @returns view\n   */\n  public option(name: string, opt: any): View {\n    // 对于内置的 option，避免覆盖。\n    // name 在原型上，说明可能是内置 API，存在 option 被覆盖的风险，不处理\n    if (View.prototype[name]) {\n      throw new Error(`Can't use built in variable name \"${name}\", please change another one.`);\n    }\n\n    // 存入到 option 中\n    set(this.options, name, opt);\n    return this;\n  }\n\n  /**\n   * 设置主题。\n   *\n   * ```ts\n   * view.theme('dark'); // 'dark' 需要事先通过 `registerTheme()` 接口注册完成\n   *\n   * view.theme({ defaultColor: 'red' });\n   * ```\n   *\n   * @param theme 主题名或者主题配置\n   * @returns View\n   */\n  public theme(theme: string | LooseObject): View {\n    this.themeObject = isObject(theme) ? deepMix({}, this.themeObject, createTheme(theme)) : getTheme(theme);\n\n    return this;\n  }\n\n  /* end 一系列传入配置的 API */\n\n  /**\n   * Call the interaction based on the interaction name\n   *\n   * ```ts\n   * view.interaction('my-interaction', { extra: 'hello world' });\n   * ```\n   * 详细文档可以参考：https://g2.antv.vision/zh/docs/api/general/interaction\n   * @param name interaction name\n   * @param cfg interaction config\n   * @returns\n   */\n  public interaction(name: string, cfg?: LooseObject): View {\n    const existInteraction = this.interactions[name];\n    // 存在则先销毁已有的\n    if (existInteraction) {\n      existInteraction.destroy();\n    }\n\n    // 新建交互实例\n    const interaction = createInteraction(name, this, cfg);\n    if (interaction) {\n      interaction.init();\n      this.interactions[name] = interaction;\n    }\n    return this;\n  }\n\n  /**\n   * 移除当前 View 的 interaction\n   * ```ts\n   * view.removeInteraction('my-interaction');\n   * ```\n   * @param name interaction name\n   */\n  public removeInteraction(name: string) {\n    const existInteraction = this.interactions[name];\n    // 存在则先销毁已有的\n    if (existInteraction) {\n      existInteraction.destroy();\n      this.interactions[name] = undefined;\n    }\n  }\n\n  /**\n   * 修改数据，数据更新逻辑，数据更新仅仅影响当前这一层的 view\n   *\n   * ```ts\n   * view.changeData([{ city: '北京', sale: '200' }]);\n   * ```\n   *\n   * @param data\n   * @returns void\n   */\n  public changeData(data: Data) {\n    this.isDataChanged = true;\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    // 1. 保存数据\n    this.data(data);\n\n    // 2. 渲染\n    this.paint(true);\n\n    // 3. 遍历子 view 进行 change data\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      // FIXME 子 view 有自己的数据的情况，该如何处理？\n      view.changeData(data);\n    }\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  }\n\n  /* View 管理相关的 API */\n\n  /**\n   * 创建子 view\n   *\n   * ```ts\n   * const innerView = view.createView({\n   *   start: { x: 0, y: 0 },\n   *   end: { x: 0.5, y: 0.5 },\n   *   padding: 8,\n   * });\n   * ```\n   *\n   * @param cfg\n   * @returns View\n   */\n  public createView(cfg?: Partial<ViewCfg>): View {\n    // 将会在 4.1 版本中移除递归嵌套 view，仅仅只允许 chart - view 两层。\n    // 这个 API 理论上用户量不多，所以暂时不发大版本，所以先暂时打一个 warning。\n    if (this.parent && this.parent.parent) {\n      // 存在 3 层 结构了\n      console.warn('The view nesting recursive feature will be removed at G2 V4.1. Please avoid to use it.');\n    }\n\n    // 子 view 共享 options 配置数据\n    const sharedOptions = {\n      data: this.options.data,\n      scales: clone(this.options.scales),\n      axes: clone(this.options.axes),\n      coordinate: clone(this.coordinateController.getOption()),\n      tooltip: clone(this.options.tooltip),\n      legends: clone(this.options.legends),\n      animate: this.options.animate,\n      visible: this.visible,\n    };\n\n    const v = new View({\n      parent: this,\n      canvas: this.canvas,\n      // 子 view 共用三层 group\n      backgroundGroup: this.backgroundGroup.addGroup({ zIndex: GROUP_Z_INDEX.BG }),\n      middleGroup: this.middleGroup.addGroup({ zIndex: GROUP_Z_INDEX.MID }),\n      foregroundGroup: this.foregroundGroup.addGroup({ zIndex: GROUP_Z_INDEX.FORE }),\n      theme: this.themeObject,\n      padding: this.padding,\n      ...cfg,\n      options: {\n        ...sharedOptions,\n        ...get(cfg, 'options', {}),\n      },\n    });\n\n    this.views.push(v);\n\n    return v;\n  }\n\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #createView()}\n   */\n  public view(cfg?: Partial<ViewCfg>) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.createView() instead.');\n    return this.createView(cfg);\n  }\n\n  /**\n   * 删除一个子 view\n   * @param view\n   * @return removedView\n   */\n  public removeView(view: View): View {\n    const removedView = remove(this.views, (v: View) => v === view)[0];\n\n    if (removedView) {\n      removedView.destroy();\n    }\n\n    return removedView;\n  }\n  /* end View 管理相关的 API */\n\n  // 一些 get 方法\n\n  /**\n   * 获取当前坐标系实例。\n   * @returns [[Coordinate]]\n   */\n  public getCoordinate() {\n    return this.coordinateInstance;\n  }\n\n  /**\n   * 获取当前 view 的主题配置。\n   * @returns themeObject\n   */\n  public getTheme(): LooseObject {\n    return this.themeObject;\n  }\n\n  /**\n   * 获得 x 轴字段的 scale 实例。\n   * @returns view 中 Geometry 对于的 x scale\n   */\n  public getXScale(): Scale {\n    // 拿第一个 Geometry 的 X scale\n    // 隐藏逻辑：一个 view 中的 Geometry 必须 x 字段一致\n    const g = this.geometries[0];\n    return g ? g.getXScale() : null;\n  }\n\n  /**\n   * 获取 y 轴字段的 scales 实例。\n   * @returns view 中 Geometry 对于的 y scale 数组\n   */\n  public getYScales(): Scale[] {\n    // 拿到所有的 Geometry 的 Y scale，然后去重\n    const tmpMap = {};\n    return this.geometries.map((g: Geometry) => {\n      const yScale = g.getYScale();\n      const field = yScale.field;\n      if (!tmpMap[field]) {\n        tmpMap[field] = true;\n        return yScale;\n      }\n    });\n  }\n\n  /**\n   * 获取 x 轴或者 y 轴对应的所有 scale 实例。\n   * @param dimType x | y\n   * @returns x 轴或者 y 轴对应的所有 scale 实例。\n   */\n  public getScalesByDim(dimType: 'x' | 'y'): Record<string, Scale> {\n    const geometries = this.geometries;\n    const scales = {};\n\n    for (let i = 0, len = geometries.length; i < len; i++) {\n      const geometry = geometries[i];\n      const scale = dimType === 'x' ? geometry.getXScale() : geometry.getYScale();\n      if (scale && !scales[scale.field]) {\n        scales[scale.field] = scale;\n      }\n    }\n\n    return scales;\n  }\n\n  /**\n   * 根据字段名去获取 scale 实例。\n   * @param field 数据字段名称\n   * @param key id\n   */\n  public getScaleByField(field: string, key?: string): Scale {\n    const defaultKey = key ? key : this.getScaleKey(field);\n    // 调用根节点 view 的方法获取\n    return this.getRootView().scalePool.getScale(defaultKey);\n  }\n\n  /**\n   * 返回所有配置信息。\n   * @returns 所有的 view API 配置。\n   */\n  public getOptions(): Options {\n    return this.options;\n  }\n\n  /**\n   * 获取 view 的数据（过滤后的数据）。\n   * @returns 处理过滤器之后的数据。\n   */\n  public getData() {\n    return this.filteredData;\n  }\n\n  /**\n   * 获得绘制的层级 group。\n   * @param layer 层级名称。\n   * @returns 对应层级的 Group。\n   */\n  public getLayer(layer: LAYER): IGroup {\n    return layer === LAYER.BG\n      ? this.backgroundGroup\n      : layer === LAYER.MID\n      ? this.middleGroup\n      : layer === LAYER.FORE\n      ? this.foregroundGroup\n      : this.foregroundGroup;\n  }\n\n  /**\n   * 对外暴露方法，判断一个点是否在绘图区域（即坐标系范围）内部。\n   * @param point 坐标点\n   */\n  public isPointInPlot(point: Point): boolean {\n    return isPointInCoordinate(this.getCoordinate(), point);\n  }\n\n  /**\n   * 获得所有的 legend 对应的 attribute 实例。\n   * @returns 维度字段的 Attribute 数组\n   */\n  public getLegendAttributes(): Attribute[] {\n    return (flatten(this.geometries.map((g: Geometry) => g.getGroupAttributes())) as unknown) as Attribute[];\n  }\n\n  /**\n   * 获取所有的分组字段的 scale 实例。\n   * @returns 获得分组字段的 scale 实例数组。\n   */\n  public getGroupScales(): Scale[] {\n    // 拿到所有的 Geometry 的 分组字段 scale，然后打平去重\n    const scales = this.geometries.map((g: Geometry) => g.getGroupScales());\n    return uniq(flatten(scales));\n  }\n\n  /**\n   * 获取 G.Canvas 实例。\n   * @returns G.Canvas 画布实例。\n   */\n  public getCanvas(): ICanvas {\n    return ((this.getRootView() as unknown) as Chart).canvas;\n  }\n\n  /**\n   * 获得根节点 view。\n   */\n  public getRootView(): View {\n    let v = this as View;\n\n    while (true) {\n      if (v.parent) {\n        v = v.parent;\n        continue;\n      }\n      break;\n    }\n    return v;\n  }\n\n  /**\n   * 获取该数据在可视化后，对应的画布坐标点。\n   * @param data 原始数据记录\n   * @returns 对应的画布坐标点\n   */\n  public getXY(data: Datum): Point {\n    const coordinate = this.getCoordinate();\n    const xScales = this.getScalesByDim('x');\n    const yScales = this.getScalesByDim('y');\n    let x;\n    let y;\n\n    each(data, (value, key) => {\n      if (xScales[key]) {\n        x = xScales[key].scale(value);\n      }\n      if (yScales[key]) {\n        y = yScales[key].scale(value);\n      }\n    });\n\n    if (!isNil(x) && !isNil(y)) {\n      return coordinate.convert({ x, y });\n    }\n  }\n\n  public getController(name: 'tooltip'): Tooltip;\n  public getController(name: 'axis'): Axis;\n  public getController(name: 'legend'): Legend;\n  public getController(name: 'scrollbar'): Scrollbar;\n  public getController(name: 'slider'): Slider;\n  public getController(name: 'annotation'): Annotation;\n  public getController(name: 'gestucre'): Gesture;\n  public getController(name: string): Controller;\n  /**\n   * 获取 name 对应的 controller 实例\n   * @param name\n   */\n  public getController(name: string): Controller {\n    return find(this.controllers, (c: Controller) => c.name === name);\n  }\n\n  /**\n   * 显示 point 坐标点对应的 tooltip。\n   * @param point 画布坐标点\n   * @returns View\n   */\n  public showTooltip(point: Point): View {\n    const tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.showTooltip(point);\n    }\n    return this;\n  }\n\n  /**\n   * 隐藏 tooltip。\n   * @returns View\n   */\n  public hideTooltip(): View {\n    const tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.hideTooltip();\n    }\n    return this;\n  }\n\n  /**\n   * 将 tooltip 锁定到当前位置不能移动。\n   * @returns View\n   */\n  public lockTooltip(): View {\n    const tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.lockTooltip();\n    }\n    return this;\n  }\n\n  /**\n   * 将 tooltip 锁定解除。\n   * @returns View\n   */\n  public unlockTooltip(): View {\n    const tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.unlockTooltip();\n    }\n    return this;\n  }\n\n  /**\n   * 是否锁定 tooltip。\n   * @returns 是否锁定\n   */\n  public isTooltipLocked() {\n    const tooltip = this.getController('tooltip');\n    return tooltip && tooltip.isTooltipLocked();\n  }\n\n  /**\n   * 获取当前 point 对应的 tooltip 数据项。\n   * @param point 坐标点\n   * @returns tooltip 数据项\n   */\n  public getTooltipItems(point: Point) {\n    const tooltip = this.getController('tooltip');\n\n    return tooltip ? tooltip.getTooltipItems(point) : [];\n  }\n\n  /**\n   * 获取逼近的点的数据集合\n   * @param point 当前坐标点\n   * @returns  数据\n   */\n  public getSnapRecords(point: Point) {\n    const geometries = this.geometries;\n    let rst = [];\n    for (let i = 0, len = geometries.length; i < len; i++) {\n      const geom = geometries[i];\n      const dataArray = geom.dataArray;\n      geom.sort(dataArray); // 先进行排序，便于 tooltip 查找\n      let record;\n      for (let j = 0, dataLen = dataArray.length; j < dataLen; j++) {\n        const data = dataArray[j];\n        record = findDataByPoint(point, data, geom);\n        if (record) {\n          rst.push(record);\n        }\n      }\n    }\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      const snapRecords = view.getSnapRecords(point);\n      rst = rst.concat(snapRecords);\n    }\n\n    return rst;\n  }\n\n  /**\n   * 获取所有的 pure component 组件，用于布局。\n   */\n  public getComponents(): ComponentOption[] {\n    let components = [];\n    const controllers = this.controllers;\n    for (let i = 0, len = controllers.length; i < len; i++) {\n      const controller = controllers[i];\n      components = components.concat(controller.getComponents());\n    }\n\n    return components;\n  }\n\n  /**\n   * 将 data 数据进行过滤。\n   * @param data\n   * @returns 过滤之后的数据\n   */\n  public filterData(data: Data): Data {\n    const { filters } = this.options;\n    // 不存在 filters，则不需要进行数据过滤\n    if (size(filters) === 0) {\n      return data;\n    }\n\n    // 存在过滤器，则逐个执行过滤，过滤器之间是 与 的关系\n    return filter(data, (datum: Datum, idx: number) => {\n      // 所有的 filter 字段\n      const fields = Object.keys(filters);\n\n      // 所有的条件都通过，才算通过\n      return fields.every((field: string) => {\n        const condition = filters[field];\n\n        // condition 返回 true，则保留\n        return condition(datum[field], datum, idx);\n      });\n    });\n  }\n\n  /**\n   * 对某一个字段进行过滤\n   * @param field\n   * @param data\n   */\n  public filterFieldData(field: string, data: Data): Data {\n    const { filters } = this.options;\n    const condition = get(filters, field);\n\n    if (isUndefined(condition)) {\n      return data;\n    }\n    return data.filter((datum: Datum, idx: number) => condition(datum[field], datum, idx));\n  }\n\n  /**\n   * 调整 coordinate 的坐标范围。\n   */\n  public adjustCoordinate() {\n    const { start: curStart, end: curEnd } = this.getCoordinate();\n    const start = this.coordinateBBox.bl;\n    const end = this.coordinateBBox.tr;\n\n    // 在 defaultLayoutFn 中只会在 coordinateBBox 发生变化的时候会调用 adjustCoordinate()，所以不用担心被置位\n    if (isEqual(curStart, start) && isEqual(curEnd, end)) {\n      this.isCoordinateChanged = false;\n      // 如果大小没有变化则不更新\n      return;\n    }\n    this.isCoordinateChanged = true;\n    this.coordinateInstance = this.coordinateController.adjust(start, end);\n  }\n\n  protected paint(isUpdate: boolean) {\n    this.renderDataRecursive(isUpdate);\n\n    // 处理 sync scale 的逻辑\n    this.syncScale();\n\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_PAINT);\n\n    // 初始化图形、组件位置，计算 padding\n    this.renderPaddingRecursive(isUpdate);\n    // 布局图形、组件\n    this.renderLayoutRecursive(isUpdate);\n    // 背景色 shape\n    this.renderBackgroundStyleShape();\n    // 最终的绘制 render\n    this.renderPaintRecursive(isUpdate);\n\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_PAINT);\n\n    this.isDataChanged = false; // 渲染完毕复位\n  }\n\n  /**\n   * 渲染背景样式的 shape。\n   * 放到 view 中创建的原因是让使用 view 绘制图形的时候，也能够处理背景色\n   */\n  private renderBackgroundStyleShape() {\n    // 只有根节点才处理\n    if (this.parent) {\n      return;\n    }\n    const background = get(this.themeObject, 'background');\n    // 配置了背景色\n    if (background) {\n      // 1. 不存在则创建\n      if (!this.backgroundStyleRectShape) {\n        this.backgroundStyleRectShape = this.backgroundGroup.addShape('rect', {\n          attrs: {},\n          zIndex: -1,\n          // 背景色 shape 不设置事件捕获\n          capture: false,\n        });\n        this.backgroundStyleRectShape.toBack();\n      }\n\n      // 2. 有了 shape 之后设置背景，位置（更新的时候）\n      const { x, y, width, height } = this.viewBBox;\n      this.backgroundStyleRectShape.attr({\n        fill: background,\n        x,\n        y,\n        width,\n        height,\n      });\n    } else {\n      // 没有配置背景色\n      if (this.backgroundStyleRectShape) {\n        this.backgroundStyleRectShape.remove(true);\n        this.backgroundStyleRectShape = undefined;\n      }\n    }\n  }\n\n  /**\n   * 递归计算每个 view 的 padding 值，coordinateBBox 和 coordinateInstance\n   * @param isUpdate\n   */\n  protected renderPaddingRecursive(isUpdate: boolean) {\n    // 1. 子 view 大小相对 coordinateBBox，changeSize 的时候需要重新计算\n    this.calculateViewBBox();\n    // 2. 更新 coordinate\n    this.adjustCoordinate();\n    // 3. 初始化组件 component\n    this.initComponents(isUpdate);\n    // 4. 布局计算每隔 view 的 padding 值\n    // 4.1. 自动加 auto padding -> absolute padding，并且增加 appendPadding\n    this.autoPadding = calculatePadding(this).shrink(parsePadding(this.appendPadding));\n    // 4.2. 计算出新的 coordinateBBox，更新 Coordinate\n    // 这里必须保留，原因是后面子 view 的 viewBBox 或根据 parent 的 coordinateBBox\n    this.coordinateBBox = this.viewBBox.shrink(this.autoPadding.getPadding());\n    this.adjustCoordinate();\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      view.renderPaddingRecursive(isUpdate);\n    }\n  }\n\n  /**\n   * 递归处理 view 的布局，最终是计算各个 view 的 coordinateBBox 和 coordinateInstance\n   * @param isUpdate\n   */\n  protected renderLayoutRecursive(isUpdate: boolean) {\n    // 1. 同步子 view padding\n    // 根据配置获取 padding\n    const syncViewPaddingFn =\n      this.syncViewPadding === true\n        ? defaultSyncViewPadding\n        : isFunction(this.syncViewPadding)\n        ? this.syncViewPadding\n        : undefined;\n\n    if (syncViewPaddingFn) {\n      syncViewPaddingFn(this, this.views, PaddingCal);\n      // 同步 padding 之后，更新 coordinate\n      this.views.forEach((v: View) => {\n        v.coordinateBBox = v.viewBBox.shrink(v.autoPadding.getPadding());\n        v.adjustCoordinate();\n      });\n    }\n\n    // 3. 将 view 中的组件按照 view padding 移动到对应的位置\n    this.doLayout();\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      view.renderLayoutRecursive(isUpdate);\n    }\n  }\n\n  /**\n   * 最终递归绘制组件和图形\n   * @param isUpdate\n   */\n  protected renderPaintRecursive(isUpdate: boolean) {\n    const middleGroup = this.middleGroup;\n    if (this.limitInPlot) {\n      const { type, attrs } = getCoordinateClipCfg(this.coordinateInstance);\n      middleGroup.setClip({\n        type,\n        attrs,\n      });\n    } else {\n      // 清除已有的 clip\n      middleGroup.setClip(undefined);\n    }\n\n    // 1. 渲染几何标记\n    this.paintGeometries(isUpdate);\n    // 2. 绘制组件\n    this.renderComponents(isUpdate);\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      view.renderPaintRecursive(isUpdate);\n    }\n  }\n\n  // end Get 方法\n\n  /**\n   * 创建 scale，递归到顶层 view 去创建和缓存 scale\n   * @param field\n   * @param data\n   * @param scaleDef\n   * @param key\n   */\n  protected createScale(field: string, data: Data, scaleDef: ScaleOption, key: string): Scale {\n    // 1. 合并 field 对应的 scaleDef，合并原则是底层覆盖顶层（就近原则）\n    const currentScaleDef = get(this.options.scales, [field]);\n    const mergedScaleDef = { ...currentScaleDef, ...scaleDef };\n\n    // 2. 是否存在父 view，在则递归，否则创建\n    if (this.parent) {\n      return this.parent.createScale(field, data, mergedScaleDef, key);\n    }\n\n    // 3. 在根节点 view 通过 scalePool 创建\n    return this.scalePool.createScale(field, data, mergedScaleDef, key);\n  }\n\n  /**\n   * 递归渲染中的数据处理\n   * @param isUpdate\n   */\n  private renderDataRecursive(isUpdate: boolean) {\n    // 1. 处理数据\n    this.doFilterData();\n    // 2. 创建实例\n    this.createCoordinate();\n    // 3. 初始化 Geometry\n    this.initGeometries(isUpdate);\n    // 4. 处理分面逻辑，最终都是生成子 view 和 geometry\n    this.renderFacet(isUpdate);\n\n    // 同样递归处理子 views\n    const views = this.views;\n    for (let i = 0, len = views.length; i < len; i++) {\n      const view = views[i];\n      view.renderDataRecursive(isUpdate);\n    }\n  }\n\n  /**\n   * 计算 region，计算实际的像素范围坐标\n   * @private\n   */\n  private calculateViewBBox() {\n    let x;\n    let y;\n    let width;\n    let height;\n\n    if (this.parent) {\n      const bbox = this.parent.coordinateBBox;\n      // 存在 parent， 那么就是通过父容器大小计算\n      x = bbox.x;\n      y = bbox.y;\n      width = bbox.width;\n      height = bbox.height;\n    } else {\n      // 顶层容器，从 canvas 中取值 宽高\n      x = 0;\n      y = 0;\n      width = this.canvas.get('width');\n      height = this.canvas.get('height');\n    }\n\n    const { start, end } = this.region;\n\n    // 根据 region 计算当前 view 的 bbox 大小。\n    const viewBBox = new BBox(\n      x + width * start.x,\n      y + height * start.y,\n      width * (end.x - start.x),\n      height * (end.y - start.y)\n    );\n\n    if (!this.viewBBox || !this.viewBBox.isEqual(viewBBox)) {\n      // viewBBox 发生变化的时候进行更新\n      this.viewBBox = new BBox(\n        x + width * start.x,\n        y + height * start.y,\n        width * (end.x - start.x),\n        height * (end.y - start.y)\n      );\n    }\n\n    // 初始的 coordinate bbox 大小\n    this.coordinateBBox = this.viewBBox;\n  }\n\n  /**\n   * 初始化事件机制：G 4.0 底层内置支持 name:event 的机制，那么只要所有组件都有自己的 name 即可。\n   *\n   * G2 的事件只是获取事件委托，然后在 view 嵌套结构中，形成事件冒泡机制。\n   * 当前 view 只委托自己 view 中的 Component 和 Geometry 事件，并向上冒泡\n   * @private\n   */\n  private initEvents() {\n    // 三层 group 中的 shape 事件都会通过 G 冒泡上来的\n    this.foregroundGroup.on('*', this.onDelegateEvents);\n    this.middleGroup.on('*', this.onDelegateEvents);\n    this.backgroundGroup.on('*', this.onDelegateEvents);\n\n    this.canvas.on('*', this.onCanvasEvent);\n  }\n\n  private onCanvasEvent = (evt: GEvent): void => {\n    const name = evt.name;\n    if (!name.includes(':')) {\n      // 非委托事件\n      const e = this.createViewEvent(evt);\n      // 处理 plot 事件\n      this.doPlotEvent(e);\n      this.emit(name, e);\n    }\n  };\n\n  /**\n   * 初始化插件\n   */\n  private initComponentController() {\n    const usedControllers = this.usedControllers;\n    for (let i = 0, len = usedControllers.length; i < len; i++) {\n      const controllerName = usedControllers[i];\n      const Ctor = getComponentController(controllerName);\n      if (Ctor) {\n        this.controllers.push(new Ctor(this));\n      }\n    }\n  }\n\n  private createViewEvent(evt: GEvent) {\n    const { shape, name } = evt;\n\n    const data = shape ? shape.get('origin') : null;\n    // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n    const e = new Event(this, evt, data);\n    e.type = name;\n    return e;\n  }\n  /**\n   * 触发事件之后\n   * @param evt\n   */\n  private onDelegateEvents = (evt: GEvent): void => {\n    // 阻止继续冒泡，防止重复事件触发\n    // evt.preventDefault();\n    const { name } = evt;\n    if (!name.includes(':')) {\n      return;\n    }\n    // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n    const e = this.createViewEvent(evt);\n\n    // 包含有基本事件、组合事件\n    this.emit(name, e);\n    // const currentTarget = evt.currentTarget as IShape;\n    // const inheritNames = currentTarget.get('inheritNames');\n    // if (evt.delegateObject || inheritNames) {\n    //   const events = this.getEvents();\n    //   each(inheritNames, (subName) => {\n    //     const eventName = `${subName}:${type}`;\n    //     if (events[eventName]) {\n    //       this.emit(eventName, e);\n    //     }\n    //   });\n    // }\n  };\n\n  /**\n   * 处理 PLOT_EVENTS\n   * plot event 需要处理所有的基础事件，并判断是否在画布中，然后再决定是否要 emit。\n   * 对于 mouseenter、mouseleave 比较特殊，需要做一下数学比较。\n   * @param e\n   */\n  private doPlotEvent(e: Event) {\n    const { type, x, y } = e;\n\n    const point = { x, y };\n\n    const ALL_EVENTS = [\n      'mousedown',\n      'mouseup',\n      'mousemove',\n      'mouseleave',\n      'mousewheel',\n      'touchstart',\n      'touchmove',\n      'touchend',\n      'touchcancel',\n      'click',\n      'dblclick',\n      'contextmenu',\n    ];\n\n    if (ALL_EVENTS.includes(type)) {\n      const currentInPlot = this.isPointInPlot(point);\n      const newEvent = e.clone();\n\n      if (currentInPlot) {\n        const TYPE = `plot:${type}`; // 组合 plot 事件\n        newEvent.type = TYPE;\n        this.emit(TYPE, newEvent);\n        if (type === 'mouseleave' || type === 'touchend') {\n          // 在plot 内部却离开画布\n          this.isPreMouseInPlot = false;\n        }\n      }\n\n      // 对于 mouseenter, mouseleave 的计算处理\n      if (type === 'mousemove' || type === 'touchmove') {\n        if (this.isPreMouseInPlot && !currentInPlot) {\n          if (type === 'mousemove') {\n            newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, newEvent);\n        } else if (!this.isPreMouseInPlot && currentInPlot) {\n          if (type === 'mousemove') {\n            newEvent.type = PLOT_EVENTS.MOUSE_ENTER;\n            this.emit(PLOT_EVENTS.MOUSE_ENTER, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.ENTER;\n          this.emit(PLOT_EVENTS.ENTER, newEvent);\n        }\n        // 赋新的状态值\n        this.isPreMouseInPlot = currentInPlot;\n      } else if (type === 'mouseleave' || type === 'touchend') {\n        // 可能不在 currentInPlot 中\n        if (this.isPreMouseInPlot) {\n          if (type === 'mouseleave') {\n            newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, newEvent);\n\n          this.isPreMouseInPlot = false;\n        }\n      }\n    }\n  }\n\n  // view 生命周期 —— 渲染流程\n\n  /**\n   * 处理筛选器，筛选数据\n   * @private\n   */\n  private doFilterData() {\n    const { data } = this.options;\n    this.filteredData = this.filterData(data);\n  }\n\n  /**\n   * 初始化 Geometries\n   * @private\n   */\n  private initGeometries(isUpdate: boolean) {\n    // 初始化图形的之前，先创建 / 更新 scales\n    this.createOrUpdateScales();\n    // 实例化 Geometry，然后 view 将所有的 scale 管理起来\n    const coordinate = this.getCoordinate();\n    const scaleDefs = get(this.options, 'scales', {});\n    const geometries = this.geometries;\n    for (let i = 0, len = geometries.length; i < len; i++) {\n      const geometry = geometries[i];\n      // 保持 scales 引用不要变化\n      geometry.scales = this.getGeometryScales();\n      const cfg = {\n        coordinate, // 使用 coordinate 引用，可以保持 coordinate 的同步更新\n        scaleDefs,\n        data: this.filteredData,\n        theme: this.themeObject,\n        isDataChanged: this.isDataChanged,\n        isCoordinateChanged: this.isCoordinateChanged,\n      };\n\n      if (isUpdate) {\n        // 数据发生更新\n        geometry.update(cfg);\n      } else {\n        geometry.init(cfg);\n      }\n    }\n\n    // Geometry 初始化之后，生成了 scale，然后进行调整 scale 配置\n    this.adjustScales();\n  }\n\n  /**\n   * 根据 Geometry 的所有字段创建 scales\n   * 如果存在，则更新，不存在则创建\n   */\n  private createOrUpdateScales() {\n    const fields = this.getScaleFields();\n    const groupedFields = this.getGroupedFields();\n\n    const { data, scales = {} } = this.getOptions();\n    const filteredData = this.filteredData;\n\n    for (let i = 0, len = fields.length; i < len; i++) {\n      const field = fields[i];\n      const scaleDef = scales[field];\n\n      // 调用方法，递归去创建\n      const key = this.getScaleKey(field);\n      this.createScale(\n        field,\n        // 分组字段的 scale 使用未过滤的数据创建\n        groupedFields.includes(field) ? data : filteredData,\n        scaleDef,\n        key\n      );\n\n      // 缓存从当前 view 创建的 scale key\n      this.createdScaleKeys.set(key, true);\n    }\n  }\n\n  /**\n   * 处理 scale 同步逻辑\n   */\n  private syncScale() {\n    // 最终调用 root view 的\n    this.getRootView().scalePool.sync(this.getCoordinate(), this.theme);\n  }\n\n  /**\n   * 获得 Geometry 中的 scale 对象\n   */\n  private getGeometryScales(): Record<string, Scale> {\n    const fields = this.getScaleFields();\n\n    const scales = {};\n    for (let i = 0; i < fields.length; i++) {\n      const field = fields[i];\n      scales[field] = this.getScaleByField(field);\n    }\n\n    return scales;\n  }\n\n  private getScaleFields() {\n    const fields = [];\n    const tmpMap = {};\n    const geometries = this.geometries;\n    for (let i = 0; i < geometries.length; i++) {\n      const geometry = geometries[i];\n      const geometryScales = geometry.getScaleFields();\n      uniq(geometryScales, fields, tmpMap);\n    }\n    return fields;\n  }\n\n  private getGroupedFields() {\n    const fields = [];\n    const tmpMap = {};\n    const geometries = this.geometries;\n    for (let i = 0; i < geometries.length; i++) {\n      const geometry = geometries[i];\n      const groupFields = geometry.getGroupFields();\n      uniq(groupFields, fields, tmpMap);\n    }\n    return fields;\n  }\n\n  /**\n   * 调整 scale 配置\n   * @private\n   */\n  private adjustScales() {\n    // 调整目前包括：\n    // 分类 scale，调整 range 范围\n    this.adjustCategoryScaleRange();\n  }\n\n  /**\n   * 调整分类 scale 的 range，防止超出坐标系外面\n   * @private\n   */\n  private adjustCategoryScaleRange() {\n    const xyScales = [this.getXScale(), ...this.getYScales()].filter((e) => !!e);\n    const coordinate = this.getCoordinate();\n    const scaleOptions = this.options.scales;\n\n    each(xyScales, (scale: Scale) => {\n      const { field, values, isCategory, isIdentity } = scale;\n\n      // 分类或者 identity 的 scale 才进行处理\n      if (isCategory || isIdentity) {\n        // 存在 value 值，且用户没有配置 range 配置\n        if (values && !get(scaleOptions, [field, 'range'])) {\n          // 更新 range\n          scale.range = getDefaultCategoryScaleRange(scale, coordinate, this.theme);\n        }\n      }\n    });\n  }\n\n  /**\n   * 根据 options 配置、Geometry 字段配置，自动生成 components\n   * @param isUpdate 是否是更新\n   * @private\n   */\n  private initComponents(isUpdate: boolean) {\n    // 先全部清空，然后 render\n    const controllers = this.controllers;\n    for (let i = 0; i < controllers.length; i++) {\n      const controller = controllers[i];\n      // 更新则走更新逻辑；否则清空载重绘\n      if (isUpdate) {\n        controller.update();\n      } else {\n        controller.clear();\n        controller.render();\n      }\n    }\n  }\n\n  private doLayout() {\n    this.layoutFunc(this);\n  }\n\n  /**\n   * 创建坐标系\n   * @private\n   */\n  private createCoordinate() {\n    const start = this.coordinateBBox.bl;\n    const end = this.coordinateBBox.tr;\n    this.coordinateInstance = this.coordinateController.create(start, end);\n  }\n\n  /**\n   * 根据 options 配置自动渲染 geometry\n   * @private\n   */\n  private paintGeometries(isUpdate: boolean) {\n    const doAnimation = this.options.animate;\n    // geometry 的 paint 阶段\n    const coordinate = this.getCoordinate();\n    const canvasRegion = {\n      x: this.viewBBox.x,\n      y: this.viewBBox.y,\n      minX: this.viewBBox.minX,\n      minY: this.viewBBox.minY,\n      maxX: this.viewBBox.maxX,\n      maxY: this.viewBBox.maxY,\n      width: this.viewBBox.width,\n      height: this.viewBBox.height,\n    };\n    const geometries = this.geometries;\n    for (let i = 0; i < geometries.length; i++) {\n      const geometry = geometries[i];\n      geometry.coordinate = coordinate;\n      geometry.canvasRegion = canvasRegion;\n      if (!doAnimation) {\n        // 如果 view 不执行动画，那么 view 下所有的 geometry 都不执行动画\n        geometry.animate(false);\n      }\n      geometry.paint(isUpdate);\n    }\n  }\n\n  /**\n   * 最后的绘制组件\n   * @param isUpdate\n   */\n  private renderComponents(isUpdate: boolean) {\n    // 先全部清空，然后 render\n    for (let i = 0; i < this.getComponents().length; i++) {\n      const co = this.getComponents()[i];\n      (co.component as GroupComponent).render();\n    }\n  }\n\n  /**\n   * 渲染分面，会在其中进行数据分面，然后进行子 view 创建\n   * @param isUpdate\n   */\n  private renderFacet(isUpdate: boolean) {\n    if (this.facetInstance) {\n      if (isUpdate) {\n        this.facetInstance.update();\n      } else {\n        this.facetInstance.clear();\n        // 计算分面数据\n        this.facetInstance.init();\n        // 渲染组件和 views\n        this.facetInstance.render();\n      }\n    }\n  }\n\n  private initOptions() {\n    const {\n      geometries = [],\n      interactions = [],\n      views = [],\n      annotations = [],\n      coordinate,\n      events,\n      facets,\n    } = this.options;\n\n    // 设置坐标系\n    if (this.coordinateController) {\n      // 更新 coordinate controller\n      coordinate && this.coordinateController.update(coordinate);\n    } else {\n      // 创建 coordinate controller\n      this.coordinateController = new CoordinateController(coordinate);\n    }\n\n    // 创建 geometry 实例\n    for (let i = 0; i < geometries.length; i++) {\n      const geometryOption = geometries[i];\n      this.createGeometry(geometryOption);\n    }\n\n    // 创建 interactions 实例\n    for (let j = 0; j < interactions.length; j++) {\n      const interactionOption = interactions[j];\n      const { type, cfg } = interactionOption;\n      this.interaction(type, cfg);\n    }\n\n    // 创建 view 实例\n    for (let k = 0; k < views.length; k++) {\n      const viewOption = views[k];\n      this.createView(viewOption);\n    }\n\n    // 设置 annotation\n    const annotationComponent = this.getController('annotation');\n    for (let l = 0; l < annotations.length; l++) {\n      const annotationOption = annotations[l];\n      annotationComponent.annotation(annotationOption);\n    }\n\n    // 设置 events\n    if (events) {\n      each(events, (eventCallback, eventName) => {\n        this.on(eventName, eventCallback);\n      });\n    }\n\n    if (facets) {\n      each(facets, (facet) => {\n        const { type, ...rest } = facet;\n\n        this.facet(type, rest);\n      });\n    }\n  }\n\n  private createGeometry(geometryOption: GeometryOption) {\n    const { type, cfg = {} } = geometryOption;\n    if (this[type]) {\n      const geometry = this[type](cfg);\n      each(geometryOption, (v, k) => {\n        if (isFunction(geometry[k])) {\n          geometry[k](v);\n        }\n      });\n    }\n  }\n\n  /**\n   * scale key 的创建方式\n   * @param field\n   */\n  private getScaleKey(field: string): string {\n    return `${this.id}-${field}`;\n  }\n}\n\n/**\n * 注册 geometry 组件\n * @param name\n * @param Ctor\n * @returns Geometry\n */\nexport function registerGeometry(name: string, Ctor: any) {\n  // 语法糖，在 view API 上增加原型方法\n  View.prototype[name.toLowerCase()] = function (cfg: any = {}) {\n    const props = {\n      /** 图形容器 */\n      container: this.middleGroup.addGroup(),\n      labelsContainer: this.foregroundGroup.addGroup(),\n      ...cfg,\n    };\n\n    const geometry = new Ctor(props);\n    this.geometries.push(geometry);\n\n    return geometry;\n  };\n}\n\nexport default View;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}