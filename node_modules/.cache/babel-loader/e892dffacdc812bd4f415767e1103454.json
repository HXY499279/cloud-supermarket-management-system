{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { FIELD_ORIGIN } from '../constant';\nimport Geometry from './base';\nimport Element from './element';\n/** 引入对应的 ShapeFactory */\n\nimport './shape/line';\nimport { isModelChange } from './util/is-model-change';\n/**\n * Path 几何标记。\n * 用于绘制路径图等。\n */\n\nvar Path =\n/** @class */\nfunction (_super) {\n  __extends(Path, _super);\n\n  function Path(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.type = 'path';\n    _this.shapeType = 'line';\n    var _a = cfg.connectNulls,\n        connectNulls = _a === void 0 ? false : _a,\n        _b = cfg.showSinglePoint,\n        showSinglePoint = _b === void 0 ? true : _b;\n    _this.connectNulls = connectNulls;\n    _this.showSinglePoint = showSinglePoint;\n    return _this;\n  }\n  /**\n   * 创建所有的 Element 实例，对于 Path、Line、Area，一组数据对应一个 Element。\n   * @param mappingData\n   * @param [isUpdate]\n   * @returns elements\n   */\n\n\n  Path.prototype.createElements = function (mappingData, index, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    } // Path 的每个 element 对应一组数据\n\n\n    var _a = this,\n        lastElementsMap = _a.lastElementsMap,\n        elementsMap = _a.elementsMap,\n        elements = _a.elements,\n        container = _a.container;\n\n    var elementId = this.getElementId(mappingData);\n    var shapeCfg = this.getShapeInfo(mappingData);\n    var result = lastElementsMap[elementId];\n\n    if (!result) {\n      var shapeFactory = this.getShapeFactory();\n      result = new Element({\n        shapeFactory: shapeFactory,\n        container: container,\n        offscreenGroup: this.getOffscreenGroup()\n      });\n      result.geometry = this;\n      result.animate = this.animateOption;\n      result.draw(shapeCfg, isUpdate); // 绘制 shape\n    } else {\n      // element 已经创建\n      var preShapeCfg = result.getModel();\n\n      if (this.isCoordinateChanged || isModelChange(preShapeCfg, shapeCfg)) {\n        result.animate = this.animateOption; // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n\n        result.update(shapeCfg); // 更新对应的 element\n      }\n\n      delete lastElementsMap[elementId];\n    }\n\n    elements.push(result);\n    elementsMap[elementId] = result;\n    return elements;\n  };\n  /**\n   * 获取组成一条线（一组数据）的所有点以及数据\n   * @param mappingData 映射后的数组\n   */\n\n\n  Path.prototype.getPointsAndData = function (mappingData) {\n    var points = [];\n    var data = [];\n\n    for (var i = 0, len = mappingData.length; i < len; i++) {\n      var obj = mappingData[i];\n      points.push({\n        x: obj.x,\n        y: obj.y\n      });\n      data.push(obj[FIELD_ORIGIN]);\n    }\n\n    return {\n      points: points,\n      data: data\n    };\n  };\n\n  Path.prototype.getShapeInfo = function (mappingData) {\n    var shapeCfg = this.getDrawCfg(mappingData[0]);\n\n    var _a = this.getPointsAndData(mappingData),\n        points = _a.points,\n        data = _a.data;\n\n    shapeCfg.mappingData = mappingData;\n    shapeCfg.data = data;\n    shapeCfg.isStack = !!this.getAdjust('stack');\n    shapeCfg.points = points;\n    shapeCfg.connectNulls = this.connectNulls;\n    shapeCfg.showSinglePoint = this.showSinglePoint;\n    return shapeCfg;\n  };\n\n  return Path;\n}(Geometry);\n\nexport default Path;","map":{"version":3,"sources":["../../src/geometry/path.ts"],"names":[],"mappings":"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","sourcesContent":["import { FIELD_ORIGIN } from '../constant';\nimport { MappingDatum, ShapeInfo } from '../interface';\nimport Geometry, { GeometryCfg } from './base';\nimport Element from './element';\n/** 引入对应的 ShapeFactory */\nimport './shape/line';\nimport { isModelChange } from './util/is-model-change';\n\n/** Path 构造函数参数类型 */\nexport interface PathCfg extends GeometryCfg {\n  /** 是否连接空值 */\n  connectNulls?: boolean;\n  /** 单个孤立数据点是否展示 */\n  showSinglePoint?: boolean;\n}\n\n/**\n * Path 几何标记。\n * 用于绘制路径图等。\n */\nexport default class Path extends Geometry {\n  public readonly type: string = 'path';\n  public readonly shapeType: string = 'line';\n  /** 是否连接空值 */\n  public connectNulls: boolean;\n  /** 单个孤立数据点是否展示 */\n  public showSinglePoint: boolean;\n\n  constructor(cfg: PathCfg) {\n    super(cfg);\n\n    const { connectNulls = false, showSinglePoint = true } = cfg;\n    this.connectNulls = connectNulls;\n    this.showSinglePoint = showSinglePoint;\n  }\n\n  /**\n   * 创建所有的 Element 实例，对于 Path、Line、Area，一组数据对应一个 Element。\n   * @param mappingData\n   * @param [isUpdate]\n   * @returns elements\n   */\n  protected createElements(mappingData: MappingDatum[], index: number, isUpdate: boolean = false): Element[] {\n    // Path 的每个 element 对应一组数据\n    const { lastElementsMap, elementsMap, elements, container } = this;\n    const elementId = this.getElementId(mappingData);\n    const shapeCfg = this.getShapeInfo(mappingData);\n\n    let result = lastElementsMap[elementId];\n    if (!result) {\n      const shapeFactory = this.getShapeFactory();\n\n      result = new Element({\n        shapeFactory,\n        container,\n        offscreenGroup: this.getOffscreenGroup(),\n      });\n      result.geometry = this;\n      result.animate = this.animateOption;\n      result.draw(shapeCfg, isUpdate); // 绘制 shape\n    } else {\n      // element 已经创建\n      const preShapeCfg = result.getModel();\n      if (this.isCoordinateChanged || isModelChange(preShapeCfg, shapeCfg)) {\n        result.animate = this.animateOption;\n        // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n        result.update(shapeCfg); // 更新对应的 element\n      }\n      delete lastElementsMap[elementId];\n    }\n\n    elements.push(result);\n    elementsMap[elementId] = result;\n\n    return elements;\n  }\n\n  /**\n   * 获取组成一条线（一组数据）的所有点以及数据\n   * @param mappingData 映射后的数组\n   */\n  protected getPointsAndData(mappingData: MappingDatum[]) {\n    const points = [];\n    const data = [];\n\n    for (let i = 0, len = mappingData.length; i < len; i++) {\n      const obj = mappingData[i];\n      points.push({\n        x: obj.x,\n        y: obj.y,\n      });\n      data.push(obj[FIELD_ORIGIN]);\n    }\n\n    return {\n      points,\n      data,\n    };\n  }\n\n  private getShapeInfo(mappingData: MappingDatum[]): ShapeInfo {\n    const shapeCfg = this.getDrawCfg(mappingData[0]);\n    const { points, data } = this.getPointsAndData(mappingData);\n    shapeCfg.mappingData = mappingData;\n    shapeCfg.data = data;\n    shapeCfg.isStack = !!this.getAdjust('stack');\n    shapeCfg.points = points;\n    shapeCfg.connectNulls = this.connectNulls;\n    shapeCfg.showSinglePoint = this.showSinglePoint;\n\n    return shapeCfg;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}