{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, max, map, isArray } from '@antv/util';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getViolinPath } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\n\nfunction normalizeSize(arr) {\n  if (!isArray(arr)) {\n    return [];\n  }\n\n  var maxValue = max(arr);\n  return map(arr, function (num) {\n    return num / maxValue;\n  });\n}\n\nvar ViolinShapeFactory = registerShapeFactory('violin', {\n  defaultShapeType: 'violin',\n  getDefaultPoints: function (pointInfo) {\n    var radius = pointInfo.size / 2;\n    var points = [];\n    var sizeArr = normalizeSize(pointInfo._size);\n    each(pointInfo.y, function (y, index) {\n      var offset = sizeArr[index] * radius;\n      var isMin = index === 0;\n      var isMax = index === pointInfo.y.length - 1;\n      points.push({\n        isMin: isMin,\n        isMax: isMax,\n        x: pointInfo.x - offset,\n        y: y\n      });\n      points.unshift({\n        isMin: isMin,\n        isMax: isMax,\n        x: pointInfo.x + offset,\n        y: y\n      });\n    });\n    return points;\n  }\n});\nregisterShape('violin', 'violin', {\n  draw: function (cfg, container) {\n    var shapeAttrs = getStyle(cfg, true, true);\n    var path = this.parsePath(getViolinPath(cfg.points));\n    return container.addShape('path', {\n      attrs: __assign(__assign({}, shapeAttrs), {\n        path: path\n      }),\n      name: 'violin'\n    });\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4,\n        fill: color\n      }\n    };\n  }\n});\nexport default ViolinShapeFactory;","map":{"version":3,"sources":["../../../../src/geometry/shape/violin/index.ts"],"names":[],"mappings":";AAAA,SAAS,IAAT,EAAe,GAAf,EAAoB,GAApB,EAAyB,OAAzB,QAAwC,YAAxC;AAGA,SAAS,aAAT,EAAwB,oBAAxB,QAAoD,SAApD;AACA,SAAS,aAAT,QAA8B,yBAA9B;AACA,SAAS,QAAT,QAAyB,mBAAzB;;AAEA,SAAS,aAAT,CAAuB,GAAvB,EAAoC;AAClC,MAAI,CAAC,OAAO,CAAC,GAAD,CAAZ,EAAmB;AACjB,WAAO,EAAP;AACD;;AACD,MAAM,QAAQ,GAAG,GAAG,CAAC,GAAD,CAApB;AACA,SAAO,GAAG,CAAC,GAAD,EAAM,UAAC,GAAD,EAAI;AAAK,WAAA,GAAG,GAAH,QAAA;AAAc,GAA7B,CAAV;AACD;;AAED,IAAM,kBAAkB,GAAG,oBAAoB,CAAC,QAAD,EAAW;AACxD,EAAA,gBAAgB,EAAE,QADsC;AAExD,EAAA,gBAAgB,EAAhB,UAAiB,SAAjB,EAA4C;AAC1C,QAAM,MAAM,GAAG,SAAS,CAAC,IAAV,GAAiB,CAAhC;AACA,QAAM,MAAM,GAAG,EAAf;AACA,QAAM,OAAO,GAAG,aAAa,CAAC,SAAS,CAAC,KAAX,CAA7B;AAEA,IAAA,IAAI,CAAC,SAAS,CAAC,CAAX,EAA0B,UAAC,CAAD,EAAI,KAAJ,EAAS;AACrC,UAAM,MAAM,GAAG,OAAO,CAAC,KAAD,CAAP,GAAiB,MAAhC;AACA,UAAM,KAAK,GAAG,KAAK,KAAK,CAAxB;AACA,UAAM,KAAK,GAAG,KAAK,KAAM,SAAS,CAAC,CAAV,CAAyB,MAAzB,GAAkC,CAA3D;AACA,MAAA,MAAM,CAAC,IAAP,CAAY;AACV,QAAA,KAAK,EAAA,KADK;AAEV,QAAA,KAAK,EAAA,KAFK;AAGV,QAAA,CAAC,EAAG,SAAS,CAAC,CAAV,GAAyB,MAHnB;AAIV,QAAA,CAAC,EAAA;AAJS,OAAZ;AAMA,MAAA,MAAM,CAAC,OAAP,CAAe;AACb,QAAA,KAAK,EAAA,KADQ;AAEb,QAAA,KAAK,EAAA,KAFQ;AAGb,QAAA,CAAC,EAAG,SAAS,CAAC,CAAV,GAAyB,MAHhB;AAIb,QAAA,CAAC,EAAA;AAJY,OAAf;AAMD,KAhBG,CAAJ;AAiBA,WAAO,MAAP;AACD;AAzBuD,CAAX,CAA/C;AA4BA,aAAa,CAAC,QAAD,EAAW,QAAX,EAAqB;AAChC,EAAA,IAAI,EAAJ,UAAK,GAAL,EAAqB,SAArB,EAAsC;AACpC,QAAM,UAAU,GAAG,QAAQ,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,CAA3B;AACA,QAAM,IAAI,GAAG,KAAK,SAAL,CAAe,aAAa,CAAC,GAAG,CAAC,MAAL,CAA5B,CAAb;AACA,WAAO,SAAS,CAAC,QAAV,CAAmB,MAAnB,EAA2B;AAChC,MAAA,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACA,UADA,CAAA,EACU;AACb,QAAA,IAAI,EAAA;AADS,OADV,CAD2B;AAKhC,MAAA,IAAI,EAAE;AAL0B,KAA3B,CAAP;AAOD,GAX+B;AAYhC,EAAA,SAAS,EAAT,UAAU,SAAV,EAAmC;AACzB,QAAA,KAAK,GAAK,SAAS,CAAd,KAAL;AAER,WAAO;AACL,MAAA,MAAM,EAAE,QADH;AAEL,MAAA,KAAK,EAAE;AACL,QAAA,CAAC,EAAE,CADE;AAEL,QAAA,IAAI,EAAE;AAFD;AAFF,KAAP;AAOD;AAtB+B,CAArB,CAAb;AAyBA,eAAe,kBAAf","sourcesContent":["import { each, max, map, isArray } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { ShapeInfo, ShapeMarkerCfg, ViolinShapePoint } from '../../../interface';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getViolinPath } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\n\nfunction normalizeSize(arr: number[]){\n  if (!isArray(arr)) {\n    return [];\n  }\n  const maxValue = max(arr);\n  return map(arr, (num) => num / maxValue);\n}\n\nconst ViolinShapeFactory = registerShapeFactory('violin', {\n  defaultShapeType: 'violin',\n  getDefaultPoints(pointInfo: ViolinShapePoint) {\n    const radius = pointInfo.size / 2;\n    const points = [];\n    const sizeArr = normalizeSize(pointInfo._size);\n    \n    each(pointInfo.y as number[], (y, index) => {\n      const offset = sizeArr[index] * radius;\n      const isMin = index === 0;\n      const isMax = index === (pointInfo.y as number[]).length - 1;\n      points.push({\n        isMin,\n        isMax,\n        x: (pointInfo.x as number) - offset,\n        y,\n      });\n      points.unshift({\n        isMin,\n        isMax,\n        x: (pointInfo.x as number) + offset,\n        y,\n      });\n    });\n    return points;\n  },\n});\n\nregisterShape('violin', 'violin', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const shapeAttrs = getStyle(cfg, true, true);\n    const path = this.parsePath(getViolinPath(cfg.points));\n    return container.addShape('path', {\n      attrs: {\n        ...shapeAttrs,\n        path,\n      },\n      name: 'violin',\n    });\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color } = markerCfg;\n\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4,\n        fill: color,\n      },\n    };\n  },\n});\n\nexport default ViolinShapeFactory;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}