{"ast":null,"code":"import * as _ from '@antv/util';\nimport { DEFAULT_Y } from '../constant';\n\nvar Adjust =\n/** @class */\nfunction () {\n  function Adjust(cfg) {\n    var xField = cfg.xField,\n        yField = cfg.yField,\n        _a = cfg.adjustNames,\n        adjustNames = _a === void 0 ? ['x', 'y'] : _a;\n    this.adjustNames = adjustNames;\n    this.xField = xField;\n    this.yField = yField;\n  }\n  /**\n   * 查看维度是否是 adjust 字段\n   * @param dim\n   */\n\n\n  Adjust.prototype.isAdjust = function (dim) {\n    return this.adjustNames.indexOf(dim) >= 0;\n  };\n\n  Adjust.prototype.getAdjustRange = function (dim, dimValue, values) {\n    var yField = this.yField;\n    var index = values.indexOf(dimValue);\n    var length = values.length;\n    var pre;\n    var next; // 没有 y 字段，但是需要根据 y 调整\n\n    if (!yField && this.isAdjust('y')) {\n      pre = 0;\n      next = 1;\n    } else if (length > 1) {\n      // 如果以其开头，则取之，否则取他前面一个\n      pre = values[index === 0 ? 0 : index - 1]; // 如果以其结尾，则取之，否则取他后面一个\n\n      next = values[index === length - 1 ? length - 1 : index + 1];\n\n      if (index !== 0) {\n        pre += (dimValue - pre) / 2;\n      } else {\n        pre -= (next - dimValue) / 2;\n      }\n\n      if (index !== length - 1) {\n        next -= (next - dimValue) / 2;\n      } else {\n        next += (dimValue - values[length - 2]) / 2;\n      }\n    } else {\n      pre = dimValue === 0 ? 0 : dimValue - 0.5;\n      next = dimValue === 0 ? 1 : dimValue + 0.5;\n    }\n\n    return {\n      pre: pre,\n      next: next\n    };\n  };\n\n  Adjust.prototype.adjustData = function (groupedDataArray, mergedData) {\n    var _this = this; // 所有调整维度的值数组\n\n\n    var dimValuesMap = this.getDimValues(mergedData); // 按照每一个分组来进行调整\n\n    _.each(groupedDataArray, function (dataArray, index) {\n      // 遍历所有数据集合\n      // 每个分组中，分别按照不同的 dim 进行调整\n      _.each(dimValuesMap, function (values, dim) {\n        // 根据不同的度量分别调整位置\n        _this.adjustDim(dim, values, dataArray, index);\n      });\n    });\n  };\n  /**\n   * 对数据进行分组adjustData\n   * @param data 数据\n   * @param dim 分组的字段\n   * @return 分组结果\n   */\n\n\n  Adjust.prototype.groupData = function (data, dim) {\n    // 补齐数据空数据为默认值\n    _.each(data, function (record) {\n      if (record[dim] === undefined) {\n        record[dim] = DEFAULT_Y;\n      }\n    }); // 按照 dim 维度分组\n\n\n    return _.groupBy(data, dim);\n  };\n  /** @override */\n\n\n  Adjust.prototype.adjustDim = function (dim, values, data, index) {};\n  /**\n   * 获取可调整度量对应的值\n   * @param mergedData 数据\n   * @return 值的映射\n   */\n\n\n  Adjust.prototype.getDimValues = function (mergedData) {\n    var _a = this,\n        xField = _a.xField,\n        yField = _a.yField;\n\n    var dimValuesMap = {}; // 所有的维度\n\n    var dims = [];\n\n    if (xField && this.isAdjust('x')) {\n      dims.push(xField);\n    }\n\n    if (yField && this.isAdjust('y')) {\n      dims.push(yField);\n    }\n\n    dims.forEach(function (dim) {\n      // 在每个维度上，所有的值\n      dimValuesMap[dim] = _.valuesOfKey(mergedData, dim).sort(function (v1, v2) {\n        return v1 - v2;\n      });\n    }); // 只有一维的情况下，同时调整 y，赋予默认值\n\n    if (!yField && this.isAdjust('y')) {\n      var dim = 'y';\n      dimValuesMap[dim] = [DEFAULT_Y, 1]; // 默认分布在 y 轴的 0 与 1 之间\n    }\n\n    return dimValuesMap;\n  };\n\n  return Adjust;\n}();\n\nexport default Adjust;","map":{"version":3,"sources":["../../src/adjusts/adjust.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as _ from '@antv/util';\nimport { DEFAULT_Y } from '../constant';\nvar Adjust = /** @class */ (function () {\n    function Adjust(cfg) {\n        var xField = cfg.xField, yField = cfg.yField, _a = cfg.adjustNames, adjustNames = _a === void 0 ? ['x', 'y'] : _a;\n        this.adjustNames = adjustNames;\n        this.xField = xField;\n        this.yField = yField;\n    }\n    /**\n     * 查看维度是否是 adjust 字段\n     * @param dim\n     */\n    Adjust.prototype.isAdjust = function (dim) {\n        return this.adjustNames.indexOf(dim) >= 0;\n    };\n    Adjust.prototype.getAdjustRange = function (dim, dimValue, values) {\n        var yField = this.yField;\n        var index = values.indexOf(dimValue);\n        var length = values.length;\n        var pre;\n        var next;\n        // 没有 y 字段，但是需要根据 y 调整\n        if (!yField && this.isAdjust('y')) {\n            pre = 0;\n            next = 1;\n        }\n        else if (length > 1) {\n            // 如果以其开头，则取之，否则取他前面一个\n            pre = values[index === 0 ? 0 : index - 1];\n            // 如果以其结尾，则取之，否则取他后面一个\n            next = values[index === length - 1 ? length - 1 : index + 1];\n            if (index !== 0) {\n                pre += (dimValue - pre) / 2;\n            }\n            else {\n                pre -= (next - dimValue) / 2;\n            }\n            if (index !== length - 1) {\n                next -= (next - dimValue) / 2;\n            }\n            else {\n                next += (dimValue - values[length - 2]) / 2;\n            }\n        }\n        else {\n            pre = dimValue === 0 ? 0 : dimValue - 0.5;\n            next = dimValue === 0 ? 1 : dimValue + 0.5;\n        }\n        return {\n            pre: pre,\n            next: next,\n        };\n    };\n    Adjust.prototype.adjustData = function (groupedDataArray, mergedData) {\n        var _this = this;\n        // 所有调整维度的值数组\n        var dimValuesMap = this.getDimValues(mergedData);\n        // 按照每一个分组来进行调整\n        _.each(groupedDataArray, function (dataArray, index) {\n            // 遍历所有数据集合\n            // 每个分组中，分别按照不同的 dim 进行调整\n            _.each(dimValuesMap, function (values, dim) {\n                // 根据不同的度量分别调整位置\n                _this.adjustDim(dim, values, dataArray, index);\n            });\n        });\n    };\n    /**\n     * 对数据进行分组adjustData\n     * @param data 数据\n     * @param dim 分组的字段\n     * @return 分组结果\n     */\n    Adjust.prototype.groupData = function (data, dim) {\n        // 补齐数据空数据为默认值\n        _.each(data, function (record) {\n            if (record[dim] === undefined) {\n                record[dim] = DEFAULT_Y;\n            }\n        });\n        // 按照 dim 维度分组\n        return _.groupBy(data, dim);\n    };\n    /** @override */\n    Adjust.prototype.adjustDim = function (dim, values, data, index) { };\n    /**\n     * 获取可调整度量对应的值\n     * @param mergedData 数据\n     * @return 值的映射\n     */\n    Adjust.prototype.getDimValues = function (mergedData) {\n        var _a = this, xField = _a.xField, yField = _a.yField;\n        var dimValuesMap = {};\n        // 所有的维度\n        var dims = [];\n        if (xField && this.isAdjust('x')) {\n            dims.push(xField);\n        }\n        if (yField && this.isAdjust('y')) {\n            dims.push(yField);\n        }\n        dims.forEach(function (dim) {\n            // 在每个维度上，所有的值\n            dimValuesMap[dim] = _.valuesOfKey(mergedData, dim).sort(function (v1, v2) { return v1 - v2; });\n        });\n        // 只有一维的情况下，同时调整 y，赋予默认值\n        if (!yField && this.isAdjust('y')) {\n            var dim = 'y';\n            dimValuesMap[dim] = [DEFAULT_Y, 1]; // 默认分布在 y 轴的 0 与 1 之间\n        }\n        return dimValuesMap;\n    };\n    return Adjust;\n}());\nexport default Adjust;\n//# sourceMappingURL=adjust.js.map"]},"metadata":{},"sourceType":"module"}