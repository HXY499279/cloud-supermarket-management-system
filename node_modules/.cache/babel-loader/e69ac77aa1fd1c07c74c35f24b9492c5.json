{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, isNil, get } from '@antv/util';\nimport { getCurrentElement, getDelegationObject, getElements, getElementValue, getScaleByField, isElementChange, isList } from '../util';\nimport StateBase from './state-base';\n\nfunction getItem(shape) {\n  return get(shape.get('delegateObject'), 'item');\n}\n/**\n * 状态量 Action 的基类，允许多个 Element 同时拥有某个状态\n * @class\n * @ignore\n */\n\n\nvar ElementState =\n/** @class */\nfunction (_super) {\n  __extends(ElementState, _super);\n\n  function ElementState() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.ignoreListItemStates = ['unchecked'];\n    return _this;\n  } // 是否忽略触发的列表项\n\n\n  ElementState.prototype.isItemIgnore = function (item, list) {\n    var states = this.ignoreListItemStates;\n    var filtered = states.filter(function (state) {\n      return list.hasState(item, state);\n    });\n    return !!filtered.length;\n  }; // 设置由组件选项导致的状态变化\n\n\n  ElementState.prototype.setStateByComponent = function (component, item, enable) {\n    var view = this.context.view;\n    var field = component.get('field');\n    var elements = getElements(view);\n    this.setElementsStateByItem(elements, field, item, enable);\n  }; // 处理触发源由 element 导致的状态变化\n\n\n  ElementState.prototype.setStateByElement = function (element, enable) {\n    this.setElementState(element, enable);\n  };\n  /** 组件的选项是否同 element 匹配 */\n\n\n  ElementState.prototype.isMathItem = function (element, field, item) {\n    var view = this.context.view;\n    var scale = getScaleByField(view, field);\n    var value = getElementValue(element, field);\n    return !isNil(value) && item.name === scale.getText(value);\n  };\n\n  ElementState.prototype.setElementsStateByItem = function (elements, field, item, enable) {\n    var _this = this;\n\n    each(elements, function (el) {\n      if (_this.isMathItem(el, field, item)) {\n        el.setState(_this.stateName, enable);\n      }\n    });\n  };\n  /** 设置状态是否激活 */\n\n\n  ElementState.prototype.setStateEnable = function (enable) {\n    var element = getCurrentElement(this.context);\n\n    if (element) {\n      // 触发源由于 element 导致\n      if (isElementChange(this.context)) {\n        this.setStateByElement(element, enable);\n      }\n    } else {\n      // 触发源由组件导致\n      var delegateObject = getDelegationObject(this.context); // 如果触发源时列表，图例、坐标轴\n\n      if (isList(delegateObject)) {\n        var item = delegateObject.item,\n            component = delegateObject.component;\n\n        if (item && component && !this.isItemIgnore(item, component)) {\n          var event_1 = this.context.event.gEvent; // 防止闪烁\n\n          if (event_1 && event_1.fromShape && event_1.toShape && getItem(event_1.fromShape) === getItem(event_1.toShape)) {\n            return;\n          }\n\n          this.setStateByComponent(component, item, enable);\n        }\n      }\n    }\n  };\n  /**\n   * 切换状态\n   */\n\n\n  ElementState.prototype.toggle = function () {\n    var element = getCurrentElement(this.context);\n\n    if (element) {\n      var hasState = element.hasState(this.stateName);\n      this.setElementState(element, !hasState);\n    }\n  };\n  /**\n   * 取消当前时间影响的状态\n   */\n\n\n  ElementState.prototype.reset = function () {\n    this.setStateEnable(false);\n  };\n\n  return ElementState;\n}(StateBase);\n\nexport default ElementState;","map":{"version":3,"sources":["../../../../src/interaction/action/element/state.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, isNil, get } from '@antv/util';\nimport { ListItem } from '../../../dependents';\nimport Element from '../../../geometry/element/';\nimport {\n  getCurrentElement,\n  getDelegationObject,\n  getElements,\n  getElementValue,\n  getScaleByField,\n  isElementChange,\n  isList,\n} from '../util';\nimport StateBase from './state-base';\n\nfunction getItem(shape) {\n  return get(shape.get('delegateObject'), 'item');\n}\n\n/**\n * 状态量 Action 的基类，允许多个 Element 同时拥有某个状态\n * @class\n * @ignore\n */\nclass ElementState extends StateBase {\n  protected ignoreListItemStates = ['unchecked'];\n\n  // 是否忽略触发的列表项\n  private isItemIgnore(item: ListItem, list) {\n    const states = this.ignoreListItemStates;\n    const filtered = states.filter((state) => {\n      return list.hasState(item, state);\n    });\n    return !!filtered.length;\n  }\n\n  // 设置由组件选项导致的状态变化\n  private setStateByComponent(component, item: ListItem, enable: boolean) {\n    const view = this.context.view;\n    const field = component.get('field');\n    const elements = getElements(view);\n    this.setElementsStateByItem(elements, field, item, enable);\n  }\n\n  // 处理触发源由 element 导致的状态变化\n  protected setStateByElement(element: Element, enable: boolean) {\n    this.setElementState(element, enable);\n  }\n\n  /** 组件的选项是否同 element 匹配 */\n  protected isMathItem(element: Element, field: string, item: ListItem) {\n    const view = this.context.view;\n    const scale = getScaleByField(view, field);\n    const value = getElementValue(element, field);\n    return !isNil(value) && item.name === scale.getText(value);\n  }\n\n  protected setElementsStateByItem(elements: Element[], field: string, item: ListItem, enable: boolean) {\n    each(elements, (el) => {\n      if (this.isMathItem(el, field, item)) {\n        el.setState(this.stateName, enable);\n      }\n    });\n  }\n\n  /** 设置状态是否激活 */\n  protected setStateEnable(enable: boolean) {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      // 触发源由于 element 导致\n      if (isElementChange(this.context)) {\n        this.setStateByElement(element, enable);\n      }\n    } else {\n      // 触发源由组件导致\n      const delegateObject = getDelegationObject(this.context);\n      // 如果触发源时列表，图例、坐标轴\n      if (isList(delegateObject)) {\n        const { item, component } = delegateObject;\n        if (item && component && !this.isItemIgnore(item, component)) {\n          const event = this.context.event.gEvent;\n          // 防止闪烁\n          if (event && event.fromShape && event.toShape && getItem(event.fromShape) === getItem(event.toShape)) {\n            return;\n          }\n          this.setStateByComponent(component, item, enable);\n        }\n      }\n    }\n  }\n\n  /**\n   * 切换状态\n   */\n  public toggle() {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      const hasState = element.hasState(this.stateName);\n      this.setElementState(element, !hasState);\n    }\n  }\n\n  /**\n   * 取消当前时间影响的状态\n   */\n  public reset() {\n    this.setStateEnable(false);\n  }\n}\n\nexport default ElementState;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}