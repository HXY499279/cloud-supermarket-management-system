{"ast":null,"code":"import { getMedian, getMean } from './stat';\n/**\n * parse the value position\n * @param val\n * @param scale\n */\n\nexport function getNormalizedValue(val, scale) {\n  if (!scale) {\n    return null;\n  }\n\n  var scaled;\n\n  switch (val) {\n    case 'start':\n      return 0;\n\n    case 'end':\n      return 1;\n\n    case 'median':\n      {\n        scaled = scale.isCategory ? getMedian(scale.values.map(function (_, idx) {\n          return idx;\n        })) : getMedian(scale.values);\n        break;\n      }\n\n    case 'mean':\n      {\n        scaled = scale.isCategory ? (scale.values.length - 1) / 2 : getMean(scale.values);\n        break;\n      }\n\n    case 'min':\n      scaled = scale.isCategory ? 0 : scale[val];\n      break;\n\n    case 'max':\n      scaled = scale.isCategory ? scale.values.length - 1 : scale[val];\n      break;\n\n    default:\n      scaled = val;\n      break;\n  }\n\n  return scale.scale(scaled);\n}","map":{"version":3,"sources":["../../src/util/annotation.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,EAAoB,OAApB,QAAmC,QAAnC;AAGA;;;;AAIG;;AACH,OAAM,SAAU,kBAAV,CAA6B,GAA7B,EAAmD,KAAnD,EAA+D;AACnE,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AACD,MAAI,MAAJ;;AAEA,UAAQ,GAAR;AACE,SAAK,OAAL;AACE,aAAO,CAAP;;AACF,SAAK,KAAL;AACE,aAAO,CAAP;;AACF,SAAK,QAAL;AAAe;AACb,QAAA,MAAM,GAAG,KAAK,CAAC,UAAN,GAAmB,SAAS,CAAC,KAAK,CAAC,MAAN,CAAa,GAAb,CAAiB,UAAC,CAAD,EAAI,GAAJ,EAAe;AAAK,iBAAA,GAAA;AAAG,SAAxC,CAAD,CAA5B,GAA0E,SAAS,CAAC,KAAK,CAAC,MAAP,CAA5F;AACA;AACD;;AACD,SAAK,MAAL;AAAa;AACX,QAAA,MAAM,GAAG,KAAK,CAAC,UAAN,GAAmB,CAAC,KAAK,CAAC,MAAN,CAAa,MAAb,GAAsB,CAAvB,IAA4B,CAA/C,GAAmD,OAAO,CAAC,KAAK,CAAC,MAAP,CAAnE;AACA;AACD;;AACD,SAAK,KAAL;AACE,MAAA,MAAM,GAAG,KAAK,CAAC,UAAN,GAAmB,CAAnB,GAAuB,KAAK,CAAC,GAAD,CAArC;AACA;;AACF,SAAK,KAAL;AACE,MAAA,MAAM,GAAG,KAAK,CAAC,UAAN,GAAmB,KAAK,CAAC,MAAN,CAAa,MAAb,GAAsB,CAAzC,GAA6C,KAAK,CAAC,GAAD,CAA3D;AACA;;AACF;AACE,MAAA,MAAM,GAAG,GAAT;AACA;AArBJ;;AAwBA,SAAO,KAAK,CAAC,KAAN,CAAY,MAAZ,CAAP;AACD","sourcesContent":["import { getMedian, getMean } from './stat';\nimport { Scale } from '../dependents';\n\n/**\n * parse the value position\n * @param val\n * @param scale\n */\nexport function getNormalizedValue(val: number | string, scale: Scale) {\n  if (!scale) {\n    return null;\n  }\n  let scaled: number;\n\n  switch (val) {\n    case 'start':\n      return 0;\n    case 'end':\n      return 1;\n    case 'median': {\n      scaled = scale.isCategory ? getMedian(scale.values.map((_, idx: number) => idx)) : getMedian(scale.values);\n      break;\n    }\n    case 'mean': {\n      scaled = scale.isCategory ? (scale.values.length - 1) / 2 : getMean(scale.values);\n      break;\n    }\n    case 'min':\n      scaled = scale.isCategory ? 0 : scale[val];\n      break;\n    case 'max':\n      scaled = scale.isCategory ? scale.values.length - 1 : scale[val];\n      break;\n    default:\n      scaled = val as number;\n      break;\n  }\n\n  return scale.scale(scaled);\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}