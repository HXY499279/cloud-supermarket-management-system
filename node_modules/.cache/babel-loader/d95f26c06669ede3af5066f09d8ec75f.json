{"ast":null,"code":"export default function d3Linear(cfg) {\n  var min = cfg.min,\n      max = cfg.max,\n      nice = cfg.nice,\n      tickCount = cfg.tickCount;\n  var linear = new D3Linear();\n  linear.domain([min, max]);\n\n  if (nice) {\n    linear.nice(tickCount);\n  }\n\n  return linear.ticks(tickCount);\n}\nvar DEFAULT_COUNT = 5;\nvar e10 = Math.sqrt(50);\nvar e5 = Math.sqrt(10);\nvar e2 = Math.sqrt(2); // https://github.com/d3/d3-scale\n\nvar D3Linear =\n/** @class */\nfunction () {\n  function D3Linear() {\n    this._domain = [0, 1];\n  }\n\n  D3Linear.prototype.domain = function (domain) {\n    if (domain) {\n      this._domain = Array.from(domain, Number);\n      return this;\n    }\n\n    return this._domain.slice();\n  };\n\n  D3Linear.prototype.nice = function (count) {\n    var _a, _b;\n\n    if (count === void 0) {\n      count = DEFAULT_COUNT;\n    }\n\n    var d = this._domain.slice();\n\n    var i0 = 0;\n    var i1 = this._domain.length - 1;\n    var start = this._domain[i0];\n    var stop = this._domain[i1];\n    var step;\n\n    if (stop < start) {\n      _a = [stop, start], start = _a[0], stop = _a[1];\n      _b = [i1, i0], i0 = _b[0], i1 = _b[1];\n    }\n\n    step = tickIncrement(start, stop, count);\n\n    if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n      step = tickIncrement(start, stop, count);\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n      step = tickIncrement(start, stop, count);\n    }\n\n    if (step > 0) {\n      d[i0] = Math.floor(start / step) * step;\n      d[i1] = Math.ceil(stop / step) * step;\n      this.domain(d);\n    } else if (step < 0) {\n      d[i0] = Math.ceil(start * step) / step;\n      d[i1] = Math.floor(stop * step) / step;\n      this.domain(d);\n    }\n\n    return this;\n  };\n\n  D3Linear.prototype.ticks = function (count) {\n    if (count === void 0) {\n      count = DEFAULT_COUNT;\n    }\n\n    return d3ArrayTicks(this._domain[0], this._domain[this._domain.length - 1], count || DEFAULT_COUNT);\n  };\n\n  return D3Linear;\n}();\n\nexport { D3Linear };\n\nfunction d3ArrayTicks(start, stop, count) {\n  var reverse;\n  var i = -1;\n  var n;\n  var ticks;\n  var step;\n  stop = +stop, start = +start, count = +count;\n\n  if (start === stop && count > 0) {\n    return [start];\n  } // tslint:disable-next-line\n\n\n  if (reverse = stop < start) {\n    n = start, start = stop, stop = n;\n  } // tslint:disable-next-line\n\n\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) {\n    return [];\n  }\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n\n    while (++i < n) {\n      ticks[i] = (start + i) * step;\n    }\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n\n    while (++i < n) {\n      ticks[i] = (start - i) / step;\n    }\n  }\n\n  if (reverse) {\n    ticks.reverse();\n  }\n\n  return ticks;\n}\n\nfunction tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count);\n  var power = Math.floor(Math.log(step) / Math.LN10);\n  var error = step / Math.pow(10, power);\n  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}","map":{"version":3,"sources":["../../src/util/d3-linear.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["export default function d3Linear(cfg) {\n    var min = cfg.min, max = cfg.max, nice = cfg.nice, tickCount = cfg.tickCount;\n    var linear = new D3Linear();\n    linear.domain([min, max]);\n    if (nice) {\n        linear.nice(tickCount);\n    }\n    return linear.ticks(tickCount);\n}\nvar DEFAULT_COUNT = 5;\nvar e10 = Math.sqrt(50);\nvar e5 = Math.sqrt(10);\nvar e2 = Math.sqrt(2);\n// https://github.com/d3/d3-scale\nvar D3Linear = /** @class */ (function () {\n    function D3Linear() {\n        this._domain = [0, 1];\n    }\n    D3Linear.prototype.domain = function (domain) {\n        if (domain) {\n            this._domain = Array.from(domain, Number);\n            return this;\n        }\n        return this._domain.slice();\n    };\n    D3Linear.prototype.nice = function (count) {\n        var _a, _b;\n        if (count === void 0) { count = DEFAULT_COUNT; }\n        var d = this._domain.slice();\n        var i0 = 0;\n        var i1 = this._domain.length - 1;\n        var start = this._domain[i0];\n        var stop = this._domain[i1];\n        var step;\n        if (stop < start) {\n            _a = [stop, start], start = _a[0], stop = _a[1];\n            _b = [i1, i0], i0 = _b[0], i1 = _b[1];\n        }\n        step = tickIncrement(start, stop, count);\n        if (step > 0) {\n            start = Math.floor(start / step) * step;\n            stop = Math.ceil(stop / step) * step;\n            step = tickIncrement(start, stop, count);\n        }\n        else if (step < 0) {\n            start = Math.ceil(start * step) / step;\n            stop = Math.floor(stop * step) / step;\n            step = tickIncrement(start, stop, count);\n        }\n        if (step > 0) {\n            d[i0] = Math.floor(start / step) * step;\n            d[i1] = Math.ceil(stop / step) * step;\n            this.domain(d);\n        }\n        else if (step < 0) {\n            d[i0] = Math.ceil(start * step) / step;\n            d[i1] = Math.floor(stop * step) / step;\n            this.domain(d);\n        }\n        return this;\n    };\n    D3Linear.prototype.ticks = function (count) {\n        if (count === void 0) { count = DEFAULT_COUNT; }\n        return d3ArrayTicks(this._domain[0], this._domain[this._domain.length - 1], count || DEFAULT_COUNT);\n    };\n    return D3Linear;\n}());\nexport { D3Linear };\nfunction d3ArrayTicks(start, stop, count) {\n    var reverse;\n    var i = -1;\n    var n;\n    var ticks;\n    var step;\n    (stop = +stop), (start = +start), (count = +count);\n    if (start === stop && count > 0) {\n        return [start];\n    }\n    // tslint:disable-next-line\n    if ((reverse = stop < start)) {\n        (n = start), (start = stop), (stop = n);\n    }\n    // tslint:disable-next-line\n    if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) {\n        return [];\n    }\n    if (step > 0) {\n        start = Math.ceil(start / step);\n        stop = Math.floor(stop / step);\n        ticks = new Array((n = Math.ceil(stop - start + 1)));\n        while (++i < n) {\n            ticks[i] = (start + i) * step;\n        }\n    }\n    else {\n        start = Math.floor(start * step);\n        stop = Math.ceil(stop * step);\n        ticks = new Array((n = Math.ceil(start - stop + 1)));\n        while (++i < n) {\n            ticks[i] = (start - i) / step;\n        }\n    }\n    if (reverse) {\n        ticks.reverse();\n    }\n    return ticks;\n}\nfunction tickIncrement(start, stop, count) {\n    var step = (stop - start) / Math.max(0, count);\n    var power = Math.floor(Math.log(step) / Math.LN10);\n    var error = step / Math.pow(10, power);\n    return power >= 0\n        ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n        : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n//# sourceMappingURL=d3-linear.js.map"]},"metadata":{},"sourceType":"module"}