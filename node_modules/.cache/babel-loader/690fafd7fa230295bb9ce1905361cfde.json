{"ast":null,"code":"import line from './line';\nimport { distance } from './util';\n\nfunction analyzePoints(points) {\n  // 计算每段的长度和总的长度\n  var totalLength = 0;\n  var segments = [];\n\n  for (var i = 0; i < points.length - 1; i++) {\n    var from = points[i];\n    var to = points[i + 1];\n    var length_1 = distance(from[0], from[1], to[0], to[1]);\n    var seg = {\n      from: from,\n      to: to,\n      length: length_1\n    };\n    segments.push(seg);\n    totalLength += length_1;\n  }\n\n  return {\n    segments: segments,\n    totalLength: totalLength\n  };\n}\n\nexport function lengthOfSegment(points) {\n  if (points.length < 2) {\n    return 0;\n  }\n\n  var totalLength = 0;\n\n  for (var i = 0; i < points.length - 1; i++) {\n    var from = points[i];\n    var to = points[i + 1];\n    totalLength += distance(from[0], from[1], to[0], to[1]);\n  }\n\n  return totalLength;\n}\n/**\n * 按照比例在数据片段中获取点\n * @param {array} points 点的集合\n * @param {number} t 百分比 0-1\n * @return {object} 点的坐标\n */\n\nexport function pointAtSegments(points, t) {\n  // 边界判断\n  if (t > 1 || t < 0 || points.length < 2) {\n    return null;\n  }\n\n  var _a = analyzePoints(points),\n      segments = _a.segments,\n      totalLength = _a.totalLength; // 多个点有可能重合\n\n\n  if (totalLength === 0) {\n    return {\n      x: points[0][0],\n      y: points[0][1]\n    };\n  } // 计算比例\n\n\n  var startRatio = 0;\n  var point = null;\n\n  for (var i = 0; i < segments.length; i++) {\n    var seg = segments[i];\n    var from = seg.from,\n        to = seg.to;\n    var currentRatio = seg.length / totalLength;\n\n    if (t >= startRatio && t <= startRatio + currentRatio) {\n      var localRatio = (t - startRatio) / currentRatio;\n      point = line.pointAt(from[0], from[1], to[0], to[1], localRatio);\n      break;\n    }\n\n    startRatio += currentRatio;\n  }\n\n  return point;\n}\n/**\n * 按照比例在数据片段中获取切线的角度\n * @param {array} points 点的集合\n * @param {number} t 百分比 0-1\n */\n\nexport function angleAtSegments(points, t) {\n  // 边界判断\n  if (t > 1 || t < 0 || points.length < 2) {\n    return 0;\n  }\n\n  var _a = analyzePoints(points),\n      segments = _a.segments,\n      totalLength = _a.totalLength; // 计算比例\n\n\n  var startRatio = 0;\n  var angle = 0;\n\n  for (var i = 0; i < segments.length; i++) {\n    var seg = segments[i];\n    var from = seg.from,\n        to = seg.to;\n    var currentRatio = seg.length / totalLength;\n\n    if (t >= startRatio && t <= startRatio + currentRatio) {\n      angle = Math.atan2(to[1] - from[1], to[0] - from[0]);\n      break;\n    }\n\n    startRatio += currentRatio;\n  }\n\n  return angle;\n}\nexport function distanceAtSegment(points, x, y) {\n  var minDistance = Infinity;\n\n  for (var i = 0; i < points.length - 1; i++) {\n    var point = points[i];\n    var nextPoint = points[i + 1];\n    var distance_1 = line.pointDistance(point[0], point[1], nextPoint[0], nextPoint[1], x, y);\n\n    if (distance_1 < minDistance) {\n      minDistance = distance_1;\n    }\n  }\n\n  return minDistance;\n}","map":{"version":3,"sources":["../src/segments.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import line from './line';\nimport { distance } from './util';\nfunction analyzePoints(points) {\n    // 计算每段的长度和总的长度\n    var totalLength = 0;\n    var segments = [];\n    for (var i = 0; i < points.length - 1; i++) {\n        var from = points[i];\n        var to = points[i + 1];\n        var length_1 = distance(from[0], from[1], to[0], to[1]);\n        var seg = {\n            from: from,\n            to: to,\n            length: length_1,\n        };\n        segments.push(seg);\n        totalLength += length_1;\n    }\n    return { segments: segments, totalLength: totalLength };\n}\nexport function lengthOfSegment(points) {\n    if (points.length < 2) {\n        return 0;\n    }\n    var totalLength = 0;\n    for (var i = 0; i < points.length - 1; i++) {\n        var from = points[i];\n        var to = points[i + 1];\n        totalLength += distance(from[0], from[1], to[0], to[1]);\n    }\n    return totalLength;\n}\n/**\n * 按照比例在数据片段中获取点\n * @param {array} points 点的集合\n * @param {number} t 百分比 0-1\n * @return {object} 点的坐标\n */\nexport function pointAtSegments(points, t) {\n    // 边界判断\n    if (t > 1 || t < 0 || points.length < 2) {\n        return null;\n    }\n    var _a = analyzePoints(points), segments = _a.segments, totalLength = _a.totalLength;\n    // 多个点有可能重合\n    if (totalLength === 0) {\n        return {\n            x: points[0][0],\n            y: points[0][1],\n        };\n    }\n    // 计算比例\n    var startRatio = 0;\n    var point = null;\n    for (var i = 0; i < segments.length; i++) {\n        var seg = segments[i];\n        var from = seg.from, to = seg.to;\n        var currentRatio = seg.length / totalLength;\n        if (t >= startRatio && t <= startRatio + currentRatio) {\n            var localRatio = (t - startRatio) / currentRatio;\n            point = line.pointAt(from[0], from[1], to[0], to[1], localRatio);\n            break;\n        }\n        startRatio += currentRatio;\n    }\n    return point;\n}\n/**\n * 按照比例在数据片段中获取切线的角度\n * @param {array} points 点的集合\n * @param {number} t 百分比 0-1\n */\nexport function angleAtSegments(points, t) {\n    // 边界判断\n    if (t > 1 || t < 0 || points.length < 2) {\n        return 0;\n    }\n    var _a = analyzePoints(points), segments = _a.segments, totalLength = _a.totalLength;\n    // 计算比例\n    var startRatio = 0;\n    var angle = 0;\n    for (var i = 0; i < segments.length; i++) {\n        var seg = segments[i];\n        var from = seg.from, to = seg.to;\n        var currentRatio = seg.length / totalLength;\n        if (t >= startRatio && t <= startRatio + currentRatio) {\n            angle = Math.atan2(to[1] - from[1], to[0] - from[0]);\n            break;\n        }\n        startRatio += currentRatio;\n    }\n    return angle;\n}\nexport function distanceAtSegment(points, x, y) {\n    var minDistance = Infinity;\n    for (var i = 0; i < points.length - 1; i++) {\n        var point = points[i];\n        var nextPoint = points[i + 1];\n        var distance_1 = line.pointDistance(point[0], point[1], nextPoint[0], nextPoint[1], x, y);\n        if (distance_1 < minDistance) {\n            minDistance = distance_1;\n        }\n    }\n    return minDistance;\n}\n//# sourceMappingURL=segments.js.map"]},"metadata":{},"sourceType":"module"}