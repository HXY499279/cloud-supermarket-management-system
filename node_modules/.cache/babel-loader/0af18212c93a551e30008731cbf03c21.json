{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { getElements, getElementValue, getCurrentElement } from '../util';\nimport Highlight, { STATUS_ACTIVE, STATUS_UNACTIVE } from './highlight';\n/**\n * Highlight x\n * @ignore\n */\n\nvar HighlightX =\n/** @class */\nfunction (_super) {\n  __extends(HighlightX, _super);\n\n  function HighlightX() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  } // 不允许多选\n\n\n  HighlightX.prototype.setElementHighlight = function (el, callback) {\n    if (callback(el)) {\n      if (el.hasState(STATUS_UNACTIVE)) {\n        el.setState(STATUS_UNACTIVE, false);\n      }\n\n      el.setState(STATUS_ACTIVE, true);\n    } else {\n      el.setState(STATUS_UNACTIVE, true);\n\n      if (el.hasState(STATUS_ACTIVE)) {\n        el.setState(STATUS_ACTIVE, false);\n      }\n    }\n  };\n\n  HighlightX.prototype.setStateByElement = function (element, enable) {\n    var view = this.context.view;\n    var scale = view.getXScale();\n    var value = getElementValue(element, scale.field);\n    var elements = getElements(view);\n    var highlightElements = elements.filter(function (el) {\n      return getElementValue(el, scale.field) === value;\n    });\n    this.setHighlightBy(elements, function (el) {\n      return highlightElements.includes(el);\n    }, enable);\n  };\n  /**\n   * 切换状态\n   */\n\n\n  HighlightX.prototype.toggle = function () {\n    var element = getCurrentElement(this.context);\n\n    if (element) {\n      var hasState = element.hasState(this.stateName);\n      this.setStateByElement(element, !hasState);\n    }\n  };\n\n  return HighlightX;\n}(Highlight);\n\nexport default HighlightX;","map":{"version":3,"sources":["../../../../src/interaction/action/element/highlight-by-x.ts"],"names":[],"mappings":";AACA,SAAS,WAAT,EAAsB,eAAtB,EAAuC,iBAAvC,QAAgE,SAAhE;AACA,OAAO,SAAP,IAAoB,aAApB,EAAmC,eAAnC,QAAoE,aAApE;AAEA;;;AAGG;;AACH,IAAA,UAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyB,EAAA,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;;AAAzB,WAAA,UAAA,GAAA;;AAqCC,GArCD,CACE;;;AACU,EAAA,UAAA,CAAA,SAAA,CAAA,mBAAA,GAAV,UAA8B,EAA9B,EAA2C,QAA3C,EAA6D;AAC3D,QAAI,QAAQ,CAAC,EAAD,CAAZ,EAAkB;AAChB,UAAI,EAAE,CAAC,QAAH,CAAY,eAAZ,CAAJ,EAAkC;AAChC,QAAA,EAAE,CAAC,QAAH,CAAY,eAAZ,EAA6B,KAA7B;AACD;;AACD,MAAA,EAAE,CAAC,QAAH,CAAY,aAAZ,EAA2B,IAA3B;AACD,KALD,MAKO;AACL,MAAA,EAAE,CAAC,QAAH,CAAY,eAAZ,EAA6B,IAA7B;;AACA,UAAI,EAAE,CAAC,QAAH,CAAY,aAAZ,CAAJ,EAAgC;AAC9B,QAAA,EAAE,CAAC,QAAH,CAAY,aAAZ,EAA2B,KAA3B;AACD;AACF;AACF,GAZS;;AAcA,EAAA,UAAA,CAAA,SAAA,CAAA,iBAAA,GAAV,UAA4B,OAA5B,EAA8C,MAA9C,EAA6D;AAC3D,QAAM,IAAI,GAAG,KAAK,OAAL,CAAa,IAA1B;AACA,QAAM,KAAK,GAAG,IAAI,CAAC,SAAL,EAAd;AACA,QAAM,KAAK,GAAG,eAAe,CAAC,OAAD,EAAU,KAAK,CAAC,KAAhB,CAA7B;AACA,QAAM,QAAQ,GAAG,WAAW,CAAC,IAAD,CAA5B;AACA,QAAM,iBAAiB,GAAG,QAAQ,CAAC,MAAT,CAAgB,UAAC,EAAD,EAAG;AAC3C,aAAO,eAAe,CAAC,EAAD,EAAK,KAAK,CAAC,KAAX,CAAf,KAAqC,KAA5C;AACD,KAFyB,CAA1B;AAGA,SAAK,cAAL,CAAoB,QAApB,EAA8B,UAAC,EAAD,EAAG;AAAK,aAAA,iBAAiB,CAAC,QAAlB,CAAA,EAAA,CAAA;AAA8B,KAApE,EAAsE,MAAtE;AACD,GATS;AAWV;;AAEG;;;AACI,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACE,QAAM,OAAO,GAAG,iBAAiB,CAAC,KAAK,OAAN,CAAjC;;AACA,QAAI,OAAJ,EAAa;AACX,UAAM,QAAQ,GAAG,OAAO,CAAC,QAAR,CAAiB,KAAK,SAAtB,CAAjB;AACA,WAAK,iBAAL,CAAuB,OAAvB,EAAgC,CAAC,QAAjC;AACD;AACF,GANM;;AAOT,SAAA,UAAA;AAAC,CArCD,CAAyB,SAAzB,CAAA;;AAuCA,eAAe,UAAf","sourcesContent":["import Element from '../../../geometry/element/';\nimport { getElements, getElementValue, getCurrentElement } from '../util';\nimport Highlight, { STATUS_ACTIVE, STATUS_UNACTIVE, Callback } from './highlight';\n\n/**\n * Highlight x\n * @ignore\n */\nclass HighlightX extends Highlight {\n  // 不允许多选\n  protected setElementHighlight(el: Element, callback: Callback) {\n    if (callback(el)) {\n      if (el.hasState(STATUS_UNACTIVE)) {\n        el.setState(STATUS_UNACTIVE, false);\n      }\n      el.setState(STATUS_ACTIVE, true);\n    } else {\n      el.setState(STATUS_UNACTIVE, true);\n      if (el.hasState(STATUS_ACTIVE)) {\n        el.setState(STATUS_ACTIVE, false);\n      }\n    }\n  }\n\n  protected setStateByElement(element: Element, enable: boolean) {\n    const view = this.context.view;\n    const scale = view.getXScale();\n    const value = getElementValue(element, scale.field);\n    const elements = getElements(view);\n    const highlightElements = elements.filter((el) => {\n      return getElementValue(el, scale.field) === value;\n    });\n    this.setHighlightBy(elements, (el) => highlightElements.includes(el), enable);\n  }\n\n  /**\n   * 切换状态\n   */\n  public toggle() {\n    const element = getCurrentElement(this.context);\n    if (element) {\n      const hasState = element.hasState(this.stateName);\n      this.setStateByElement(element, !hasState);\n    }\n  }\n}\n\nexport default HighlightX;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}