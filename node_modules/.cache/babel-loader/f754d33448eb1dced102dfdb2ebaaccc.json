{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { reduce, isNumber } from '@antv/util';\n/**\n * 获得中位数\n * @param array\n */\n\nexport function getMedian(array) {\n  var arr = __spreadArrays(array); // 先排序\n\n\n  arr.sort(function (a, b) {\n    return a - b;\n  });\n  var len = arr.length; // median\n  // 0\n\n  if (len === 0) {\n    return 0;\n  } // 奇数\n\n\n  if (len % 2 === 1) {\n    return arr[(len - 1) / 2];\n  } // 偶数\n\n\n  return (arr[len / 2] + arr[len / 2 - 1]) / 2;\n}\n/**\n * 获得平均值\n * @param array\n */\n\nexport function getMean(array) {\n  var sum = reduce(array, function (r, num) {\n    return r += isNaN(num) || !isNumber(num) ? 0 : num;\n  }, 0);\n  return array.length === 0 ? 0 : sum / array.length;\n}","map":{"version":3,"sources":["../../src/util/stat.ts"],"names":[],"mappings":";AAAA,SAAS,MAAT,EAAiB,QAAjB,QAAiC,YAAjC;AAEA;;;AAGG;;AACH,OAAM,SAAU,SAAV,CAAoB,KAApB,EAAmC;AACvC,MAAM,GAAG,GAAA,cAAA,CAAO,KAAP,CAAT,CADuC,CAEvC;;;AACA,EAAA,GAAG,CAAC,IAAJ,CAAS,UAAC,CAAD,EAAY,CAAZ,EAAqB;AAC5B,WAAO,CAAC,GAAG,CAAX;AACD,GAFD;AAIA,MAAM,GAAG,GAAG,GAAG,CAAC,MAAhB,CAPuC,CASvC;AACA;;AACA,MAAI,GAAG,KAAK,CAAZ,EAAe;AACb,WAAO,CAAP;AACD,GAbsC,CAevC;;;AACA,MAAI,GAAG,GAAG,CAAN,KAAY,CAAhB,EAAmB;AACjB,WAAO,GAAG,CAAC,CAAC,GAAG,GAAG,CAAP,IAAY,CAAb,CAAV;AACD,GAlBsC,CAoBvC;;;AACA,SAAO,CAAC,GAAG,CAAC,GAAG,GAAG,CAAP,CAAH,GAAe,GAAG,CAAC,GAAG,GAAG,CAAN,GAAU,CAAX,CAAnB,IAAoC,CAA3C;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,OAAV,CAAkB,KAAlB,EAAiC;AACrC,MAAM,GAAG,GAAG,MAAM,CAAC,KAAD,EAAQ,UAAC,CAAD,EAAY,GAAZ,EAAuB;AAC/C,WAAO,CAAC,IAAK,KAAK,CAAC,GAAD,CAAL,IAAc,CAAC,QAAQ,CAAC,GAAD,CAAvB,GAA+B,CAA/B,GAAmC,GAAhD;AACD,GAFiB,EAEf,CAFe,CAAlB;AAIA,SAAO,KAAK,CAAC,MAAN,KAAiB,CAAjB,GAAqB,CAArB,GAAyB,GAAG,GAAG,KAAK,CAAC,MAA5C;AACD","sourcesContent":["import { reduce, isNumber } from '@antv/util';\n\n/**\n * 获得中位数\n * @param array\n */\nexport function getMedian(array: number[]) {\n  const arr = [...array];\n  // 先排序\n  arr.sort((a: number, b: number) => {\n    return a - b;\n  });\n\n  const len = arr.length;\n\n  // median\n  // 0\n  if (len === 0) {\n    return 0\n  }\n\n  // 奇数\n  if (len % 2 === 1) {\n    return arr[(len - 1) / 2];\n  }\n\n  // 偶数\n  return (arr[len / 2] + arr[len / 2 - 1]) / 2;\n}\n\n/**\n * 获得平均值\n * @param array\n */\nexport function getMean(array: number[]) {\n  const sum = reduce(array, (r: number, num: number) => {\n    return r += (isNaN(num) || !isNumber(num) ? 0 : num);\n  }, 0);\n\n  return array.length === 0 ? 0 : sum / array.length;\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}