{"ast":null,"code":"import CallbackAction from './callback';\nimport { get } from '@antv/util'; // Action 类的缓存\n\nvar ActionCache = {};\n/**\n * 根据名称获取 Action 实例\n * @param actionName - action 的名称\n * @param context 上下文\n * @returns Action 实例\n */\n\nexport function createAction(actionName, context) {\n  var actionOption = ActionCache[actionName];\n  var action = null;\n\n  if (actionOption) {\n    var ActionClass = actionOption.ActionClass,\n        cfg = actionOption.cfg;\n    action = new ActionClass(context, cfg);\n    action.name = actionName;\n    action.init();\n  }\n\n  return action;\n}\n/**\n * 根据 action 的 name 获取定义的类\n * @param actionName action 的 name\n */\n\nexport function getActionClass(actionName) {\n  var actionOption = ActionCache[actionName];\n  return get(actionOption, 'ActionClass');\n}\n/**\n * 注册 Action\n * @param actionName - action 的名称\n * @param ActionClass - 继承自 action 的类\n */\n\nexport function registerAction(actionName, ActionClass, cfg) {\n  ActionCache[actionName] = {\n    ActionClass: ActionClass,\n    cfg: cfg\n  };\n}\n/**\n * 取消注册 Action\n * @param actionName action 名称\n */\n\nexport function unregisterAction(actionName) {\n  delete ActionCache[actionName];\n}\n/**\n * 根据回调函数获取 Action 实例\n * @param callback - action 的回调函数\n * @param context 上下文\n * @returns Action 实例\n */\n\nexport function createCallbackAction(callback, context) {\n  var action = new CallbackAction(context);\n  action.callback = callback;\n  action.name = 'callback';\n  return action;\n}","map":{"version":3,"sources":["../../../src/interaction/action/register.ts"],"names":[],"mappings":"AAEA,OAAO,cAAP,MAA2B,YAA3B;AACA,SAAS,GAAT,QAAoB,YAApB,C,CAWA;;AACA,IAAM,WAAW,GAAiC,EAAlD;AAEA;;;;;AAKG;;AACH,OAAM,SAAU,YAAV,CAAuB,UAAvB,EAA2C,OAA3C,EAAuE;AAC3E,MAAM,YAAY,GAAG,WAAW,CAAC,UAAD,CAAhC;AACA,MAAI,MAAM,GAAG,IAAb;;AACA,MAAI,YAAJ,EAAkB;AACR,QAAA,WAAW,GAAU,YAAY,CAAtB,WAAX;AAAA,QAAa,GAAG,GAAK,YAAY,CAAjB,GAAhB;AACR,IAAA,MAAM,GAAG,IAAI,WAAJ,CAAgB,OAAhB,EAAyB,GAAzB,CAAT;AACA,IAAA,MAAM,CAAC,IAAP,GAAc,UAAd;AACA,IAAA,MAAM,CAAC,IAAP;AACD;;AACD,SAAO,MAAP;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,cAAV,CAAyB,UAAzB,EAA2C;AAC/C,MAAM,YAAY,GAAG,WAAW,CAAC,UAAD,CAAhC;AACA,SAAO,GAAG,CAAC,YAAD,EAAe,aAAf,CAAV;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,cAAV,CAAyB,UAAzB,EAA6C,WAA7C,EAA6E,GAA7E,EAA8F;AAClG,EAAA,WAAW,CAAC,UAAD,CAAX,GAA0B;AACxB,IAAA,WAAW,EAAA,WADa;AAExB,IAAA,GAAG,EAAA;AAFqB,GAA1B;AAID;AAED;;;AAGG;;AACH,OAAM,SAAU,gBAAV,CAA2B,UAA3B,EAA6C;AACjD,SAAO,WAAW,CAAC,UAAD,CAAlB;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,oBAAV,CAA+B,QAA/B,EAAyD,OAAzD,EAAqF;AACzF,MAAM,MAAM,GAAG,IAAI,cAAJ,CAAmB,OAAnB,CAAf;AACA,EAAA,MAAM,CAAC,QAAP,GAAkB,QAAlB;AACA,EAAA,MAAM,CAAC,IAAP,GAAc,UAAd;AACA,SAAO,MAAP;AACD","sourcesContent":["import { ActionCallback, IInteractionContext, LooseObject } from '../../interface';\nimport Action from './base';\nimport CallbackAction from './callback';\nimport { get } from '@antv/util';\n\n/** Action 构造函数 */\ntype ActionConstructor = new (context: IInteractionContext, cfg?: LooseObject) => Action;\n\n/** @ignore */\ninterface ActionOption {\n  ActionClass: ActionConstructor;\n  cfg: LooseObject;\n}\n\n// Action 类的缓存\nconst ActionCache: Record<string, ActionOption> = {};\n\n/**\n * 根据名称获取 Action 实例\n * @param actionName - action 的名称\n * @param context 上下文\n * @returns Action 实例\n */\nexport function createAction(actionName: string, context: IInteractionContext): Action {\n  const actionOption = ActionCache[actionName];\n  let action = null;\n  if (actionOption) {\n    const { ActionClass, cfg } = actionOption;\n    action = new ActionClass(context, cfg);\n    action.name = actionName;\n    action.init();\n  }\n  return action;\n}\n\n/**\n * 根据 action 的 name 获取定义的类\n * @param actionName action 的 name\n */\nexport function getActionClass(actionName: string): ActionConstructor {\n  const actionOption = ActionCache[actionName];\n  return get(actionOption, 'ActionClass');\n}\n\n/**\n * 注册 Action\n * @param actionName - action 的名称\n * @param ActionClass - 继承自 action 的类\n */\nexport function registerAction(actionName: string, ActionClass: ActionConstructor, cfg?: LooseObject) {\n  ActionCache[actionName] = {\n    ActionClass,\n    cfg,\n  };\n}\n\n/**\n * 取消注册 Action\n * @param actionName action 名称\n */\nexport function unregisterAction(actionName: string) {\n  delete ActionCache[actionName];\n}\n\n/**\n * 根据回调函数获取 Action 实例\n * @param callback - action 的回调函数\n * @param context 上下文\n * @returns Action 实例\n */\nexport function createCallbackAction(callback: ActionCallback, context: IInteractionContext): CallbackAction {\n  const action = new CallbackAction(context);\n  action.callback = callback;\n  action.name = 'callback';\n  return action;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}