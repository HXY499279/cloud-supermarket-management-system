{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport TransformAction from './scale-transform';\n/**\n * 拖拽 Scale 的 Action\n * @ignore\n */\n\nvar ScaleTranslate =\n/** @class */\nfunction (_super) {\n  __extends(ScaleTranslate, _super);\n\n  function ScaleTranslate() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.startPoint = null;\n    _this.starting = false;\n    _this.startCache = {};\n    return _this;\n  }\n  /**\n   * 开始\n   */\n\n\n  ScaleTranslate.prototype.start = function () {\n    var _this = this;\n\n    this.startPoint = this.context.getCurrentPoint();\n    this.starting = true;\n    var dims = this.dims;\n    each(dims, function (dim) {\n      var scale = _this.getScale(dim);\n\n      var min = scale.min,\n          max = scale.max,\n          values = scale.values;\n      _this.startCache[dim] = {\n        min: min,\n        max: max,\n        values: values\n      };\n    });\n  }; // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n\n  /**\n   * 结束\n   */\n\n\n  ScaleTranslate.prototype.end = function () {\n    this.startPoint = null;\n    this.starting = false;\n    this.startCache = {};\n  };\n  /**\n   * 平移\n   */\n\n\n  ScaleTranslate.prototype.translate = function () {\n    var _this = this;\n\n    if (!this.starting) {\n      return;\n    }\n\n    var startPoint = this.startPoint;\n    var coord = this.context.view.getCoordinate();\n    var currentPoint = this.context.getCurrentPoint();\n    var normalStart = coord.invert(startPoint);\n    var noramlCurrent = coord.invert(currentPoint);\n    var dx = noramlCurrent.x - normalStart.x;\n    var dy = noramlCurrent.y - normalStart.y;\n    var view = this.context.view;\n    var dims = this.dims;\n    each(dims, function (dim) {\n      _this.translateDim(dim, {\n        x: dx * -1,\n        y: dy * -1\n      });\n    });\n    view.render(true);\n  }; // 平移度量\n\n\n  ScaleTranslate.prototype.translateDim = function (dim, normalPoint) {\n    if (this.hasDim(dim)) {\n      var scale = this.getScale(dim);\n\n      if (scale.isLinear) {\n        this.translateLinear(dim, scale, normalPoint);\n      } //  else { // 暂时仅处理连续字段\n      // this.translateCategory(dim, scale, normalPoint);\n      // }\n\n    }\n  }; // linear 度量平移\n\n\n  ScaleTranslate.prototype.translateLinear = function (dim, scale, normalPoint) {\n    var view = this.context.view;\n    var _a = this.startCache[dim],\n        min = _a.min,\n        max = _a.max;\n    var range = max - min;\n    var d = normalPoint[dim] * range; // 只有第一次缓存，否则无法回滚\n\n    if (!this.cacheScaleDefs[dim]) {\n      this.cacheScaleDefs[dim] = {\n        // @ts-ignore\n        nice: scale.nice,\n        min: min,\n        max: max\n      };\n    }\n\n    view.scale(scale.field, {\n      // @ts-ignore\n      nice: false,\n      min: min + d,\n      max: max + d\n    });\n  }; // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n\n  /**\n   * 回滚\n   */\n\n\n  ScaleTranslate.prototype.reset = function () {\n    _super.prototype.reset.call(this);\n\n    this.startPoint = null;\n    this.starting = false;\n  };\n\n  return ScaleTranslate;\n}(TransformAction);\n\nexport default ScaleTranslate;","map":{"version":3,"sources":["../../../../src/interaction/action/view/scale-translate.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport { Point } from '../../../dependents';\nimport TransformAction from './scale-transform';\n\n/**\n * 拖拽 Scale 的 Action\n * @ignore\n */\nclass ScaleTranslate extends TransformAction {\n  protected startPoint: Point = null;\n  protected starting = false;\n  private startCache = {};\n  /**\n   * 开始\n   */\n  public start() {\n    this.startPoint = this.context.getCurrentPoint();\n    this.starting = true;\n    const dims = this.dims;\n    each(dims, (dim) => {\n      const scale = this.getScale(dim);\n      const { min, max, values } = scale;\n      this.startCache[dim] = { min, max, values };\n    });\n  }\n\n  // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n\n  /**\n   * 结束\n   */\n  public end() {\n    this.startPoint = null;\n    this.starting = false;\n    this.startCache = {};\n  }\n\n  /**\n   * 平移\n   */\n  public translate() {\n    if (!this.starting) {\n      return;\n    }\n    const startPoint = this.startPoint;\n    const coord = this.context.view.getCoordinate();\n    const currentPoint = this.context.getCurrentPoint();\n    const normalStart = coord.invert(startPoint);\n    const noramlCurrent = coord.invert(currentPoint);\n    const dx = noramlCurrent.x - normalStart.x;\n    const dy = noramlCurrent.y - normalStart.y;\n    const view = this.context.view;\n    const dims = this.dims;\n    each(dims, (dim) => {\n      this.translateDim(dim, { x: dx * -1, y: dy * -1 });\n    });\n    view.render(true);\n  }\n\n  // 平移度量\n  private translateDim(dim, normalPoint) {\n    if (this.hasDim(dim)) {\n      const scale = this.getScale(dim);\n      if (scale.isLinear) {\n        this.translateLinear(dim, scale, normalPoint);\n      }\n      //  else { // 暂时仅处理连续字段\n      // this.translateCategory(dim, scale, normalPoint);\n      // }\n    }\n  }\n  // linear 度量平移\n  private translateLinear(dim, scale, normalPoint) {\n    const view = this.context.view;\n    const { min, max } = this.startCache[dim];\n    const range = max - min;\n    const d = normalPoint[dim] * range;\n    // 只有第一次缓存，否则无法回滚\n    if (!this.cacheScaleDefs[dim]) {\n      this.cacheScaleDefs[dim] = {\n        // @ts-ignore\n        nice: scale.nice,\n        min,\n        max,\n      };\n    }\n    view.scale(scale.field, {\n      // @ts-ignore\n      nice: false,\n      min: min + d,\n      max: max + d,\n    });\n  }\n\n  // 平移分类的度量\n  // private translateCategory(dim, scale, normalPoint) {\n  // }\n\n  /**\n   * 回滚\n   */\n  public reset() {\n    super.reset();\n    this.startPoint = null;\n    this.starting = false;\n  }\n}\n\nexport default ScaleTranslate;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}