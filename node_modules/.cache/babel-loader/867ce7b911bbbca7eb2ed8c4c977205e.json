{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { getLogPositiveMin, log } from '../util/math';\nimport Continuous from './base';\n/**\n * Log 度量，处理非均匀分布\n */\n\nvar Log =\n/** @class */\nfunction (_super) {\n  __extends(Log, _super);\n\n  function Log() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'log';\n    return _this;\n  }\n  /**\n   * @override\n   */\n\n\n  Log.prototype.invert = function (value) {\n    var base = this.base;\n    var max = log(base, this.max);\n    var rangeMin = this.rangeMin();\n    var range = this.rangeMax() - rangeMin;\n    var min;\n    var positiveMin = this.positiveMin;\n\n    if (positiveMin) {\n      if (value === 0) {\n        return 0;\n      }\n\n      min = log(base, positiveMin / base);\n      var appendPercent = 1 / (max - min) * range; // 0 到 positiveMin的占比\n\n      if (value < appendPercent) {\n        // 落到 0 - positiveMin 之间\n        return value / appendPercent * positiveMin;\n      }\n    } else {\n      min = log(base, this.min);\n    }\n\n    var percent = (value - rangeMin) / range;\n    var tmp = percent * (max - min) + min;\n    return Math.pow(base, tmp);\n  };\n\n  Log.prototype.initCfg = function () {\n    this.tickMethod = 'log';\n    this.base = 10;\n    this.tickCount = 6;\n    this.nice = true;\n  }; // 设置\n\n\n  Log.prototype.setDomain = function () {\n    _super.prototype.setDomain.call(this);\n\n    var min = this.min;\n\n    if (min < 0) {\n      throw new Error('When you use log scale, the minimum value must be greater than zero!');\n    }\n\n    if (min === 0) {\n      this.positiveMin = getLogPositiveMin(this.values, this.base, this.max);\n    }\n  }; // 根据当前值获取占比\n\n\n  Log.prototype.getScalePercent = function (value) {\n    var max = this.max;\n    var min = this.min;\n\n    if (max === min) {\n      return 0;\n    } // 如果值小于等于0，则按照0处理\n\n\n    if (value <= 0) {\n      return 0;\n    }\n\n    var base = this.base;\n    var positiveMin = this.positiveMin; // 如果min == 0, 则根据比0大的最小值，计算比例关系。这个最小值作为坐标轴上的第二个tick，第一个是0但是不显示\n\n    if (positiveMin) {\n      min = positiveMin * 1 / base;\n    }\n\n    var percent; // 如果数值小于次小值，那么就计算 value / 次小值 占整体的比例\n\n    if (value < positiveMin) {\n      percent = value / positiveMin / (log(base, max) - log(base, min));\n    } else {\n      percent = (log(base, value) - log(base, min)) / (log(base, max) - log(base, min));\n    }\n\n    return percent;\n  };\n\n  return Log;\n}(Continuous);\n\nexport default Log;","map":{"version":3,"sources":["../../src/continuous/log.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { getLogPositiveMin, log } from '../util/math';\nimport Continuous from './base';\n/**\n * Log 度量，处理非均匀分布\n */\nvar Log = /** @class */ (function (_super) {\n    __extends(Log, _super);\n    function Log() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'log';\n        return _this;\n    }\n    /**\n     * @override\n     */\n    Log.prototype.invert = function (value) {\n        var base = this.base;\n        var max = log(base, this.max);\n        var rangeMin = this.rangeMin();\n        var range = this.rangeMax() - rangeMin;\n        var min;\n        var positiveMin = this.positiveMin;\n        if (positiveMin) {\n            if (value === 0) {\n                return 0;\n            }\n            min = log(base, positiveMin / base);\n            var appendPercent = (1 / (max - min)) * range; // 0 到 positiveMin的占比\n            if (value < appendPercent) {\n                // 落到 0 - positiveMin 之间\n                return (value / appendPercent) * positiveMin;\n            }\n        }\n        else {\n            min = log(base, this.min);\n        }\n        var percent = (value - rangeMin) / range;\n        var tmp = percent * (max - min) + min;\n        return Math.pow(base, tmp);\n    };\n    Log.prototype.initCfg = function () {\n        this.tickMethod = 'log';\n        this.base = 10;\n        this.tickCount = 6;\n        this.nice = true;\n    };\n    // 设置\n    Log.prototype.setDomain = function () {\n        _super.prototype.setDomain.call(this);\n        var min = this.min;\n        if (min < 0) {\n            throw new Error('When you use log scale, the minimum value must be greater than zero!');\n        }\n        if (min === 0) {\n            this.positiveMin = getLogPositiveMin(this.values, this.base, this.max);\n        }\n    };\n    // 根据当前值获取占比\n    Log.prototype.getScalePercent = function (value) {\n        var max = this.max;\n        var min = this.min;\n        if (max === min) {\n            return 0;\n        }\n        // 如果值小于等于0，则按照0处理\n        if (value <= 0) {\n            return 0;\n        }\n        var base = this.base;\n        var positiveMin = this.positiveMin;\n        // 如果min == 0, 则根据比0大的最小值，计算比例关系。这个最小值作为坐标轴上的第二个tick，第一个是0但是不显示\n        if (positiveMin) {\n            min = (positiveMin * 1) / base;\n        }\n        var percent;\n        // 如果数值小于次小值，那么就计算 value / 次小值 占整体的比例\n        if (value < positiveMin) {\n            percent = value / positiveMin / (log(base, max) - log(base, min));\n        }\n        else {\n            percent = (log(base, value) - log(base, min)) / (log(base, max) - log(base, min));\n        }\n        return percent;\n    };\n    return Log;\n}(Continuous));\nexport default Log;\n//# sourceMappingURL=log.js.map"]},"metadata":{},"sourceType":"module"}