{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getArcPath } from '../../../util/graphics';\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\nimport { getCPath, getQPath } from './util';\n\nfunction getArcShapePath(from, to, center) {\n  var sub = getQPath(to, center);\n  var path = [['M', from.x, from.y]];\n  path.push(sub);\n  return path;\n}\n\nfunction getArcShapeWeightPath(points, center) {\n  var arc1 = getQPath(points[1], center);\n  var arc2 = getQPath(points[3], center);\n  var path = [['M', points[0].x, points[0].y]];\n  path.push(arc2);\n  path.push(['L', points[3].x, points[3].y]);\n  path.push(['L', points[2].x, points[2].y]);\n  path.push(arc1);\n  path.push(['L', points[1].x, points[1].y]);\n  path.push(['L', points[0].x, points[0].y]);\n  path.push(['Z']);\n  return path;\n} // 弧线包括笛卡尔坐标系下的半圆弧线、极坐标系下以圆心为控制点的二阶曲线、笛卡尔坐标系下带权重的三阶曲线、极坐标系下带权重的以圆心为控制点的二阶曲线\n\n\nregisterShape('edge', 'arc', {\n  draw: function (cfg, container) {\n    var style = getStyle(cfg, true, false, 'lineWidth');\n    var points = cfg.points;\n    var type = points.length > 2 ? 'weight' : 'normal';\n    var path;\n\n    if (cfg.isInCircle) {\n      var center = {\n        x: 0,\n        y: 1\n      };\n\n      if (type === 'normal') {\n        path = getArcShapePath(points[0], points[1], center);\n      } else {\n        style.fill = style.stroke;\n        path = getArcShapeWeightPath(points, center);\n      }\n\n      path = this.parsePath(path);\n      return container.addShape('path', {\n        attrs: __assign(__assign({}, style), {\n          path: path\n        })\n      });\n    } else {\n      if (type === 'normal') {\n        points = this.parsePoints(points);\n        path = getArcPath((points[1].x + points[0].x) / 2, points[0].y, Math.abs(points[1].x - points[0].x) / 2, Math.PI, Math.PI * 2);\n        return container.addShape('path', {\n          attrs: __assign(__assign({}, style), {\n            path: path\n          })\n        });\n      } else {\n        var c1 = getCPath(points[1], points[3]);\n        var c2 = getCPath(points[2], points[0]);\n        path = [['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], c1, ['L', points[3].x, points[3].y], ['L', points[2].x, points[2].y], c2, ['Z']];\n        path = this.parsePath(path);\n        style.fill = style.stroke;\n        return container.addShape('path', {\n          attrs: __assign(__assign({}, style), {\n            path: path\n          })\n        });\n      }\n    }\n  },\n  getMarker: function (markerCfg) {\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4.5,\n        fill: markerCfg.color\n      }\n    };\n  }\n});","map":{"version":3,"sources":["../../../../src/geometry/shape/edge/arc.ts"],"names":[],"mappings":"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","sourcesContent":["import { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg } from '../../../interface';\n\nimport { getArcPath } from '../../../util/graphics';\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\nimport { getCPath, getQPath } from './util';\n\nfunction getArcShapePath(from: Point, to: Point, center: Point) {\n  const sub = getQPath(to, center);\n  const path = [['M', from.x, from.y]];\n  path.push(sub);\n  return path;\n}\n\nfunction getArcShapeWeightPath(points: Point[], center: Point) {\n  const arc1 = getQPath(points[1], center);\n  const arc2 = getQPath(points[3], center);\n  const path = [['M', points[0].x, points[0].y]];\n  path.push(arc2);\n  path.push(['L', points[3].x, points[3].y]);\n  path.push(['L', points[2].x, points[2].y]);\n  path.push(arc1);\n  path.push(['L', points[1].x, points[1].y]);\n  path.push(['L', points[0].x, points[0].y]);\n  path.push(['Z']);\n  return path;\n}\n\n// 弧线包括笛卡尔坐标系下的半圆弧线、极坐标系下以圆心为控制点的二阶曲线、笛卡尔坐标系下带权重的三阶曲线、极坐标系下带权重的以圆心为控制点的二阶曲线\nregisterShape('edge', 'arc', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const style = getStyle(cfg, true, false, 'lineWidth');\n\n    let points = cfg.points as Point[];\n    const type = points.length > 2 ? 'weight' : 'normal';\n    let path;\n    if (cfg.isInCircle) {\n      const center = { x: 0, y: 1 };\n      if (type === 'normal') {\n        path = getArcShapePath(points[0], points[1], center);\n      } else {\n        style.fill = style.stroke;\n        path = getArcShapeWeightPath(points, center);\n      }\n      path = this.parsePath(path);\n\n      return container.addShape('path', {\n        attrs: {\n          ...style,\n          path,\n        },\n      });\n    } else {\n      if (type === 'normal') {\n        points = this.parsePoints(points);\n        path = getArcPath(\n          (points[1].x + points[0].x) / 2,\n          points[0].y,\n          Math.abs(points[1].x - points[0].x) / 2,\n          Math.PI,\n          Math.PI * 2\n        );\n        return container.addShape('path', {\n          attrs: {\n            ...style,\n            path,\n          },\n        });\n      } else {\n        const c1 = getCPath(points[1], points[3]);\n        const c2 = getCPath(points[2], points[0]);\n\n        path = [\n          ['M', points[0].x, points[0].y],\n          ['L', points[1].x, points[1].y],\n          c1,\n          ['L', points[3].x, points[3].y],\n          ['L', points[2].x, points[2].y],\n          c2,\n          ['Z'],\n        ];\n        path = this.parsePath(path);\n        style.fill = style.stroke;\n\n        return container.addShape('path', {\n          attrs: {\n            ...style,\n            path,\n          },\n        });\n      }\n    }\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4.5,\n        fill: markerCfg.color,\n      },\n    };\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}