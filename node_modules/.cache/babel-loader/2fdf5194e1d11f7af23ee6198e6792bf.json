{"ast":null,"code":"import { each } from '@antv/util';\nimport { MarkerSymbols } from '../../../util/marker';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { splitPoints } from '../util/split-points';\nimport { drawPoints, SHAPES } from './util';\nvar PointShapeFactory = registerShapeFactory('point', {\n  defaultShapeType: 'hollow-circle',\n  getDefaultPoints: function (pointInfo) {\n    return splitPoints(pointInfo);\n  }\n});\neach(SHAPES, function (shapeName) {\n  // 添加该 shape 对应的 hollow-shape\n  registerShape('point', \"hollow-\" + shapeName, {\n    draw: function (cfg, container) {\n      return drawPoints(this, cfg, container, shapeName, true);\n    },\n    getMarker: function (markerCfg) {\n      var color = markerCfg.color;\n      return {\n        symbol: MarkerSymbols[shapeName] || shapeName,\n        style: {\n          r: 4.5,\n          stroke: color,\n          fill: null\n        }\n      };\n    }\n  });\n});\nexport default PointShapeFactory;","map":{"version":3,"sources":["../../../../src/geometry/shape/point/index.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,QAAqB,YAArB;AAIA,SAAS,aAAT,QAA8B,sBAA9B;AACA,SAAS,aAAT,EAAwB,oBAAxB,QAAoD,SAApD;AACA,SAAS,WAAT,QAA4B,sBAA5B;AACA,SAAS,UAAT,EAAqB,MAArB,QAAmC,QAAnC;AAEA,IAAM,iBAAiB,GAAG,oBAAoB,CAAC,OAAD,EAAU;AACtD,EAAA,gBAAgB,EAAE,eADoC;AAEtD,EAAA,gBAAgB,EAAhB,UAAiB,SAAjB,EAAsC;AACpC,WAAO,WAAW,CAAC,SAAD,CAAlB;AACD;AAJqD,CAAV,CAA9C;AAOA,IAAI,CAAC,MAAD,EAAS,UAAC,SAAD,EAAkB;AAC7B;AACA,EAAA,aAAa,CAAC,OAAD,EAAU,YAAU,SAApB,EAAiC;AAC5C,IAAA,IAAI,EAAJ,UAAK,GAAL,EAAqB,SAArB,EAAsC;AACpC,aAAO,UAAU,CAAC,IAAD,EAAO,GAAP,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,IAAlC,CAAjB;AACD,KAH2C;AAI5C,IAAA,SAAS,EAAT,UAAU,SAAV,EAAmC;AACzB,UAAA,KAAK,GAAK,SAAS,CAAd,KAAL;AACR,aAAO;AACL,QAAA,MAAM,EAAE,aAAa,CAAC,SAAD,CAAb,IAA4B,SAD/B;AAEL,QAAA,KAAK,EAAE;AACL,UAAA,CAAC,EAAE,GADE;AAEL,UAAA,MAAM,EAAE,KAFH;AAGL,UAAA,IAAI,EAAE;AAHD;AAFF,OAAP;AAQD;AAd2C,GAAjC,CAAb;AAgBD,CAlBG,CAAJ;AAoBA,eAAe,iBAAf","sourcesContent":["import { each } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg, ShapePoint } from '../../../interface';\n\nimport { MarkerSymbols } from '../../../util/marker';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { splitPoints } from '../util/split-points';\nimport { drawPoints, SHAPES } from './util';\n\nconst PointShapeFactory = registerShapeFactory('point', {\n  defaultShapeType: 'hollow-circle',\n  getDefaultPoints(pointInfo: ShapePoint): Point[] {\n    return splitPoints(pointInfo);\n  },\n});\n\neach(SHAPES, (shapeName: string) => {\n  // 添加该 shape 对应的 hollow-shape\n  registerShape('point', `hollow-${shapeName}`, {\n    draw(cfg: ShapeInfo, container: IGroup) {\n      return drawPoints(this, cfg, container, shapeName, true);\n    },\n    getMarker(markerCfg: ShapeMarkerCfg) {\n      const { color } = markerCfg;\n      return {\n        symbol: MarkerSymbols[shapeName] || shapeName,\n        style: {\n          r: 4.5,\n          stroke: color,\n          fill: null,\n        },\n      };\n    },\n  });\n});\n\nexport default PointShapeFactory;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}