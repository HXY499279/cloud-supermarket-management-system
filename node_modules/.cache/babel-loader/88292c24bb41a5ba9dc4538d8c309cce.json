{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { getTextPoint } from '../util/util';\nimport CrosshairBase from './base';\n\nvar LineCrosshair =\n/** @class */\nfunction (_super) {\n  __extends(LineCrosshair, _super);\n\n  function LineCrosshair() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  LineCrosshair.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n\n    return __assign(__assign({}, cfg), {\n      type: 'line',\n      locationType: 'region',\n      start: null,\n      end: null\n    });\n  }; // 直线的文本需要同直线垂直\n\n\n  LineCrosshair.prototype.getRotateAngle = function () {\n    var _a = this.getLocation(),\n        start = _a.start,\n        end = _a.end;\n\n    var position = this.get('text').position;\n    var angle = Math.atan2(end.y - start.y, end.x - start.x);\n    var tangentAngle = position === 'start' ? angle - Math.PI / 2 : angle + Math.PI / 2;\n    return tangentAngle;\n  };\n\n  LineCrosshair.prototype.getTextPoint = function () {\n    var _a = this.getLocation(),\n        start = _a.start,\n        end = _a.end;\n\n    var _b = this.get('text'),\n        position = _b.position,\n        offset = _b.offset;\n\n    return getTextPoint(start, end, position, offset);\n  };\n\n  LineCrosshair.prototype.getLinePath = function () {\n    var _a = this.getLocation(),\n        start = _a.start,\n        end = _a.end;\n\n    return [['M', start.x, start.y], ['L', end.x, end.y]];\n  };\n\n  return LineCrosshair;\n}(CrosshairBase);\n\nexport default LineCrosshair;","map":{"version":3,"sources":["../../src/crosshair/line.ts"],"names":[],"mappings":";AAEA,SAAS,YAAT,QAA6B,cAA7B;AACA,OAAO,aAAP,MAA0B,QAA1B;;AAEA,IAAA,aAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4B,EAAA,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;;AAA5B,WAAA,aAAA,GAAA;;AAkCC;;AAjCQ,EAAA,aAAA,CAAA,SAAA,CAAA,aAAA,GAAP,YAAA;AACE,QAAM,GAAG,GAAG,MAAA,CAAA,SAAA,CAAM,aAAN,CAAmB,IAAnB,CAAmB,IAAnB,CAAZ;;AACA,WAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,GADL,CAAA,EACQ;AACN,MAAA,IAAI,EAAE,MADA;AAEN,MAAA,YAAY,EAAE,QAFR;AAGN,MAAA,KAAK,EAAE,IAHD;AAIN,MAAA,GAAG,EAAE;AAJC,KADR,CAAA;AAOD,GATM,CADT,CAYE;;;AACU,EAAA,aAAA,CAAA,SAAA,CAAA,cAAA,GAAV,YAAA;AACQ,QAAA,EAAA,GAAiB,KAAK,WAAL,EAAjB;AAAA,QAAE,KAAK,GAAA,EAAA,CAAA,KAAP;AAAA,QAAS,GAAG,GAAA,EAAA,CAAA,GAAZ;;AACE,QAAA,QAAQ,GAAK,KAAK,GAAL,CAAS,MAAT,EAAL,QAAR;AACR,QAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,CAAJ,GAAQ,KAAK,CAAC,CAAzB,EAA4B,GAAG,CAAC,CAAJ,GAAQ,KAAK,CAAC,CAA1C,CAAd;AACA,QAAM,YAAY,GAAG,QAAQ,KAAK,OAAb,GAAuB,KAAK,GAAG,IAAI,CAAC,EAAL,GAAU,CAAzC,GAA6C,KAAK,GAAG,IAAI,CAAC,EAAL,GAAU,CAApF;AACA,WAAO,YAAP;AACD,GANS;;AAQA,EAAA,aAAA,CAAA,SAAA,CAAA,YAAA,GAAV,YAAA;AACQ,QAAA,EAAA,GAAiB,KAAK,WAAL,EAAjB;AAAA,QAAE,KAAK,GAAA,EAAA,CAAA,KAAP;AAAA,QAAS,GAAG,GAAA,EAAA,CAAA,GAAZ;;AACA,QAAA,EAAA,GAAuB,KAAK,GAAL,CAAS,MAAT,CAAvB;AAAA,QAAE,QAAQ,GAAA,EAAA,CAAA,QAAV;AAAA,QAAY,MAAM,GAAA,EAAA,CAAA,MAAlB;;AACN,WAAO,YAAY,CAAC,KAAD,EAAQ,GAAR,EAAa,QAAb,EAAuB,MAAvB,CAAnB;AACD,GAJS;;AAMA,EAAA,aAAA,CAAA,SAAA,CAAA,WAAA,GAAV,YAAA;AACQ,QAAA,EAAA,GAAiB,KAAK,WAAL,EAAjB;AAAA,QAAE,KAAK,GAAA,EAAA,CAAA,KAAP;AAAA,QAAS,GAAG,GAAA,EAAA,CAAA,GAAZ;;AACN,WAAO,CACL,CAAC,GAAD,EAAM,KAAK,CAAC,CAAZ,EAAe,KAAK,CAAC,CAArB,CADK,EAEL,CAAC,GAAD,EAAM,GAAG,CAAC,CAAV,EAAa,GAAG,CAAC,CAAjB,CAFK,CAAP;AAID,GANS;;AAOZ,SAAA,aAAA;AAAC,CAlCD,CAA4B,aAA5B,CAAA;;AAoCA,eAAe,aAAf","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { getTextPoint } from '../util/util';\nimport CrosshairBase from './base';\nvar LineCrosshair = /** @class */ (function (_super) {\n    __extends(LineCrosshair, _super);\n    function LineCrosshair() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    LineCrosshair.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        return __assign(__assign({}, cfg), { type: 'line', locationType: 'region', start: null, end: null });\n    };\n    // 直线的文本需要同直线垂直\n    LineCrosshair.prototype.getRotateAngle = function () {\n        var _a = this.getLocation(), start = _a.start, end = _a.end;\n        var position = this.get('text').position;\n        var angle = Math.atan2(end.y - start.y, end.x - start.x);\n        var tangentAngle = position === 'start' ? angle - Math.PI / 2 : angle + Math.PI / 2;\n        return tangentAngle;\n    };\n    LineCrosshair.prototype.getTextPoint = function () {\n        var _a = this.getLocation(), start = _a.start, end = _a.end;\n        var _b = this.get('text'), position = _b.position, offset = _b.offset;\n        return getTextPoint(start, end, position, offset);\n    };\n    LineCrosshair.prototype.getLinePath = function () {\n        var _a = this.getLocation(), start = _a.start, end = _a.end;\n        return [\n            ['M', start.x, start.y],\n            ['L', end.x, end.y],\n        ];\n    };\n    return LineCrosshair;\n}(CrosshairBase));\nexport default LineCrosshair;\n//# sourceMappingURL=line.js.map"]},"metadata":{},"sourceType":"module"}