{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { max, min } from '@antv/util';\nimport Element from './element';\nimport { isFunction, isObject, each, removeFromArray, upperFirst, isAllowCapture } from '../util/util';\nvar SHAPE_MAP = {};\nvar INDEX = '_INDEX';\n/**\n * 设置 canvas\n * @param {IElement} element 元素\n * @param {ICanvas}  canvas  画布\n */\n\nfunction setCanvas(element, canvas) {\n  element.set('canvas', canvas);\n\n  if (element.isGroup()) {\n    var children = element.get('children');\n\n    if (children.length) {\n      children.forEach(function (child) {\n        setCanvas(child, canvas);\n      });\n    }\n  }\n}\n/**\n * 设置 timeline\n * @param {IElement} element  元素\n * @param {Timeline} timeline 时间轴\n */\n\n\nfunction setTimeline(element, timeline) {\n  element.set('timeline', timeline);\n\n  if (element.isGroup()) {\n    var children = element.get('children');\n\n    if (children.length) {\n      children.forEach(function (child) {\n        setTimeline(child, timeline);\n      });\n    }\n  }\n}\n\nfunction contains(container, element) {\n  var children = container.getChildren();\n  return children.indexOf(element) >= 0;\n}\n\nfunction removeChild(container, element, destroy) {\n  if (destroy === void 0) {\n    destroy = true;\n  } // 不再调用 element.remove() 方法，会出现循环调用\n\n\n  if (destroy) {\n    element.destroy();\n  } else {\n    element.set('parent', null);\n    element.set('canvas', null);\n  }\n\n  removeFromArray(container.getChildren(), element);\n}\n\nfunction getComparer(compare) {\n  return function (left, right) {\n    var result = compare(left, right);\n    return result === 0 ? left[INDEX] - right[INDEX] : result;\n  };\n}\n\nvar Container =\n/** @class */\nfunction (_super) {\n  __extends(Container, _super);\n\n  function Container() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Container.prototype.isCanvas = function () {\n    return false;\n  }; // 根据子节点确定 BBox\n\n\n  Container.prototype.getBBox = function () {\n    // 所有的值可能在画布的可视区外\n    var minX = Infinity;\n    var maxX = -Infinity;\n    var minY = Infinity;\n    var maxY = -Infinity;\n    var xArr = [];\n    var yArr = []; // 将可见元素、图形以及不为空的图形分组筛选出来，用于包围盒合并\n\n    var children = this.getChildren().filter(function (child) {\n      return child.get('visible') && (!child.isGroup() || child.isGroup() && child.getChildren().length > 0);\n    });\n\n    if (children.length > 0) {\n      each(children, function (child) {\n        var box = child.getBBox();\n        xArr.push(box.minX, box.maxX);\n        yArr.push(box.minY, box.maxY);\n      });\n      minX = min(xArr);\n      maxX = max(xArr);\n      minY = min(yArr);\n      maxY = max(yArr);\n    } else {\n      minX = 0;\n      maxX = 0;\n      minY = 0;\n      maxY = 0;\n    }\n\n    var box = {\n      x: minX,\n      y: minY,\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n    return box;\n  }; // 获取画布的包围盒\n\n\n  Container.prototype.getCanvasBBox = function () {\n    var minX = Infinity;\n    var maxX = -Infinity;\n    var minY = Infinity;\n    var maxY = -Infinity;\n    var xArr = [];\n    var yArr = []; // 将可见元素、图形以及不为空的图形分组筛选出来，用于包围盒合并\n\n    var children = this.getChildren().filter(function (child) {\n      return child.get('visible') && (!child.isGroup() || child.isGroup() && child.getChildren().length > 0);\n    });\n\n    if (children.length > 0) {\n      each(children, function (child) {\n        var box = child.getCanvasBBox();\n        xArr.push(box.minX, box.maxX);\n        yArr.push(box.minY, box.maxY);\n      });\n      minX = min(xArr);\n      maxX = max(xArr);\n      minY = min(yArr);\n      maxY = max(yArr);\n    } else {\n      minX = 0;\n      maxX = 0;\n      minY = 0;\n      maxY = 0;\n    }\n\n    var box = {\n      x: minX,\n      y: minY,\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n    return box;\n  };\n\n  Container.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n\n    cfg['children'] = [];\n    return cfg;\n  };\n\n  Container.prototype.onAttrChange = function (name, value, originValue) {\n    _super.prototype.onAttrChange.call(this, name, value, originValue);\n\n    if (name === 'matrix') {\n      var totalMatrix = this.getTotalMatrix();\n\n      this._applyChildrenMarix(totalMatrix);\n    }\n  }; // 不但应用到自己身上还要应用于子元素\n\n\n  Container.prototype.applyMatrix = function (matrix) {\n    var preTotalMatrix = this.getTotalMatrix();\n\n    _super.prototype.applyMatrix.call(this, matrix);\n\n    var totalMatrix = this.getTotalMatrix(); // totalMatrix 没有发生变化时，这里仅考虑两者都为 null 时\n    // 不继续向下传递矩阵\n\n    if (totalMatrix === preTotalMatrix) {\n      return;\n    }\n\n    this._applyChildrenMarix(totalMatrix);\n  }; // 在子元素上设置矩阵\n\n\n  Container.prototype._applyChildrenMarix = function (totalMatrix) {\n    var children = this.getChildren();\n    each(children, function (child) {\n      child.applyMatrix(totalMatrix);\n    });\n  }; // 兼容老版本的接口\n\n\n  Container.prototype.addShape = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var type = args[0];\n    var cfg = args[1];\n\n    if (isObject(type)) {\n      cfg = type;\n    } else {\n      cfg['type'] = type;\n    }\n\n    var shapeType = SHAPE_MAP[cfg.type];\n\n    if (!shapeType) {\n      shapeType = upperFirst(cfg.type);\n      SHAPE_MAP[cfg.type] = shapeType;\n    }\n\n    var ShapeBase = this.getShapeBase();\n    var shape = new ShapeBase[shapeType](cfg);\n    this.add(shape);\n    return shape;\n  };\n\n  Container.prototype.addGroup = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var groupClass = args[0],\n        cfg = args[1];\n    var group;\n\n    if (isFunction(groupClass)) {\n      if (cfg) {\n        group = new groupClass(cfg);\n      } else {\n        group = new groupClass({\n          // canvas,\n          parent: this\n        });\n      }\n    } else {\n      var tmpCfg = groupClass || {};\n      var TmpGroupClass = this.getGroupBase();\n      group = new TmpGroupClass(tmpCfg);\n    }\n\n    this.add(group);\n    return group;\n  };\n\n  Container.prototype.getCanvas = function () {\n    var canvas;\n\n    if (this.isCanvas()) {\n      canvas = this;\n    } else {\n      canvas = this.get('canvas');\n    }\n\n    return canvas;\n  };\n\n  Container.prototype.getShape = function (x, y, ev) {\n    // 如果不支持拾取，则直接返回\n    if (!isAllowCapture(this)) {\n      return null;\n    }\n\n    var children = this.getChildren();\n    var shape; // 如果容器是 group\n\n    if (!this.isCanvas()) {\n      var v = [x, y, 1]; // 将 x, y 转换成对应于 group 的局部坐标\n\n      v = this.invertFromMatrix(v);\n\n      if (!this.isClipped(v[0], v[1])) {\n        shape = this._findShape(children, v[0], v[1], ev);\n      }\n    } else {\n      shape = this._findShape(children, x, y, ev);\n    }\n\n    return shape;\n  };\n\n  Container.prototype._findShape = function (children, x, y, ev) {\n    var shape = null;\n\n    for (var i = children.length - 1; i >= 0; i--) {\n      var child = children[i];\n\n      if (isAllowCapture(child)) {\n        if (child.isGroup()) {\n          shape = child.getShape(x, y, ev);\n        } else if (child.isHit(x, y)) {\n          shape = child;\n        }\n      }\n\n      if (shape) {\n        break;\n      }\n    }\n\n    return shape;\n  };\n\n  Container.prototype.add = function (element) {\n    var canvas = this.getCanvas();\n    var children = this.getChildren();\n    var timeline = this.get('timeline');\n    var preParent = element.getParent();\n\n    if (preParent) {\n      removeChild(preParent, element, false);\n    }\n\n    element.set('parent', this);\n\n    if (canvas) {\n      setCanvas(element, canvas);\n    }\n\n    if (timeline) {\n      setTimeline(element, timeline);\n    }\n\n    children.push(element);\n    element.onCanvasChange('add');\n\n    this._applyElementMatrix(element);\n  }; // 将当前容器的矩阵应用到子元素\n\n\n  Container.prototype._applyElementMatrix = function (element) {\n    var totalMatrix = this.getTotalMatrix(); // 添加图形或者分组时，需要把当前图元的矩阵设置进去\n\n    if (totalMatrix) {\n      element.applyMatrix(totalMatrix);\n    }\n  };\n\n  Container.prototype.getChildren = function () {\n    return this.get('children');\n  };\n\n  Container.prototype.sort = function () {\n    var children = this.getChildren(); // 稳定排序\n\n    each(children, function (child, index) {\n      child[INDEX] = index;\n      return child;\n    });\n    children.sort(getComparer(function (obj1, obj2) {\n      return obj1.get('zIndex') - obj2.get('zIndex');\n    }));\n    this.onCanvasChange('sort');\n  };\n\n  Container.prototype.clear = function () {\n    this.set('clearing', true);\n\n    if (this.destroyed) {\n      return;\n    }\n\n    var children = this.getChildren();\n\n    for (var i = children.length - 1; i >= 0; i--) {\n      children[i].destroy(); // 销毁子元素\n    }\n\n    this.set('children', []);\n    this.onCanvasChange('clear');\n    this.set('clearing', false);\n  };\n\n  Container.prototype.destroy = function () {\n    if (this.get('destroyed')) {\n      return;\n    }\n\n    this.clear();\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * 获取第一个子元素\n   * @return {IElement} 第一个元素\n   */\n\n\n  Container.prototype.getFirst = function () {\n    return this.getChildByIndex(0);\n  };\n  /**\n   * 获取最后一个子元素\n   * @return {IElement} 元素\n   */\n\n\n  Container.prototype.getLast = function () {\n    var children = this.getChildren();\n    return this.getChildByIndex(children.length - 1);\n  };\n  /**\n   * 根据索引获取子元素\n   * @return {IElement} 第一个元素\n   */\n\n\n  Container.prototype.getChildByIndex = function (index) {\n    var children = this.getChildren();\n    return children[index];\n  };\n  /**\n   * 子元素的数量\n   * @return {number} 子元素数量\n   */\n\n\n  Container.prototype.getCount = function () {\n    var children = this.getChildren();\n    return children.length;\n  };\n  /**\n   * 是否包含对应元素\n   * @param {IElement} element 元素\n   * @return {boolean}\n   */\n\n\n  Container.prototype.contain = function (element) {\n    var children = this.getChildren();\n    return children.indexOf(element) > -1;\n  };\n  /**\n   * 移除对应子元素\n   * @param {IElement} element 子元素\n   * @param {boolean} destroy 是否销毁子元素，默认为 true\n   */\n\n\n  Container.prototype.removeChild = function (element, destroy) {\n    if (destroy === void 0) {\n      destroy = true;\n    }\n\n    if (this.contain(element)) {\n      element.remove(destroy);\n    }\n  };\n  /**\n   * 查找所有匹配的元素\n   * @param  {ElementFilterFn}   fn  匹配函数\n   * @return {IElement[]} 元素数组\n   */\n\n\n  Container.prototype.findAll = function (fn) {\n    var rst = [];\n    var children = this.getChildren();\n    each(children, function (element) {\n      if (fn(element)) {\n        rst.push(element);\n      }\n\n      if (element.isGroup()) {\n        rst = rst.concat(element.findAll(fn));\n      }\n    });\n    return rst;\n  };\n  /**\n   * 查找元素，找到第一个返回\n   * @param  {ElementFilterFn} fn    匹配函数\n   * @return {IElement|null} 元素，可以为空\n   */\n\n\n  Container.prototype.find = function (fn) {\n    var rst = null;\n    var children = this.getChildren();\n    each(children, function (element) {\n      if (fn(element)) {\n        rst = element;\n      } else if (element.isGroup()) {\n        rst = element.find(fn);\n      }\n\n      if (rst) {\n        return false;\n      }\n    });\n    return rst;\n  };\n  /**\n   * 根据 ID 查找元素\n   * @param {string} id 元素 id\n   * @return {IElement|null} 元素\n   */\n\n\n  Container.prototype.findById = function (id) {\n    return this.find(function (element) {\n      return element.get('id') === id;\n    });\n  };\n  /**\n   * 该方法即将废弃，不建议使用\n   * 根据 className 查找元素\n   * TODO: 该方式定义暂时只给 G6 3.3 以后的版本使用，待 G6 中的 findByClassName 方法移除后，G 也需要同步移除\n   * @param {string} className 元素 className\n   * @return {IElement | null} 元素\n   */\n\n\n  Container.prototype.findByClassName = function (className) {\n    return this.find(function (element) {\n      return element.get('className') === className;\n    });\n  };\n  /**\n   * 根据 name 查找元素列表\n   * @param {string}      name 元素名称\n   * @return {IElement[]} 元素\n   */\n\n\n  Container.prototype.findAllByName = function (name) {\n    return this.findAll(function (element) {\n      return element.get('name') === name;\n    });\n  };\n\n  return Container;\n}(Element);\n\nexport default Container;","map":{"version":3,"sources":["../../src/abstract/container.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { max, min } from '@antv/util';\nimport Element from './element';\nimport { isFunction, isObject, each, removeFromArray, upperFirst, isAllowCapture } from '../util/util';\nvar SHAPE_MAP = {};\nvar INDEX = '_INDEX';\n/**\n * 设置 canvas\n * @param {IElement} element 元素\n * @param {ICanvas}  canvas  画布\n */\nfunction setCanvas(element, canvas) {\n    element.set('canvas', canvas);\n    if (element.isGroup()) {\n        var children = element.get('children');\n        if (children.length) {\n            children.forEach(function (child) {\n                setCanvas(child, canvas);\n            });\n        }\n    }\n}\n/**\n * 设置 timeline\n * @param {IElement} element  元素\n * @param {Timeline} timeline 时间轴\n */\nfunction setTimeline(element, timeline) {\n    element.set('timeline', timeline);\n    if (element.isGroup()) {\n        var children = element.get('children');\n        if (children.length) {\n            children.forEach(function (child) {\n                setTimeline(child, timeline);\n            });\n        }\n    }\n}\nfunction contains(container, element) {\n    var children = container.getChildren();\n    return children.indexOf(element) >= 0;\n}\nfunction removeChild(container, element, destroy) {\n    if (destroy === void 0) { destroy = true; }\n    // 不再调用 element.remove() 方法，会出现循环调用\n    if (destroy) {\n        element.destroy();\n    }\n    else {\n        element.set('parent', null);\n        element.set('canvas', null);\n    }\n    removeFromArray(container.getChildren(), element);\n}\nfunction getComparer(compare) {\n    return function (left, right) {\n        var result = compare(left, right);\n        return result === 0 ? left[INDEX] - right[INDEX] : result;\n    };\n}\nvar Container = /** @class */ (function (_super) {\n    __extends(Container, _super);\n    function Container() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Container.prototype.isCanvas = function () {\n        return false;\n    };\n    // 根据子节点确定 BBox\n    Container.prototype.getBBox = function () {\n        // 所有的值可能在画布的可视区外\n        var minX = Infinity;\n        var maxX = -Infinity;\n        var minY = Infinity;\n        var maxY = -Infinity;\n        var xArr = [];\n        var yArr = [];\n        // 将可见元素、图形以及不为空的图形分组筛选出来，用于包围盒合并\n        var children = this.getChildren().filter(function (child) {\n            return child.get('visible') && (!child.isGroup() || (child.isGroup() && child.getChildren().length > 0));\n        });\n        if (children.length > 0) {\n            each(children, function (child) {\n                var box = child.getBBox();\n                xArr.push(box.minX, box.maxX);\n                yArr.push(box.minY, box.maxY);\n            });\n            minX = min(xArr);\n            maxX = max(xArr);\n            minY = min(yArr);\n            maxY = max(yArr);\n        }\n        else {\n            minX = 0;\n            maxX = 0;\n            minY = 0;\n            maxY = 0;\n        }\n        var box = {\n            x: minX,\n            y: minY,\n            minX: minX,\n            minY: minY,\n            maxX: maxX,\n            maxY: maxY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n        return box;\n    };\n    // 获取画布的包围盒\n    Container.prototype.getCanvasBBox = function () {\n        var minX = Infinity;\n        var maxX = -Infinity;\n        var minY = Infinity;\n        var maxY = -Infinity;\n        var xArr = [];\n        var yArr = [];\n        // 将可见元素、图形以及不为空的图形分组筛选出来，用于包围盒合并\n        var children = this.getChildren().filter(function (child) {\n            return child.get('visible') && (!child.isGroup() || (child.isGroup() && child.getChildren().length > 0));\n        });\n        if (children.length > 0) {\n            each(children, function (child) {\n                var box = child.getCanvasBBox();\n                xArr.push(box.minX, box.maxX);\n                yArr.push(box.minY, box.maxY);\n            });\n            minX = min(xArr);\n            maxX = max(xArr);\n            minY = min(yArr);\n            maxY = max(yArr);\n        }\n        else {\n            minX = 0;\n            maxX = 0;\n            minY = 0;\n            maxY = 0;\n        }\n        var box = {\n            x: minX,\n            y: minY,\n            minX: minX,\n            minY: minY,\n            maxX: maxX,\n            maxY: maxY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n        return box;\n    };\n    Container.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        cfg['children'] = [];\n        return cfg;\n    };\n    Container.prototype.onAttrChange = function (name, value, originValue) {\n        _super.prototype.onAttrChange.call(this, name, value, originValue);\n        if (name === 'matrix') {\n            var totalMatrix = this.getTotalMatrix();\n            this._applyChildrenMarix(totalMatrix);\n        }\n    };\n    // 不但应用到自己身上还要应用于子元素\n    Container.prototype.applyMatrix = function (matrix) {\n        var preTotalMatrix = this.getTotalMatrix();\n        _super.prototype.applyMatrix.call(this, matrix);\n        var totalMatrix = this.getTotalMatrix();\n        // totalMatrix 没有发生变化时，这里仅考虑两者都为 null 时\n        // 不继续向下传递矩阵\n        if (totalMatrix === preTotalMatrix) {\n            return;\n        }\n        this._applyChildrenMarix(totalMatrix);\n    };\n    // 在子元素上设置矩阵\n    Container.prototype._applyChildrenMarix = function (totalMatrix) {\n        var children = this.getChildren();\n        each(children, function (child) {\n            child.applyMatrix(totalMatrix);\n        });\n    };\n    // 兼容老版本的接口\n    Container.prototype.addShape = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var type = args[0];\n        var cfg = args[1];\n        if (isObject(type)) {\n            cfg = type;\n        }\n        else {\n            cfg['type'] = type;\n        }\n        var shapeType = SHAPE_MAP[cfg.type];\n        if (!shapeType) {\n            shapeType = upperFirst(cfg.type);\n            SHAPE_MAP[cfg.type] = shapeType;\n        }\n        var ShapeBase = this.getShapeBase();\n        var shape = new ShapeBase[shapeType](cfg);\n        this.add(shape);\n        return shape;\n    };\n    Container.prototype.addGroup = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var groupClass = args[0], cfg = args[1];\n        var group;\n        if (isFunction(groupClass)) {\n            if (cfg) {\n                group = new groupClass(cfg);\n            }\n            else {\n                group = new groupClass({\n                    // canvas,\n                    parent: this,\n                });\n            }\n        }\n        else {\n            var tmpCfg = groupClass || {};\n            var TmpGroupClass = this.getGroupBase();\n            group = new TmpGroupClass(tmpCfg);\n        }\n        this.add(group);\n        return group;\n    };\n    Container.prototype.getCanvas = function () {\n        var canvas;\n        if (this.isCanvas()) {\n            canvas = this;\n        }\n        else {\n            canvas = this.get('canvas');\n        }\n        return canvas;\n    };\n    Container.prototype.getShape = function (x, y, ev) {\n        // 如果不支持拾取，则直接返回\n        if (!isAllowCapture(this)) {\n            return null;\n        }\n        var children = this.getChildren();\n        var shape;\n        // 如果容器是 group\n        if (!this.isCanvas()) {\n            var v = [x, y, 1];\n            // 将 x, y 转换成对应于 group 的局部坐标\n            v = this.invertFromMatrix(v);\n            if (!this.isClipped(v[0], v[1])) {\n                shape = this._findShape(children, v[0], v[1], ev);\n            }\n        }\n        else {\n            shape = this._findShape(children, x, y, ev);\n        }\n        return shape;\n    };\n    Container.prototype._findShape = function (children, x, y, ev) {\n        var shape = null;\n        for (var i = children.length - 1; i >= 0; i--) {\n            var child = children[i];\n            if (isAllowCapture(child)) {\n                if (child.isGroup()) {\n                    shape = child.getShape(x, y, ev);\n                }\n                else if (child.isHit(x, y)) {\n                    shape = child;\n                }\n            }\n            if (shape) {\n                break;\n            }\n        }\n        return shape;\n    };\n    Container.prototype.add = function (element) {\n        var canvas = this.getCanvas();\n        var children = this.getChildren();\n        var timeline = this.get('timeline');\n        var preParent = element.getParent();\n        if (preParent) {\n            removeChild(preParent, element, false);\n        }\n        element.set('parent', this);\n        if (canvas) {\n            setCanvas(element, canvas);\n        }\n        if (timeline) {\n            setTimeline(element, timeline);\n        }\n        children.push(element);\n        element.onCanvasChange('add');\n        this._applyElementMatrix(element);\n    };\n    // 将当前容器的矩阵应用到子元素\n    Container.prototype._applyElementMatrix = function (element) {\n        var totalMatrix = this.getTotalMatrix();\n        // 添加图形或者分组时，需要把当前图元的矩阵设置进去\n        if (totalMatrix) {\n            element.applyMatrix(totalMatrix);\n        }\n    };\n    Container.prototype.getChildren = function () {\n        return this.get('children');\n    };\n    Container.prototype.sort = function () {\n        var children = this.getChildren();\n        // 稳定排序\n        each(children, function (child, index) {\n            child[INDEX] = index;\n            return child;\n        });\n        children.sort(getComparer(function (obj1, obj2) {\n            return obj1.get('zIndex') - obj2.get('zIndex');\n        }));\n        this.onCanvasChange('sort');\n    };\n    Container.prototype.clear = function () {\n        this.set('clearing', true);\n        if (this.destroyed) {\n            return;\n        }\n        var children = this.getChildren();\n        for (var i = children.length - 1; i >= 0; i--) {\n            children[i].destroy(); // 销毁子元素\n        }\n        this.set('children', []);\n        this.onCanvasChange('clear');\n        this.set('clearing', false);\n    };\n    Container.prototype.destroy = function () {\n        if (this.get('destroyed')) {\n            return;\n        }\n        this.clear();\n        _super.prototype.destroy.call(this);\n    };\n    /**\n     * 获取第一个子元素\n     * @return {IElement} 第一个元素\n     */\n    Container.prototype.getFirst = function () {\n        return this.getChildByIndex(0);\n    };\n    /**\n     * 获取最后一个子元素\n     * @return {IElement} 元素\n     */\n    Container.prototype.getLast = function () {\n        var children = this.getChildren();\n        return this.getChildByIndex(children.length - 1);\n    };\n    /**\n     * 根据索引获取子元素\n     * @return {IElement} 第一个元素\n     */\n    Container.prototype.getChildByIndex = function (index) {\n        var children = this.getChildren();\n        return children[index];\n    };\n    /**\n     * 子元素的数量\n     * @return {number} 子元素数量\n     */\n    Container.prototype.getCount = function () {\n        var children = this.getChildren();\n        return children.length;\n    };\n    /**\n     * 是否包含对应元素\n     * @param {IElement} element 元素\n     * @return {boolean}\n     */\n    Container.prototype.contain = function (element) {\n        var children = this.getChildren();\n        return children.indexOf(element) > -1;\n    };\n    /**\n     * 移除对应子元素\n     * @param {IElement} element 子元素\n     * @param {boolean} destroy 是否销毁子元素，默认为 true\n     */\n    Container.prototype.removeChild = function (element, destroy) {\n        if (destroy === void 0) { destroy = true; }\n        if (this.contain(element)) {\n            element.remove(destroy);\n        }\n    };\n    /**\n     * 查找所有匹配的元素\n     * @param  {ElementFilterFn}   fn  匹配函数\n     * @return {IElement[]} 元素数组\n     */\n    Container.prototype.findAll = function (fn) {\n        var rst = [];\n        var children = this.getChildren();\n        each(children, function (element) {\n            if (fn(element)) {\n                rst.push(element);\n            }\n            if (element.isGroup()) {\n                rst = rst.concat(element.findAll(fn));\n            }\n        });\n        return rst;\n    };\n    /**\n     * 查找元素，找到第一个返回\n     * @param  {ElementFilterFn} fn    匹配函数\n     * @return {IElement|null} 元素，可以为空\n     */\n    Container.prototype.find = function (fn) {\n        var rst = null;\n        var children = this.getChildren();\n        each(children, function (element) {\n            if (fn(element)) {\n                rst = element;\n            }\n            else if (element.isGroup()) {\n                rst = element.find(fn);\n            }\n            if (rst) {\n                return false;\n            }\n        });\n        return rst;\n    };\n    /**\n     * 根据 ID 查找元素\n     * @param {string} id 元素 id\n     * @return {IElement|null} 元素\n     */\n    Container.prototype.findById = function (id) {\n        return this.find(function (element) {\n            return element.get('id') === id;\n        });\n    };\n    /**\n     * 该方法即将废弃，不建议使用\n     * 根据 className 查找元素\n     * TODO: 该方式定义暂时只给 G6 3.3 以后的版本使用，待 G6 中的 findByClassName 方法移除后，G 也需要同步移除\n     * @param {string} className 元素 className\n     * @return {IElement | null} 元素\n     */\n    Container.prototype.findByClassName = function (className) {\n        return this.find(function (element) {\n            return element.get('className') === className;\n        });\n    };\n    /**\n     * 根据 name 查找元素列表\n     * @param {string}      name 元素名称\n     * @return {IElement[]} 元素\n     */\n    Container.prototype.findAllByName = function (name) {\n        return this.findAll(function (element) {\n            return element.get('name') === name;\n        });\n    };\n    return Container;\n}(Element));\nexport default Container;\n//# sourceMappingURL=container.js.map"]},"metadata":{},"sourceType":"module"}