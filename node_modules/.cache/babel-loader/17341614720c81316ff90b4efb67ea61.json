{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport Action from '../base';\nimport { getDelegationObject, getElements, getElementValue, getScaleByField, isList, isSlider, isMask, getMaskedElements } from '../util';\n/**\n * 元素过滤的 Action，控制元素的显示隐藏\n * @ignore\n */\n\nvar ElementFilter =\n/** @class */\nfunction (_super) {\n  __extends(ElementFilter, _super);\n\n  function ElementFilter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * 过滤\n   */\n\n\n  ElementFilter.prototype.filter = function () {\n    var delegateObject = getDelegationObject(this.context);\n    var view = this.context.view;\n    var elements = getElements(view);\n\n    if (isMask(this.context)) {\n      var maskElements_1 = getMaskedElements(this.context, 10);\n\n      if (maskElements_1) {\n        each(elements, function (el) {\n          if (maskElements_1.includes(el)) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    } else if (delegateObject) {\n      var component = delegateObject.component;\n      var field_1 = component.get('field'); // 列表类的组件能够触发\n\n      if (isList(delegateObject)) {\n        if (field_1) {\n          var unCheckedItems = component.getItemsByState('unchecked');\n          var scale_1 = getScaleByField(view, field_1);\n          var names_1 = unCheckedItems.map(function (item) {\n            return item.name;\n          }); // 直接控制显示、隐藏\n\n          each(elements, function (el) {\n            var value = getElementValue(el, field_1);\n            var text = scale_1.getText(value);\n\n            if (names_1.indexOf(text) >= 0) {\n              el.hide();\n            } else {\n              el.show();\n            }\n          });\n        }\n      } else if (isSlider(delegateObject)) {\n        var range = component.getValue();\n        var min_1 = range[0],\n            max_1 = range[1];\n        each(elements, function (el) {\n          var value = getElementValue(el, field_1);\n\n          if (value >= min_1 && value <= max_1) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    }\n  };\n  /**\n   * 清除过滤\n   */\n\n\n  ElementFilter.prototype.clear = function () {\n    var elements = getElements(this.context.view);\n    each(elements, function (el) {\n      el.show();\n    });\n  };\n  /**\n   * 恢复发生的过滤，保持同 data-filter 命名的一致\n   */\n\n\n  ElementFilter.prototype.reset = function () {\n    this.clear();\n  };\n\n  return ElementFilter;\n}(Action);\n\nexport default ElementFilter;","map":{"version":3,"sources":["../../../../src/interaction/action/element/filter.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport Action from '../base';\nimport {\n  getDelegationObject,\n  getElements,\n  getElementValue,\n  getScaleByField,\n  isList,\n  isSlider,\n  isMask,\n  getMaskedElements,\n} from '../util';\n/**\n * 元素过滤的 Action，控制元素的显示隐藏\n * @ignore\n */\nclass ElementFilter extends Action {\n  /**\n   * 过滤\n   */\n  public filter() {\n    const delegateObject = getDelegationObject(this.context);\n    const view = this.context.view;\n    const elements = getElements(view);\n    if (isMask(this.context)) {\n      const maskElements = getMaskedElements(this.context, 10);\n      if (maskElements) {\n        each(elements, (el) => {\n          if (maskElements.includes(el)) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    } else if (delegateObject) {\n      const { component } = delegateObject;\n      const field = component.get('field');\n      // 列表类的组件能够触发\n      if (isList(delegateObject)) {\n        if (field) {\n          const unCheckedItems = component.getItemsByState('unchecked');\n          const scale = getScaleByField(view, field);\n          const names = unCheckedItems.map((item) => item.name);\n          // 直接控制显示、隐藏\n          each(elements, (el) => {\n            const value = getElementValue(el, field);\n            const text = scale.getText(value);\n            if (names.indexOf(text) >= 0) {\n              el.hide();\n            } else {\n              el.show();\n            }\n          });\n        }\n      } else if (isSlider(delegateObject)) {\n        const range = component.getValue();\n        const [min, max] = range;\n        each(elements, (el) => {\n          const value = getElementValue(el, field);\n          if (value >= min && value <= max) {\n            el.show();\n          } else {\n            el.hide();\n          }\n        });\n      }\n    }\n  }\n  /**\n   * 清除过滤\n   */\n  public clear() {\n    const elements = getElements(this.context.view);\n    each(elements, (el) => {\n      el.show();\n    });\n  }\n\n  /**\n   * 恢复发生的过滤，保持同 data-filter 命名的一致\n   */\n  public reset() {\n    this.clear();\n  }\n}\n\nexport default ElementFilter;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}