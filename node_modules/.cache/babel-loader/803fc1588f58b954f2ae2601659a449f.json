{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, isNil, some } from '@antv/util';\nimport { getCoordinate } from '../../dependents';\n/**\n * coordinate controller，职责：\n * 1. 创建实例\n * 2. 暂存配置\n */\n\nvar CoordinateController =\n/** @class */\nfunction () {\n  function CoordinateController(option) {\n    // 设置默认值，并存储配置\n    this.option = this.wrapperOption(option);\n  }\n  /**\n   * 更新配置\n   * @param option\n   */\n\n\n  CoordinateController.prototype.update = function (option) {\n    this.option = this.wrapperOption(option);\n    return this;\n  };\n  /**\n   * 是否存在某一个 action\n   * @param actionName\n   */\n\n\n  CoordinateController.prototype.hasAction = function (actionName) {\n    var actions = this.option.actions;\n    return some(actions, function (action) {\n      return action[0] === actionName;\n    });\n  };\n  /**\n   * 创建坐标系对象\n   * @param start 起始位置\n   * @param end   结束位置\n   * @return 坐标系实例\n   */\n\n\n  CoordinateController.prototype.create = function (start, end) {\n    var _a = this.option,\n        type = _a.type,\n        cfg = _a.cfg;\n    var isTheta = type === 'theta'; // 1. 起始位置\n\n    var props = __assign({\n      start: start,\n      end: end\n    }, cfg); // 2. 创建实例\n\n\n    var C = getCoordinate(isTheta ? 'polar' : type);\n    this.coordinate = new C(props); // @ts-ignore FIXME coordinate 包问题导致 type 不正确\n\n    this.coordinate.type = type; // 3. 添加默认 action\n\n    if (isTheta) {\n      // 不存在 transpose，为其自动设置一个 action\n      if (!this.hasAction('transpose')) {\n        this.transpose();\n      }\n    } // 4. 执行 action\n\n\n    this.execActions();\n    return this.coordinate;\n  };\n  /**\n   * 更新坐标系对象\n   * @param start 起始位置\n   * @param end   结束位置\n   * @return 坐标系实例\n   */\n\n\n  CoordinateController.prototype.adjust = function (start, end) {\n    this.coordinate.update({\n      start: start,\n      end: end\n    }); // 更新坐标系大小的时候，需要：\n    // 1. 重置 matrix\n    // 2. 重新执行作用于 matrix 的 action\n\n    this.coordinate.resetMatrix();\n    this.execActions(['scale', 'rotate', 'translate']);\n    return this.coordinate;\n  };\n  /**\n   * 旋转弧度\n   * @param angle\n   */\n\n\n  CoordinateController.prototype.rotate = function (angle) {\n    this.option.actions.push(['rotate', angle]);\n    return this;\n  };\n  /**\n   * 镜像\n   * @param dim\n   */\n\n\n  CoordinateController.prototype.reflect = function (dim) {\n    this.option.actions.push(['reflect', dim]);\n    return this;\n  };\n  /**\n   * scale\n   * @param sx\n   * @param sy\n   */\n\n\n  CoordinateController.prototype.scale = function (sx, sy) {\n    this.option.actions.push(['scale', sx, sy]);\n    return this;\n  };\n  /**\n   * 对角变换\n   */\n\n\n  CoordinateController.prototype.transpose = function () {\n    this.option.actions.push(['transpose']);\n    return this;\n  };\n  /**\n   * 获取配置\n   */\n\n\n  CoordinateController.prototype.getOption = function () {\n    return this.option;\n  };\n  /**\n   * 获得 coordinate 实例\n   */\n\n\n  CoordinateController.prototype.getCoordinate = function () {\n    return this.coordinate;\n  };\n  /**\n   * 包装配置的默认值\n   * @param option\n   */\n\n\n  CoordinateController.prototype.wrapperOption = function (option) {\n    return __assign({\n      type: 'rect',\n      actions: [],\n      cfg: {}\n    }, option);\n  };\n  /**\n   * coordinate 实例执行 actions\n   * @params includeActions 如果没有指定，则执行全部，否则，执行指定的 action\n   */\n\n\n  CoordinateController.prototype.execActions = function (includeActions) {\n    var _this = this;\n\n    var actions = this.option.actions;\n    each(actions, function (action) {\n      var _a;\n\n      var actionName = action[0],\n          args = action.slice(1);\n      var shouldExec = isNil(includeActions) ? true : includeActions.includes(actionName);\n\n      if (shouldExec) {\n        (_a = _this.coordinate)[actionName].apply(_a, args);\n      }\n    });\n  };\n\n  return CoordinateController;\n}();\n\nexport default CoordinateController;","map":{"version":3,"sources":["../../../src/chart/controller/coordinate.ts"],"names":[],"mappings":";AAAA,SAAS,IAAT,EAAe,KAAf,EAAsB,IAAtB,QAAkC,YAAlC;AACA,SAAqB,aAArB,QAAiD,kBAAjD;AAGA;;;;AAIG;;AACH,IAAA,oBAAA;AAAA;AAAA,YAAA;AAIE,WAAA,oBAAA,CAAY,MAAZ,EAAqC;AACnC;AACA,SAAK,MAAL,GAAc,KAAK,aAAL,CAAmB,MAAnB,CAAd;AACD;AAED;;;AAGG;;;AACI,EAAA,oBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,MAAd,EAAsC;AACpC,SAAK,MAAL,GAAc,KAAK,aAAL,CAAmB,MAAnB,CAAd;AACA,WAAO,IAAP;AACD,GAHM;AAKP;;;AAGG;;;AACI,EAAA,oBAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,UAAjB,EAAmC;AACzB,QAAA,OAAO,GAAK,KAAK,MAAL,CAAL,OAAP;AAER,WAAO,IAAI,CAAC,OAAD,EAAU,UAAC,MAAD,EAAO;AAAK,aAAA,MAAM,CAAC,CAAD,CAAN,KAAA,UAAA;AAAwB,KAA9C,CAAX;AACD,GAJM;AAKP;;;;;AAKG;;;AACI,EAAA,oBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,KAAd,EAA4B,GAA5B,EAAsC;AAC9B,QAAA,EAAA,GAAgB,KAAK,MAArB;AAAA,QAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,QAAQ,GAAG,GAAA,EAAA,CAAA,GAAX;AACN,QAAM,OAAO,GAAG,IAAI,KAAK,OAAzB,CAFoC,CAIpC;;AACA,QAAM,KAAK,GAAA,QAAA,CAAA;AACT,MAAA,KAAK,EAAA,KADI;AAET,MAAA,GAAG,EAAA;AAFM,KAAA,EAGN,GAHM,CAAX,CALoC,CAWpC;;;AACA,QAAM,CAAC,GAAG,aAAa,CAAC,OAAO,GAAG,OAAH,GAAa,IAArB,CAAvB;AAEA,SAAK,UAAL,GAAkB,IAAI,CAAJ,CAAM,KAAN,CAAlB,CAdoC,CAgBpC;;AACA,SAAK,UAAL,CAAgB,IAAhB,GAAuB,IAAvB,CAjBoC,CAmBpC;;AACA,QAAI,OAAJ,EAAa;AACX;AACA,UAAI,CAAC,KAAK,SAAL,CAAe,WAAf,CAAL,EAAkC;AAChC,aAAK,SAAL;AACD;AACF,KAzBmC,CA2BpC;;;AACA,SAAK,WAAL;AAEA,WAAO,KAAK,UAAZ;AACD,GA/BM;AAiCP;;;;;AAKG;;;AACI,EAAA,oBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,KAAd,EAA4B,GAA5B,EAAsC;AACpC,SAAK,UAAL,CAAgB,MAAhB,CAAuB;AACrB,MAAA,KAAK,EAAA,KADgB;AAErB,MAAA,GAAG,EAAA;AAFkB,KAAvB,EADoC,CAMpC;AACA;AACA;;AACA,SAAK,UAAL,CAAgB,WAAhB;AACA,SAAK,WAAL,CAAiB,CAAC,OAAD,EAAU,QAAV,EAAoB,WAApB,CAAjB;AAEA,WAAO,KAAK,UAAZ;AACD,GAbM;AAeP;;;AAGG;;;AACI,EAAA,oBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,KAAd,EAA2B;AACzB,SAAK,MAAL,CAAY,OAAZ,CAAoB,IAApB,CAAyB,CAAC,QAAD,EAAW,KAAX,CAAzB;AACA,WAAO,IAAP;AACD,GAHM;AAKP;;;AAGG;;;AACI,EAAA,oBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,GAAf,EAA6B;AAC3B,SAAK,MAAL,CAAY,OAAZ,CAAoB,IAApB,CAAyB,CAAC,SAAD,EAAY,GAAZ,CAAzB;AACA,WAAO,IAAP;AACD,GAHM;AAKP;;;;AAIG;;;AACI,EAAA,oBAAA,CAAA,SAAA,CAAA,KAAA,GAAP,UAAa,EAAb,EAAyB,EAAzB,EAAmC;AACjC,SAAK,MAAL,CAAY,OAAZ,CAAoB,IAApB,CAAyB,CAAC,OAAD,EAAU,EAAV,EAAc,EAAd,CAAzB;AACA,WAAO,IAAP;AACD,GAHM;AAKP;;AAEG;;;AACI,EAAA,oBAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACE,SAAK,MAAL,CAAY,OAAZ,CAAoB,IAApB,CAAyB,CAAC,WAAD,CAAzB;AACA,WAAO,IAAP;AACD,GAHM;AAKP;;AAEG;;;AACI,EAAA,oBAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACE,WAAO,KAAK,MAAZ;AACD,GAFM;AAIP;;AAEG;;;AACI,EAAA,oBAAA,CAAA,SAAA,CAAA,aAAA,GAAP,YAAA;AACE,WAAO,KAAK,UAAZ;AACD,GAFM;AAIP;;;AAGG;;;AACK,EAAA,oBAAA,CAAA,SAAA,CAAA,aAAA,GAAR,UAAsB,MAAtB,EAA8C;AAC5C,WAAA,QAAA,CAAA;AACE,MAAA,IAAI,EAAE,MADR;AAEE,MAAA,OAAO,EAAE,EAFX;AAGE,MAAA,GAAG,EAAE;AAHP,KAAA,EAIK,MAJL,CAAA;AAMD,GAPO;AASR;;;AAGG;;;AACK,EAAA,oBAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,cAApB,EAA6C;AAA7C,QAAA,KAAA,GAAA,IAAA;;AACU,QAAA,OAAO,GAAK,KAAK,MAAL,CAAL,OAAP;AAER,IAAA,IAAI,CAAC,OAAD,EAAU,UAAC,MAAD,EAAO;;;AACZ,UAAA,UAAU,GAAa,MAAM,CAAnB,CAAmB,CAA7B;AAAA,UAAe,IAAI,GAAI,MAAM,CAAA,KAAN,CAAJ,CAAI,CAAvB;AAEP,UAAM,UAAU,GAAG,KAAK,CAAC,cAAD,CAAL,GAAwB,IAAxB,GAA+B,cAAc,CAAC,QAAf,CAAwB,UAAxB,CAAlD;;AAEA,UAAI,UAAJ,EAAgB;AACd,SAAA,EAAA,GAAA,KAAI,CAAC,UAAL,EAAgB,UAAhB,EAA2B,KAA3B,CAA2B,EAA3B,EAA+B,IAA/B;AACD;AACF,KARG,CAAJ;AASD,GAZO;;AAaV,SAAA,oBAAA;AAAC,CAvKD,EAAA","sourcesContent":["import { each, isNil, some } from '@antv/util';\nimport { Coordinate, getCoordinate, Point } from '../../dependents';\nimport { CoordinateOption } from '../../interface';\n\n/**\n * coordinate controller，职责：\n * 1. 创建实例\n * 2. 暂存配置\n */\nexport default class CoordinateController {\n  private option: CoordinateOption;\n  private coordinate: Coordinate;\n\n  constructor(option?: CoordinateOption) {\n    // 设置默认值，并存储配置\n    this.option = this.wrapperOption(option);\n  }\n\n  /**\n   * 更新配置\n   * @param option\n   */\n  public update(option: CoordinateOption) {\n    this.option = this.wrapperOption(option);\n    return this;\n  }\n\n  /**\n   * 是否存在某一个 action\n   * @param actionName\n   */\n  public hasAction(actionName: string) {\n    const { actions } = this.option;\n\n    return some(actions, (action) => action[0] === actionName);\n  }\n  /**\n   * 创建坐标系对象\n   * @param start 起始位置\n   * @param end   结束位置\n   * @return 坐标系实例\n   */\n  public create(start: Point, end: Point) {\n    const { type, cfg } = this.option;\n    const isTheta = type === 'theta';\n\n    // 1. 起始位置\n    const props = {\n      start,\n      end,\n      ...cfg,\n    };\n\n    // 2. 创建实例\n    const C = getCoordinate(isTheta ? 'polar' : type);\n\n    this.coordinate = new C(props);\n\n    // @ts-ignore FIXME coordinate 包问题导致 type 不正确\n    this.coordinate.type = type;\n\n    // 3. 添加默认 action\n    if (isTheta) {\n      // 不存在 transpose，为其自动设置一个 action\n      if (!this.hasAction('transpose')) {\n        this.transpose();\n      }\n    }\n\n    // 4. 执行 action\n    this.execActions();\n\n    return this.coordinate;\n  }\n\n  /**\n   * 更新坐标系对象\n   * @param start 起始位置\n   * @param end   结束位置\n   * @return 坐标系实例\n   */\n  public adjust(start: Point, end: Point) {\n    this.coordinate.update({\n      start,\n      end,\n    });\n\n    // 更新坐标系大小的时候，需要：\n    // 1. 重置 matrix\n    // 2. 重新执行作用于 matrix 的 action\n    this.coordinate.resetMatrix();\n    this.execActions(['scale', 'rotate', 'translate']);\n\n    return this.coordinate;\n  }\n\n  /**\n   * 旋转弧度\n   * @param angle\n   */\n  public rotate(angle: number) {\n    this.option.actions.push(['rotate', angle]);\n    return this;\n  }\n\n  /**\n   * 镜像\n   * @param dim\n   */\n  public reflect(dim: 'x' | 'y') {\n    this.option.actions.push(['reflect', dim]);\n    return this;\n  }\n\n  /**\n   * scale\n   * @param sx\n   * @param sy\n   */\n  public scale(sx: number, sy: number) {\n    this.option.actions.push(['scale', sx, sy]);\n    return this;\n  }\n\n  /**\n   * 对角变换\n   */\n  public transpose() {\n    this.option.actions.push(['transpose']);\n    return this;\n  }\n\n  /**\n   * 获取配置\n   */\n  public getOption(): CoordinateOption {\n    return this.option;\n  }\n\n  /**\n   * 获得 coordinate 实例\n   */\n  public getCoordinate() {\n    return this.coordinate;\n  }\n\n  /**\n   * 包装配置的默认值\n   * @param option\n   */\n  private wrapperOption(option: CoordinateOption): CoordinateOption {\n    return {\n      type: 'rect',\n      actions: [],\n      cfg: {},\n      ...option,\n    };\n  }\n\n  /**\n   * coordinate 实例执行 actions\n   * @params includeActions 如果没有指定，则执行全部，否则，执行指定的 action\n   */\n  private execActions(includeActions?: string[]) {\n    const { actions } = this.option;\n\n    each(actions, (action) => {\n      const [actionName, ...args] = action;\n\n      const shouldExec = isNil(includeActions) ? true : includeActions.includes(actionName);\n\n      if (shouldExec) {\n        this.coordinate[actionName](...args);\n      }\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}