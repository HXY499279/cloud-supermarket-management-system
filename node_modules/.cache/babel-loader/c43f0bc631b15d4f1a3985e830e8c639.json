{"ast":null,"code":"import { isDate, isString, last } from '@antv/util';\nimport fecha from 'fecha';\nimport * as fecha1 from 'fecha';\nimport bisector from './bisector';\nvar FORMAT_METHOD = 'format';\nexport function timeFormat(time, mask) {\n  var method = fecha1[FORMAT_METHOD] || fecha[FORMAT_METHOD];\n  return method(time, mask);\n}\n/**\n * 转换成时间戳\n * @param value 时间值\n */\n\nexport function toTimeStamp(value) {\n  if (isString(value)) {\n    if (value.indexOf('T') > 0) {\n      value = new Date(value).getTime();\n    } else {\n      // new Date('2010/01/10') 和 new Date('2010-01-10') 的差别在于:\n      // 如果仅有年月日时，前者是带有时区的: Fri Jan 10 2020 02:40:13 GMT+0800 (中国标准时间)\n      // 后者会格式化成 Sun Jan 10 2010 08:00:00 GMT+0800 (中国标准时间)\n      value = new Date(value.replace(/-/gi, '/')).getTime();\n    }\n  }\n\n  if (isDate(value)) {\n    value = value.getTime();\n  }\n\n  return value;\n}\nvar SECOND = 1000;\nvar MINUTE = 60 * SECOND;\nvar HOUR = 60 * MINUTE;\nvar DAY = 24 * HOUR;\nvar MONTH = DAY * 31;\nvar YEAR = DAY * 365;\nexport { SECOND, MINUTE, HOUR, DAY, MONTH, YEAR };\nvar intervals = [['HH:mm:ss', SECOND], ['HH:mm:ss', SECOND * 10], ['HH:mm:ss', SECOND * 30], ['HH:mm', MINUTE], ['HH:mm', MINUTE * 10], ['HH:mm', MINUTE * 30], ['HH', HOUR], ['HH', HOUR * 6], ['HH', HOUR * 12], ['YYYY-MM-DD', DAY], ['YYYY-MM-DD', DAY * 4], ['YYYY-WW', DAY * 7], ['YYYY-MM', MONTH], ['YYYY-MM', MONTH * 4], ['YYYY-MM', MONTH * 6], ['YYYY', DAY * 380]];\nexport function getTickInterval(min, max, tickCount) {\n  var target = (max - min) / tickCount;\n  var idx = bisector(function (o) {\n    return o[1];\n  })(intervals, target) - 1;\n  var interval = intervals[idx];\n\n  if (idx < 0) {\n    interval = intervals[0];\n  } else if (idx >= intervals.length) {\n    interval = last(intervals);\n  }\n\n  return interval;\n}","map":{"version":3,"sources":["../../src/util/time.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isDate, isString, last } from '@antv/util';\nimport fecha from 'fecha';\nimport * as fecha1 from 'fecha';\nimport bisector from './bisector';\nvar FORMAT_METHOD = 'format';\nexport function timeFormat(time, mask) {\n    var method = fecha1[FORMAT_METHOD] || fecha[FORMAT_METHOD];\n    return method(time, mask);\n}\n/**\n * 转换成时间戳\n * @param value 时间值\n */\nexport function toTimeStamp(value) {\n    if (isString(value)) {\n        if (value.indexOf('T') > 0) {\n            value = new Date(value).getTime();\n        }\n        else {\n            // new Date('2010/01/10') 和 new Date('2010-01-10') 的差别在于:\n            // 如果仅有年月日时，前者是带有时区的: Fri Jan 10 2020 02:40:13 GMT+0800 (中国标准时间)\n            // 后者会格式化成 Sun Jan 10 2010 08:00:00 GMT+0800 (中国标准时间)\n            value = new Date(value.replace(/-/gi, '/')).getTime();\n        }\n    }\n    if (isDate(value)) {\n        value = value.getTime();\n    }\n    return value;\n}\nvar SECOND = 1000;\nvar MINUTE = 60 * SECOND;\nvar HOUR = 60 * MINUTE;\nvar DAY = 24 * HOUR;\nvar MONTH = DAY * 31;\nvar YEAR = DAY * 365;\nexport { SECOND, MINUTE, HOUR, DAY, MONTH, YEAR };\nvar intervals = [\n    ['HH:mm:ss', SECOND],\n    ['HH:mm:ss', SECOND * 10],\n    ['HH:mm:ss', SECOND * 30],\n    ['HH:mm', MINUTE],\n    ['HH:mm', MINUTE * 10],\n    ['HH:mm', MINUTE * 30],\n    ['HH', HOUR],\n    ['HH', HOUR * 6],\n    ['HH', HOUR * 12],\n    ['YYYY-MM-DD', DAY],\n    ['YYYY-MM-DD', DAY * 4],\n    ['YYYY-WW', DAY * 7],\n    ['YYYY-MM', MONTH],\n    ['YYYY-MM', MONTH * 4],\n    ['YYYY-MM', MONTH * 6],\n    ['YYYY', DAY * 380],\n];\nexport function getTickInterval(min, max, tickCount) {\n    var target = (max - min) / tickCount;\n    var idx = bisector(function (o) { return o[1]; })(intervals, target) - 1;\n    var interval = intervals[idx];\n    if (idx < 0) {\n        interval = intervals[0];\n    }\n    else if (idx >= intervals.length) {\n        interval = last(intervals);\n    }\n    return interval;\n}\n//# sourceMappingURL=time.js.map"]},"metadata":{},"sourceType":"module"}