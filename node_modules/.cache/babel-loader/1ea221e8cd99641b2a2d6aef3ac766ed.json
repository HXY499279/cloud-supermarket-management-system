{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, get, isArray } from '@antv/util';\nimport { getAngleByPoint } from '../../util/coordinate';\nimport { polarToCartesian } from '../../util/graphics';\nimport PolarLabel from './polar';\n/**\n * 饼图 label\n */\n\nvar PieLabel =\n/** @class */\nfunction (_super) {\n  __extends(PieLabel, _super);\n\n  function PieLabel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.defaultLayout = 'distribute';\n    return _this;\n  }\n\n  PieLabel.prototype.getDefaultLabelCfg = function (offset, position) {\n    var cfg = _super.prototype.getDefaultLabelCfg.call(this, offset, position);\n\n    return deepMix({}, cfg, get(this.geometry.theme, 'pieLabels', {}));\n  };\n  /** @override */\n\n\n  PieLabel.prototype.getLabelOffset = function (offset) {\n    return _super.prototype.getLabelOffset.call(this, offset) || 0;\n  };\n\n  PieLabel.prototype.getLabelRotate = function (angle, offset, isLabelLimit) {\n    var rotate;\n\n    if (offset < 0) {\n      rotate = angle;\n\n      if (rotate > Math.PI / 2) {\n        rotate = rotate - Math.PI;\n      }\n\n      if (rotate < -Math.PI / 2) {\n        rotate = rotate + Math.PI;\n      }\n    }\n\n    return rotate;\n  };\n\n  PieLabel.prototype.getLabelAlign = function (point) {\n    var coordinate = this.getCoordinate();\n    var center = coordinate.getCenter();\n    var align;\n\n    if (point.angle <= Math.PI / 2 && point.x >= center.x) {\n      align = 'left';\n    } else {\n      align = 'right';\n    }\n\n    if (point.offset <= 0) {\n      if (align === 'right') {\n        align = 'left';\n      } else {\n        align = 'right';\n      }\n    }\n\n    return align;\n  };\n\n  PieLabel.prototype.getArcPoint = function (point) {\n    return point;\n  };\n\n  PieLabel.prototype.getPointAngle = function (point) {\n    var coordinate = this.getCoordinate();\n    var startPoint = {\n      x: isArray(point.x) ? point.x[0] : point.x,\n      y: point.y[0]\n    };\n    var endPoint = {\n      x: isArray(point.x) ? point.x[1] : point.x,\n      y: point.y[1]\n    };\n    var angle;\n    var startAngle = getAngleByPoint(coordinate, startPoint);\n\n    if (point.points && point.points[0].y === point.points[1].y) {\n      angle = startAngle;\n    } else {\n      var endAngle = getAngleByPoint(coordinate, endPoint);\n\n      if (startAngle >= endAngle) {\n        // 100% pie slice\n        endAngle = endAngle + Math.PI * 2;\n      }\n\n      angle = startAngle + (endAngle - startAngle) / 2;\n    }\n\n    return angle;\n  };\n  /** @override */\n\n\n  PieLabel.prototype.getCirclePoint = function (angle, offset) {\n    var coordinate = this.getCoordinate();\n    var center = coordinate.getCenter();\n    var r = coordinate.getRadius() + offset;\n    return __assign(__assign({}, polarToCartesian(center.x, center.y, r, angle)), {\n      angle: angle,\n      r: r\n    });\n  };\n\n  return PieLabel;\n}(PolarLabel);\n\nexport default PieLabel;","map":{"version":3,"sources":["../../../src/geometry/label/pie.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, get, isArray } from '@antv/util';\nimport { getAngleByPoint } from '../../util/coordinate';\nimport { polarToCartesian } from '../../util/graphics';\nimport { LabelItem } from './interface';\nimport PolarLabel from './polar';\n\n/**\n * 饼图 label\n */\nexport default class PieLabel extends PolarLabel {\n  public defaultLayout = 'distribute';\n\n  protected getDefaultLabelCfg(offset?: number, position?: string) {\n    const cfg = super.getDefaultLabelCfg(offset, position);\n    return deepMix({}, cfg, get(this.geometry.theme, 'pieLabels', {}));\n  }\n\n  /** @override */\n  protected getLabelOffset(offset: string | number): number {\n    return super.getLabelOffset(offset) || 0;\n  }\n\n  protected getLabelRotate(angle: number, offset: number, isLabelLimit: boolean) {\n    let rotate;\n    if (offset < 0) {\n      rotate = angle;\n      if (rotate > Math.PI / 2) {\n        rotate = rotate - Math.PI;\n      }\n      if (rotate < -Math.PI / 2) {\n        rotate = rotate + Math.PI;\n      }\n    }\n    return rotate;\n  }\n\n  protected getLabelAlign(point: LabelItem) {\n    const coordinate = this.getCoordinate();\n    const center = coordinate.getCenter();\n\n    let align;\n    if (point.angle <= Math.PI / 2 && point.x >= center.x) {\n      align = 'left';\n    } else {\n      align = 'right';\n    }\n    if (point.offset <= 0) {\n      if (align === 'right') {\n        align = 'left';\n      } else {\n        align = 'right';\n      }\n    }\n    return align;\n  }\n\n  protected getArcPoint(point) {\n    return point;\n  }\n\n  protected getPointAngle(point) {\n    const coordinate = this.getCoordinate();\n    const startPoint = {\n      x: isArray(point.x) ? point.x[0] : point.x,\n      y: point.y[0],\n    };\n    const endPoint = {\n      x: isArray(point.x) ? point.x[1] : point.x,\n      y: point.y[1],\n    };\n    let angle;\n    const startAngle = getAngleByPoint(coordinate, startPoint);\n    if (point.points && point.points[0].y === point.points[1].y) {\n      angle = startAngle;\n    } else {\n      let endAngle = getAngleByPoint(coordinate, endPoint);\n      if (startAngle >= endAngle) {\n        // 100% pie slice\n        endAngle = endAngle + Math.PI * 2;\n      }\n      angle = startAngle + (endAngle - startAngle) / 2;\n    }\n    return angle;\n  }\n\n  /** @override */\n  protected getCirclePoint(angle: number, offset: number) {\n    const coordinate = this.getCoordinate();\n    const center = coordinate.getCenter();\n    const r = coordinate.getRadius() + offset;\n    return {\n      ...polarToCartesian(center.x, center.y, r, angle),\n      angle,\n      r,\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}