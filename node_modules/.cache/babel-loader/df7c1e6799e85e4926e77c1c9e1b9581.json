{"ast":null,"code":"import { getTickInterval } from '../util/time';\nexport default function calculateTimeTicks(cfg) {\n  var min = cfg.min,\n      max = cfg.max,\n      minTickInterval = cfg.minTickInterval;\n  var tickInterval = cfg.tickInterval;\n  var tickCount = cfg.tickCount; // 指定 tickInterval 后 tickCount 不生效，需要重新计算\n\n  if (tickInterval) {\n    tickCount = Math.ceil((max - min) / tickInterval);\n  } else {\n    tickInterval = getTickInterval(min, max, tickCount)[1];\n    var count = (max - min) / tickInterval;\n    var ratio = count / tickCount;\n\n    if (ratio > 1) {\n      tickInterval = tickInterval * Math.ceil(ratio);\n    } // 如果设置了最小间距，则使用最小间距\n\n\n    if (minTickInterval && tickInterval < minTickInterval) {\n      tickInterval = minTickInterval;\n    }\n  }\n\n  var ticks = [];\n\n  for (var i = min; i < max + tickInterval; i += tickInterval) {\n    ticks.push(i);\n  }\n\n  return ticks;\n}","map":{"version":3,"sources":["../../src/tick-method/time.ts"],"names":[],"mappings":"AACA,SAAS,eAAT,QAAgC,cAAhC;AAEA,eAAc,SAAU,kBAAV,CAA6B,GAA7B,EAA6C;AACjD,MAAA,GAAG,GAA2B,GAAG,CAA9B,GAAH;AAAA,MAAK,GAAG,GAAsB,GAAG,CAAzB,GAAR;AAAA,MAAU,eAAe,GAAK,GAAG,CAAR,eAAzB;AACR,MAAI,YAAY,GAAG,GAAG,CAAC,YAAvB;AACA,MAAI,SAAS,GAAG,GAAG,CAAC,SAApB,CAHyD,CAIzD;;AACA,MAAI,YAAJ,EAAkB;AAChB,IAAA,SAAS,GAAG,IAAI,CAAC,IAAL,CAAU,CAAC,GAAG,GAAG,GAAP,IAAc,YAAxB,CAAZ;AACD,GAFD,MAEO;AACL,IAAA,YAAY,GAAG,eAAe,CAAC,GAAD,EAAM,GAAN,EAAW,SAAX,CAAf,CAAqC,CAArC,CAAf;AACA,QAAM,KAAK,GAAG,CAAC,GAAG,GAAG,GAAP,IAAc,YAA5B;AACA,QAAM,KAAK,GAAG,KAAK,GAAG,SAAtB;;AACA,QAAI,KAAK,GAAG,CAAZ,EAAe;AACb,MAAA,YAAY,GAAG,YAAY,GAAG,IAAI,CAAC,IAAL,CAAU,KAAV,CAA9B;AACD,KANI,CAOL;;;AACA,QAAI,eAAe,IAAI,YAAY,GAAG,eAAtC,EAAuD;AACrD,MAAA,YAAY,GAAG,eAAf;AACD;AACF;;AACD,MAAM,KAAK,GAAG,EAAd;;AACA,OAAK,IAAI,CAAC,GAAG,GAAb,EAAkB,CAAC,GAAG,GAAG,GAAG,YAA5B,EAA0C,CAAC,IAAI,YAA/C,EAA6D;AAC3D,IAAA,KAAK,CAAC,IAAN,CAAW,CAAX;AACD;;AACD,SAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["import { getTickInterval } from '../util/time';\nexport default function calculateTimeTicks(cfg) {\n    var min = cfg.min, max = cfg.max, minTickInterval = cfg.minTickInterval;\n    var tickInterval = cfg.tickInterval;\n    var tickCount = cfg.tickCount;\n    // 指定 tickInterval 后 tickCount 不生效，需要重新计算\n    if (tickInterval) {\n        tickCount = Math.ceil((max - min) / tickInterval);\n    }\n    else {\n        tickInterval = getTickInterval(min, max, tickCount)[1];\n        var count = (max - min) / tickInterval;\n        var ratio = count / tickCount;\n        if (ratio > 1) {\n            tickInterval = tickInterval * Math.ceil(ratio);\n        }\n        // 如果设置了最小间距，则使用最小间距\n        if (minTickInterval && tickInterval < minTickInterval) {\n            tickInterval = minTickInterval;\n        }\n    }\n    var ticks = [];\n    for (var i = min; i < max + tickInterval; i += tickInterval) {\n        ticks.push(i);\n    }\n    return ticks;\n}\n//# sourceMappingURL=time.js.map"]},"metadata":{},"sourceType":"module"}