{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Action from '../base';\nimport { distance } from '../util';\nvar DISTANCE = 4; // 移动的最小距离\n\n/**\n * @ignore\n * View 支持 Drag 的 Action\n */\n\nvar Drag =\n/** @class */\nfunction (_super) {\n  __extends(Drag, _super);\n\n  function Drag() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // Action 开始，不等同于 拖拽开始，需要判定移动的范围\n\n\n    _this.starting = false; // 拖拽开始\n\n    _this.dragStart = false;\n    return _this;\n  }\n  /**\n   * 开始\n   */\n\n\n  Drag.prototype.start = function () {\n    this.starting = true;\n    this.startPoint = this.context.getCurrentPoint();\n  };\n  /**\n   * 拖拽\n   */\n\n\n  Drag.prototype.drag = function () {\n    if (!this.startPoint) {\n      return;\n    }\n\n    var current = this.context.getCurrentPoint();\n    var view = this.context.view;\n    var event = this.context.event;\n\n    if (!this.dragStart) {\n      if (distance(current, this.startPoint) > DISTANCE) {\n        view.emit('dragstart', {\n          target: event.target,\n          x: event.x,\n          y: event.y\n        });\n        this.dragStart = true;\n      }\n    } else {\n      view.emit('drag', {\n        target: event.target,\n        x: event.x,\n        y: event.y\n      });\n    }\n  };\n  /**\n   * 结束\n   */\n\n\n  Drag.prototype.end = function () {\n    if (this.dragStart) {\n      var view = this.context.view;\n      var event_1 = this.context.event;\n      view.emit('dragend', {\n        target: event_1.target,\n        x: event_1.x,\n        y: event_1.y\n      });\n    }\n\n    this.starting = false;\n    this.dragStart = false;\n  };\n\n  return Drag;\n}(Action);\n\nexport default Drag;","map":{"version":3,"sources":["../../../../src/interaction/action/view/drag.ts"],"names":[],"mappings":";AACA,OAAO,MAAP,MAAmB,SAAnB;AACA,SAAS,QAAT,QAAyB,SAAzB;AAEA,IAAM,QAAQ,GAAG,CAAjB,C,CAAoB;;AAEpB;;;AAGG;;AACH,IAAA,IAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmB,EAAA,SAAA,CAAA,IAAA,EAAA,MAAA,CAAA;;AAAnB,WAAA,IAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA,CAAA,CACE;;;AACU,IAAA,KAAA,CAAA,QAAA,GAAW,KAAX,CAFZ,CAGE;;AACU,IAAA,KAAA,CAAA,SAAA,GAAY,KAAZ;;AAwDX;AApDC;;AAEG;;;AACI,EAAA,IAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACE,SAAK,QAAL,GAAgB,IAAhB;AACA,SAAK,UAAL,GAAkB,KAAK,OAAL,CAAa,eAAb,EAAlB;AACD,GAHM;AAKP;;AAEG;;;AACI,EAAA,IAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA;AACE,QAAI,CAAC,KAAK,UAAV,EAAsB;AACpB;AACD;;AACD,QAAM,OAAO,GAAG,KAAK,OAAL,CAAa,eAAb,EAAhB;AACA,QAAM,IAAI,GAAG,KAAK,OAAL,CAAa,IAA1B;AACA,QAAM,KAAK,GAAG,KAAK,OAAL,CAAa,KAA3B;;AACA,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,UAAI,QAAQ,CAAC,OAAD,EAAU,KAAK,UAAf,CAAR,GAAqC,QAAzC,EAAmD;AACjD,QAAA,IAAI,CAAC,IAAL,CAAU,WAAV,EAAuB;AACrB,UAAA,MAAM,EAAE,KAAK,CAAC,MADO;AAErB,UAAA,CAAC,EAAE,KAAK,CAAC,CAFY;AAGrB,UAAA,CAAC,EAAE,KAAK,CAAC;AAHY,SAAvB;AAKA,aAAK,SAAL,GAAiB,IAAjB;AACD;AACF,KATD,MASO;AACL,MAAA,IAAI,CAAC,IAAL,CAAU,MAAV,EAAkB;AAChB,QAAA,MAAM,EAAE,KAAK,CAAC,MADE;AAEhB,QAAA,CAAC,EAAE,KAAK,CAAC,CAFO;AAGhB,QAAA,CAAC,EAAE,KAAK,CAAC;AAHO,OAAlB;AAKD;AACF,GAvBM;AAyBP;;AAEG;;;AACI,EAAA,IAAA,CAAA,SAAA,CAAA,GAAA,GAAP,YAAA;AACE,QAAI,KAAK,SAAT,EAAoB;AAClB,UAAM,IAAI,GAAG,KAAK,OAAL,CAAa,IAA1B;AACA,UAAM,OAAK,GAAG,KAAK,OAAL,CAAa,KAA3B;AACA,MAAA,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB;AACnB,QAAA,MAAM,EAAE,OAAK,CAAC,MADK;AAEnB,QAAA,CAAC,EAAE,OAAK,CAAC,CAFU;AAGnB,QAAA,CAAC,EAAE,OAAK,CAAC;AAHU,OAArB;AAKD;;AACD,SAAK,QAAL,GAAgB,KAAhB;AACA,SAAK,SAAL,GAAiB,KAAjB;AACD,GAZM;;AAaT,SAAA,IAAA;AAAC,CA5DD,CAAmB,MAAnB,CAAA;;AA8DA,eAAe,IAAf","sourcesContent":["import { Point } from '../../../dependents';\nimport Action from '../base';\nimport { distance } from '../util';\n\nconst DISTANCE = 4; // 移动的最小距离\n\n/**\n * @ignore\n * View 支持 Drag 的 Action\n */\nclass Drag extends Action {\n  // Action 开始，不等同于 拖拽开始，需要判定移动的范围\n  protected starting = false;\n  // 拖拽开始\n  protected dragStart = false;\n  // 开始的节点\n  protected startPoint: Point;\n\n  /**\n   * 开始\n   */\n  public start() {\n    this.starting = true;\n    this.startPoint = this.context.getCurrentPoint();\n  }\n\n  /**\n   * 拖拽\n   */\n  public drag() {\n    if (!this.startPoint) {\n      return;\n    }\n    const current = this.context.getCurrentPoint();\n    const view = this.context.view;\n    const event = this.context.event;\n    if (!this.dragStart) {\n      if (distance(current, this.startPoint) > DISTANCE) {\n        view.emit('dragstart', {\n          target: event.target,\n          x: event.x,\n          y: event.y,\n        });\n        this.dragStart = true;\n      }\n    } else {\n      view.emit('drag', {\n        target: event.target,\n        x: event.x,\n        y: event.y,\n      });\n    }\n  }\n\n  /**\n   * 结束\n   */\n  public end() {\n    if (this.dragStart) {\n      const view = this.context.view;\n      const event = this.context.event;\n      view.emit('dragend', {\n        target: event.target,\n        x: event.x,\n        y: event.y,\n      });\n    }\n    this.starting = false;\n    this.dragStart = false;\n  }\n}\n\nexport default Drag;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}