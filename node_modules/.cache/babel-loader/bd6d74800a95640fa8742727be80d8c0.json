{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { AbstractShape } from '@antv/g-base';\nimport { setShadow, setTransform, setClip } from '../util/svg';\nimport { createDom } from '../util/dom';\nimport { refreshElement } from '../util/draw';\nimport { SVG_ATTR_MAP } from '../constant';\nimport * as Shape from './index';\nimport Group from '../group';\nimport { getBBoxMethod } from '@antv/g-base';\n\nvar ShapeBase =\n/** @class */\nfunction (_super) {\n  __extends(ShapeBase, _super);\n\n  function ShapeBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'svg';\n    _this.canFill = false;\n    _this.canStroke = false;\n    return _this;\n  }\n\n  ShapeBase.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this); // 设置默认值\n\n\n    return __assign(__assign({}, attrs), {\n      lineWidth: 1,\n      lineAppendWidth: 0,\n      strokeOpacity: 1,\n      fillOpacity: 1\n    });\n  }; // 覆盖基类的 afterAttrsChange 方法\n\n\n  ShapeBase.prototype.afterAttrsChange = function (targetAttrs) {\n    _super.prototype.afterAttrsChange.call(this, targetAttrs);\n\n    var canvas = this.get('canvas'); // 只有挂载到画布下，才对元素进行实际渲染\n\n    if (canvas && canvas.get('autoDraw')) {\n      var context = canvas.get('context');\n      this.draw(context, targetAttrs);\n    }\n  };\n\n  ShapeBase.prototype.getShapeBase = function () {\n    return Shape;\n  };\n\n  ShapeBase.prototype.getGroupBase = function () {\n    return Group;\n  };\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n\n\n  ShapeBase.prototype.onCanvasChange = function (changeType) {\n    refreshElement(this, changeType);\n  };\n\n  ShapeBase.prototype.calculateBBox = function () {\n    var el = this.get('el');\n    var bbox = null; // 包围盒计算依赖于绘制，如果还没有生成对应的 Dom 元素，则包围盒的长宽均为 0\n\n    if (el) {\n      bbox = el.getBBox();\n    } else {\n      var bboxMethod = getBBoxMethod(this.get('type'));\n\n      if (bboxMethod) {\n        bbox = bboxMethod(this);\n      }\n    }\n\n    if (bbox) {\n      var x = bbox.x,\n          y = bbox.y,\n          width = bbox.width,\n          height = bbox.height;\n      var lineWidth = this.getHitLineWidth();\n      var halfWidth = lineWidth / 2;\n      var minX = x - halfWidth;\n      var minY = y - halfWidth;\n      var maxX = x + width + halfWidth;\n      var maxY = y + height + halfWidth;\n      return {\n        x: minX,\n        y: minY,\n        minX: minX,\n        minY: minY,\n        maxX: maxX,\n        maxY: maxY,\n        width: width + lineWidth,\n        height: height + lineWidth\n      };\n    }\n\n    return {\n      x: 0,\n      y: 0,\n      minX: 0,\n      minY: 0,\n      maxX: 0,\n      maxY: 0,\n      width: 0,\n      height: 0\n    };\n  };\n\n  ShapeBase.prototype.isFill = function () {\n    var _a = this.attr(),\n        fill = _a.fill,\n        fillStyle = _a.fillStyle;\n\n    return (fill || fillStyle || this.isClipShape()) && this.canFill;\n  };\n\n  ShapeBase.prototype.isStroke = function () {\n    var _a = this.attr(),\n        stroke = _a.stroke,\n        strokeStyle = _a.strokeStyle;\n\n    return (stroke || strokeStyle) && this.canStroke;\n  };\n\n  ShapeBase.prototype.draw = function (context, targetAttrs) {\n    var el = this.get('el');\n\n    if (this.get('destroyed')) {\n      if (el) {\n        el.parentNode.removeChild(el);\n      }\n    } else {\n      if (!el) {\n        createDom(this);\n      }\n\n      setClip(this, context);\n      this.createPath(context, targetAttrs);\n      this.shadow(context, targetAttrs);\n      this.strokeAndFill(context, targetAttrs);\n      this.transform(targetAttrs);\n    }\n  };\n  /**\n   * @protected\n   * 绘制图形的路径\n   * @param {Defs} context 上下文\n   * @param {ShapeAttrs} targetAttrs 渲染的目标属性\n   */\n\n\n  ShapeBase.prototype.createPath = function (context, targetAttrs) {}; // stroke and fill\n\n\n  ShapeBase.prototype.strokeAndFill = function (context, targetAttrs) {\n    var attrs = targetAttrs || this.attr();\n    var fill = attrs.fill,\n        fillStyle = attrs.fillStyle,\n        stroke = attrs.stroke,\n        strokeStyle = attrs.strokeStyle,\n        fillOpacity = attrs.fillOpacity,\n        strokeOpacity = attrs.strokeOpacity,\n        lineWidth = attrs.lineWidth;\n    var el = this.get('el');\n\n    if (this.canFill) {\n      // 初次渲染和更新渲染的逻辑有所不同: 初次渲染值为空时，需要设置为 none，否则就会是黑色，而更新渲染则不需要\n      if (!targetAttrs) {\n        this._setColor(context, 'fill', fill || fillStyle);\n      } else if ('fill' in attrs) {\n        this._setColor(context, 'fill', fill);\n      } else if ('fillStyle' in attrs) {\n        // compatible with fillStyle\n        this._setColor(context, 'fill', fillStyle);\n      }\n\n      if (fillOpacity) {\n        el.setAttribute(SVG_ATTR_MAP['fillOpacity'], fillOpacity);\n      }\n    }\n\n    if (this.canStroke && lineWidth > 0) {\n      if (!targetAttrs) {\n        this._setColor(context, 'stroke', stroke || strokeStyle);\n      } else if ('stroke' in attrs) {\n        this._setColor(context, 'stroke', stroke);\n      } else if ('strokeStyle' in attrs) {\n        // compatible with strokeStyle\n        this._setColor(context, 'stroke', strokeStyle);\n      }\n\n      if (strokeOpacity) {\n        el.setAttribute(SVG_ATTR_MAP['strokeOpacity'], strokeOpacity);\n      }\n\n      if (lineWidth) {\n        el.setAttribute(SVG_ATTR_MAP['lineWidth'], lineWidth);\n      }\n    }\n  };\n\n  ShapeBase.prototype._setColor = function (context, attr, value) {\n    var el = this.get('el');\n\n    if (!value) {\n      // need to set `none` to avoid default value\n      el.setAttribute(SVG_ATTR_MAP[attr], 'none');\n      return;\n    }\n\n    value = value.trim();\n\n    if (/^[r,R,L,l]{1}[\\s]*\\(/.test(value)) {\n      var id = context.find('gradient', value);\n\n      if (!id) {\n        id = context.addGradient(value);\n      }\n\n      el.setAttribute(SVG_ATTR_MAP[attr], \"url(#\" + id + \")\");\n    } else if (/^[p,P]{1}[\\s]*\\(/.test(value)) {\n      var id = context.find('pattern', value);\n\n      if (!id) {\n        id = context.addPattern(value);\n      }\n\n      el.setAttribute(SVG_ATTR_MAP[attr], \"url(#\" + id + \")\");\n    } else {\n      el.setAttribute(SVG_ATTR_MAP[attr], value);\n    }\n  };\n\n  ShapeBase.prototype.shadow = function (context, targetAttrs) {\n    var attrs = this.attr();\n\n    var _a = targetAttrs || attrs,\n        shadowOffsetX = _a.shadowOffsetX,\n        shadowOffsetY = _a.shadowOffsetY,\n        shadowBlur = _a.shadowBlur,\n        shadowColor = _a.shadowColor;\n\n    if (shadowOffsetX || shadowOffsetY || shadowBlur || shadowColor) {\n      setShadow(this, context);\n    }\n  };\n\n  ShapeBase.prototype.transform = function (targetAttrs) {\n    var attrs = this.attr();\n    var matrix = (targetAttrs || attrs).matrix;\n\n    if (matrix) {\n      setTransform(this);\n    }\n  };\n\n  ShapeBase.prototype.isInShape = function (refX, refY) {\n    return this.isPointInPath(refX, refY);\n  };\n\n  ShapeBase.prototype.isPointInPath = function (refX, refY) {\n    var el = this.get('el');\n    var canvas = this.get('canvas');\n    var bbox = canvas.get('el').getBoundingClientRect();\n    var clientX = refX + bbox.left;\n    var clientY = refY + bbox.top;\n    var element = document.elementFromPoint(clientX, clientY);\n\n    if (element && element.isEqualNode(el)) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * 获取线拾取的宽度\n   * @returns {number} 线的拾取宽度\n   */\n\n\n  ShapeBase.prototype.getHitLineWidth = function () {\n    var _a = this.attrs,\n        lineWidth = _a.lineWidth,\n        lineAppendWidth = _a.lineAppendWidth;\n\n    if (this.isStroke()) {\n      return lineWidth + lineAppendWidth;\n    }\n\n    return 0;\n  };\n\n  return ShapeBase;\n}(AbstractShape);\n\nexport default ShapeBase;","map":{"version":3,"sources":["../../src/shape/base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { AbstractShape } from '@antv/g-base';\nimport { setShadow, setTransform, setClip } from '../util/svg';\nimport { createDom } from '../util/dom';\nimport { refreshElement } from '../util/draw';\nimport { SVG_ATTR_MAP } from '../constant';\nimport * as Shape from './index';\nimport Group from '../group';\nimport { getBBoxMethod } from '@antv/g-base';\nvar ShapeBase = /** @class */ (function (_super) {\n    __extends(ShapeBase, _super);\n    function ShapeBase() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'svg';\n        _this.canFill = false;\n        _this.canStroke = false;\n        return _this;\n    }\n    ShapeBase.prototype.getDefaultAttrs = function () {\n        var attrs = _super.prototype.getDefaultAttrs.call(this);\n        // 设置默认值\n        return __assign(__assign({}, attrs), { lineWidth: 1, lineAppendWidth: 0, strokeOpacity: 1, fillOpacity: 1 });\n    };\n    // 覆盖基类的 afterAttrsChange 方法\n    ShapeBase.prototype.afterAttrsChange = function (targetAttrs) {\n        _super.prototype.afterAttrsChange.call(this, targetAttrs);\n        var canvas = this.get('canvas');\n        // 只有挂载到画布下，才对元素进行实际渲染\n        if (canvas && canvas.get('autoDraw')) {\n            var context = canvas.get('context');\n            this.draw(context, targetAttrs);\n        }\n    };\n    ShapeBase.prototype.getShapeBase = function () {\n        return Shape;\n    };\n    ShapeBase.prototype.getGroupBase = function () {\n        return Group;\n    };\n    /**\n     * 一些方法调用会引起画布变化\n     * @param {ChangeType} changeType 改变的类型\n     */\n    ShapeBase.prototype.onCanvasChange = function (changeType) {\n        refreshElement(this, changeType);\n    };\n    ShapeBase.prototype.calculateBBox = function () {\n        var el = this.get('el');\n        var bbox = null;\n        // 包围盒计算依赖于绘制，如果还没有生成对应的 Dom 元素，则包围盒的长宽均为 0\n        if (el) {\n            bbox = el.getBBox();\n        }\n        else {\n            var bboxMethod = getBBoxMethod(this.get('type'));\n            if (bboxMethod) {\n                bbox = bboxMethod(this);\n            }\n        }\n        if (bbox) {\n            var x = bbox.x, y = bbox.y, width = bbox.width, height = bbox.height;\n            var lineWidth = this.getHitLineWidth();\n            var halfWidth = lineWidth / 2;\n            var minX = x - halfWidth;\n            var minY = y - halfWidth;\n            var maxX = x + width + halfWidth;\n            var maxY = y + height + halfWidth;\n            return {\n                x: minX,\n                y: minY,\n                minX: minX,\n                minY: minY,\n                maxX: maxX,\n                maxY: maxY,\n                width: width + lineWidth,\n                height: height + lineWidth,\n            };\n        }\n        return {\n            x: 0,\n            y: 0,\n            minX: 0,\n            minY: 0,\n            maxX: 0,\n            maxY: 0,\n            width: 0,\n            height: 0,\n        };\n    };\n    ShapeBase.prototype.isFill = function () {\n        var _a = this.attr(), fill = _a.fill, fillStyle = _a.fillStyle;\n        return (fill || fillStyle || this.isClipShape()) && this.canFill;\n    };\n    ShapeBase.prototype.isStroke = function () {\n        var _a = this.attr(), stroke = _a.stroke, strokeStyle = _a.strokeStyle;\n        return (stroke || strokeStyle) && this.canStroke;\n    };\n    ShapeBase.prototype.draw = function (context, targetAttrs) {\n        var el = this.get('el');\n        if (this.get('destroyed')) {\n            if (el) {\n                el.parentNode.removeChild(el);\n            }\n        }\n        else {\n            if (!el) {\n                createDom(this);\n            }\n            setClip(this, context);\n            this.createPath(context, targetAttrs);\n            this.shadow(context, targetAttrs);\n            this.strokeAndFill(context, targetAttrs);\n            this.transform(targetAttrs);\n        }\n    };\n    /**\n     * @protected\n     * 绘制图形的路径\n     * @param {Defs} context 上下文\n     * @param {ShapeAttrs} targetAttrs 渲染的目标属性\n     */\n    ShapeBase.prototype.createPath = function (context, targetAttrs) { };\n    // stroke and fill\n    ShapeBase.prototype.strokeAndFill = function (context, targetAttrs) {\n        var attrs = targetAttrs || this.attr();\n        var fill = attrs.fill, fillStyle = attrs.fillStyle, stroke = attrs.stroke, strokeStyle = attrs.strokeStyle, fillOpacity = attrs.fillOpacity, strokeOpacity = attrs.strokeOpacity, lineWidth = attrs.lineWidth;\n        var el = this.get('el');\n        if (this.canFill) {\n            // 初次渲染和更新渲染的逻辑有所不同: 初次渲染值为空时，需要设置为 none，否则就会是黑色，而更新渲染则不需要\n            if (!targetAttrs) {\n                this._setColor(context, 'fill', fill || fillStyle);\n            }\n            else if ('fill' in attrs) {\n                this._setColor(context, 'fill', fill);\n            }\n            else if ('fillStyle' in attrs) {\n                // compatible with fillStyle\n                this._setColor(context, 'fill', fillStyle);\n            }\n            if (fillOpacity) {\n                el.setAttribute(SVG_ATTR_MAP['fillOpacity'], fillOpacity);\n            }\n        }\n        if (this.canStroke && lineWidth > 0) {\n            if (!targetAttrs) {\n                this._setColor(context, 'stroke', stroke || strokeStyle);\n            }\n            else if ('stroke' in attrs) {\n                this._setColor(context, 'stroke', stroke);\n            }\n            else if ('strokeStyle' in attrs) {\n                // compatible with strokeStyle\n                this._setColor(context, 'stroke', strokeStyle);\n            }\n            if (strokeOpacity) {\n                el.setAttribute(SVG_ATTR_MAP['strokeOpacity'], strokeOpacity);\n            }\n            if (lineWidth) {\n                el.setAttribute(SVG_ATTR_MAP['lineWidth'], lineWidth);\n            }\n        }\n    };\n    ShapeBase.prototype._setColor = function (context, attr, value) {\n        var el = this.get('el');\n        if (!value) {\n            // need to set `none` to avoid default value\n            el.setAttribute(SVG_ATTR_MAP[attr], 'none');\n            return;\n        }\n        value = value.trim();\n        if (/^[r,R,L,l]{1}[\\s]*\\(/.test(value)) {\n            var id = context.find('gradient', value);\n            if (!id) {\n                id = context.addGradient(value);\n            }\n            el.setAttribute(SVG_ATTR_MAP[attr], \"url(#\" + id + \")\");\n        }\n        else if (/^[p,P]{1}[\\s]*\\(/.test(value)) {\n            var id = context.find('pattern', value);\n            if (!id) {\n                id = context.addPattern(value);\n            }\n            el.setAttribute(SVG_ATTR_MAP[attr], \"url(#\" + id + \")\");\n        }\n        else {\n            el.setAttribute(SVG_ATTR_MAP[attr], value);\n        }\n    };\n    ShapeBase.prototype.shadow = function (context, targetAttrs) {\n        var attrs = this.attr();\n        var _a = targetAttrs || attrs, shadowOffsetX = _a.shadowOffsetX, shadowOffsetY = _a.shadowOffsetY, shadowBlur = _a.shadowBlur, shadowColor = _a.shadowColor;\n        if (shadowOffsetX || shadowOffsetY || shadowBlur || shadowColor) {\n            setShadow(this, context);\n        }\n    };\n    ShapeBase.prototype.transform = function (targetAttrs) {\n        var attrs = this.attr();\n        var matrix = (targetAttrs || attrs).matrix;\n        if (matrix) {\n            setTransform(this);\n        }\n    };\n    ShapeBase.prototype.isInShape = function (refX, refY) {\n        return this.isPointInPath(refX, refY);\n    };\n    ShapeBase.prototype.isPointInPath = function (refX, refY) {\n        var el = this.get('el');\n        var canvas = this.get('canvas');\n        var bbox = canvas.get('el').getBoundingClientRect();\n        var clientX = refX + bbox.left;\n        var clientY = refY + bbox.top;\n        var element = document.elementFromPoint(clientX, clientY);\n        if (element && element.isEqualNode(el)) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * 获取线拾取的宽度\n     * @returns {number} 线的拾取宽度\n     */\n    ShapeBase.prototype.getHitLineWidth = function () {\n        var _a = this.attrs, lineWidth = _a.lineWidth, lineAppendWidth = _a.lineAppendWidth;\n        if (this.isStroke()) {\n            return lineWidth + lineAppendWidth;\n        }\n        return 0;\n    };\n    return ShapeBase;\n}(AbstractShape));\nexport default ShapeBase;\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"module"}