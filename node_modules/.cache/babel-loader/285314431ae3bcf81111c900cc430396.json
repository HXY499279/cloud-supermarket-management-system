{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\n/**\n * Create By Bruce Too\n * On 2020-02-10\n */\n\nimport { assign, deepMix, each, get } from '@antv/util';\nimport { DIRECTION, VIEW_LIFE_CIRCLE } from '../constant';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * Tree Facet\n */\n\nvar Tree =\n/** @class */\nfunction (_super) {\n  __extends(Tree, _super);\n\n  function Tree() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.afterChartRender = function () {\n      if (_this.facets && _this.cfg.line) {\n        _this.container.clear();\n\n        _this.drawLines(_this.facets);\n      }\n    };\n\n    return _this;\n  }\n\n  Tree.prototype.afterEachView = function (view, facet) {\n    this.processAxis(view, facet);\n  };\n\n  Tree.prototype.beforeEachView = function (view, facet) {};\n\n  Tree.prototype.init = function () {\n    _super.prototype.init.call(this);\n\n    this.view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, this.afterChartRender);\n  };\n\n  Tree.prototype.getDefaultCfg = function () {\n    return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n      type: 'tree',\n      line: {\n        style: {\n          lineWidth: 1,\n          stroke: '#ddd'\n        },\n        smooth: false\n      },\n      showTitle: true,\n      title: _super.prototype.getDefaultTitleCfg.call(this)\n    });\n  };\n\n  Tree.prototype.generateFacets = function (data) {\n    var fields = this.cfg.fields;\n\n    if (!fields.length) {\n      throw new Error('Please specify for the fields for rootFacet!');\n    }\n\n    var rst = [];\n    var rootFacet = {\n      type: this.cfg.type,\n      data: data,\n      region: null,\n      rowValuesLength: this.getRows(),\n      columnValuesLength: 1,\n      rowIndex: 0,\n      columnIndex: 0,\n      rowField: '',\n      columnField: '',\n      rowValue: '',\n      columnValue: ''\n    };\n    rst.push(rootFacet);\n    rootFacet.children = this.getChildFacets(data, 1, rst);\n    this.setRegion(rst);\n    return rst;\n  };\n\n  Tree.prototype.setRegion = function (facets) {\n    var _this = this;\n\n    this.forceColIndex(facets);\n    facets.forEach(function (facet) {\n      // @ts-ignore 允许调整\n      facet.region = _this.getRegion(facet.rowValuesLength, facet.columnValuesLength, facet.columnIndex, facet.rowIndex);\n    });\n  };\n\n  Tree.prototype.getRegion = function (rows, cols, xIndex, yIndex) {\n    var xWidth = 1 / cols; // x轴方向的每个分面的偏移\n\n    var yWidth = 1 / rows; // y轴方向的每个分面的偏移\n\n    var start = {\n      x: xWidth * xIndex,\n      y: yWidth * yIndex\n    };\n    var end = {\n      x: start.x + xWidth,\n      y: start.y + yWidth * 2 / 3\n    };\n    return {\n      start: start,\n      end: end\n    };\n  };\n\n  Tree.prototype.forceColIndex = function (facets) {\n    var _this = this;\n\n    var leafs = [];\n    var index = 0;\n    facets.forEach(function (facet) {\n      if (_this.isLeaf(facet)) {\n        leafs.push(facet); // @ts-ignore 允许调整\n\n        facet.columnIndex = index;\n        index++;\n      }\n    });\n    leafs.forEach(function (facet) {\n      // @ts-ignore\n      facet.columnValuesLength = leafs.length;\n    });\n    var maxLevel = this.cfg.fields.length;\n\n    for (var i = maxLevel - 1; i >= 0; i--) {\n      var levelFacets = this.getFacetsByLevel(facets, i); // var yIndex = maxLevel - i;\n\n      for (var _i = 0, levelFacets_1 = levelFacets; _i < levelFacets_1.length; _i++) {\n        var facet = levelFacets_1[_i];\n\n        if (!this.isLeaf(facet)) {\n          facet.originColIndex = facet.columnIndex; // @ts-ignore\n\n          facet.columnIndex = this.getRegionIndex(facet.children); // @ts-ignore\n\n          facet.columnValuesLength = leafs.length;\n        }\n      }\n    }\n  }; // get facet use level\n\n\n  Tree.prototype.getFacetsByLevel = function (facets, level) {\n    var rst = [];\n    facets.forEach(function (facet) {\n      if (facet.rowIndex === level) {\n        rst.push(facet);\n      }\n    });\n    return rst;\n  }; // if the facet has children , make it's column index in the middle of it's children\n\n\n  Tree.prototype.getRegionIndex = function (children) {\n    var first = children[0];\n    var last = children[children.length - 1];\n    return (last.columnIndex - first.columnIndex) / 2 + first.columnIndex;\n  }; // is  a leaf without children\n\n\n  Tree.prototype.isLeaf = function (facet) {\n    return !facet.children || !facet.children.length;\n  };\n\n  Tree.prototype.getRows = function () {\n    return this.cfg.fields.length + 1;\n  }; // get child\n\n\n  Tree.prototype.getChildFacets = function (data, level, arr) {\n    var _this = this; // [ 'grade', 'class' ]\n\n\n    var fields = this.cfg.fields;\n    var length = fields.length;\n\n    if (length < level) {\n      return;\n    }\n\n    var rst = []; // get fist level except root node\n\n    var field = fields[level - 1]; // get field value\n\n    var values = this.getFieldValues(data, field);\n    values.forEach(function (value, index) {\n      var conditions = [{\n        field: field,\n        value: value,\n        values: values\n      }];\n      var subData = data.filter(_this.getFacetDataFilter(conditions));\n\n      if (subData.length) {\n        var facet = {\n          type: _this.cfg.type,\n          data: subData,\n          region: null,\n          columnValue: value,\n          rowValue: '',\n          columnField: field,\n          rowField: '',\n          columnIndex: index,\n          rowValuesLength: _this.getRows(),\n          columnValuesLength: 1,\n          rowIndex: level,\n          children: _this.getChildFacets(subData, level + 1, arr)\n        };\n        rst.push(facet);\n        arr.push(facet);\n      }\n    });\n    return rst;\n  };\n\n  Tree.prototype.render = function () {\n    _super.prototype.render.call(this);\n\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  };\n\n  Tree.prototype.renderTitle = function () {\n    var _this = this;\n\n    each(this.facets, function (facet) {\n      var columnValue = facet.columnValue,\n          view = facet.view;\n      var formatter = get(_this.cfg.title, 'formatter');\n      var config = deepMix({\n        position: ['50%', '0%'],\n        content: formatter ? formatter(columnValue) : columnValue\n      }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.title);\n      view.annotation().text(config);\n    });\n  };\n\n  Tree.prototype.drawLines = function (facets) {\n    var _this = this;\n\n    facets.forEach(function (facet) {\n      if (!_this.isLeaf(facet)) {\n        var children = facet.children;\n\n        _this.addFacetLines(facet, children);\n      }\n    });\n  }; // add lines with it's children\n\n\n  Tree.prototype.addFacetLines = function (facet, children) {\n    var _this = this;\n\n    var view = facet.view;\n    var region = view.coordinateBBox; // top, right, bottom, left\n\n    var start = {\n      x: region.x + region.width / 2,\n      y: region.y + region.height\n    };\n    children.forEach(function (subFacet) {\n      var subRegion = subFacet.view.coordinateBBox;\n      var end = {\n        x: subRegion.bl.x + (subRegion.tr.x - subRegion.bl.x) / 2,\n        y: subRegion.tr.y\n      };\n      var middle1 = {\n        x: start.x,\n        y: start.y + (end.y - start.y) / 2\n      };\n      var middle2 = {\n        x: end.x,\n        y: middle1.y\n      };\n\n      _this.drawLine([start, middle1, middle2, end]);\n    });\n  };\n\n  Tree.prototype.getPath = function (points) {\n    var path = [];\n    var smooth = this.cfg.line.smooth;\n\n    if (smooth) {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['C', points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y]);\n    } else {\n      points.forEach(function (point, index) {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n    }\n\n    return path;\n  }; // draw line width points\n\n\n  Tree.prototype.drawLine = function (points) {\n    var path = this.getPath(points);\n    var line = this.cfg.line.style;\n    this.container.addShape('path', {\n      attrs: assign({\n        // @ts-ignore\n        path: path\n      }, line)\n    });\n  };\n\n  Tree.prototype.getXAxisOption = function (x, axes, option, facet) {\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    }\n\n    return option;\n  };\n\n  Tree.prototype.getYAxisOption = function (y, axes, option, facet) {\n    if (facet.originColIndex !== 0 && facet.columnIndex !== 0) {\n      return __assign(__assign({}, option), {\n        title: null,\n        label: null\n      });\n    }\n\n    return option;\n  };\n\n  return Tree;\n}(Facet);\n\nexport default Tree;","map":{"version":3,"sources":["../../src/facet/tree.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Create By Bruce Too\n * On 2020-02-10\n */\nimport { assign, deepMix, each, get } from '@antv/util';\nimport View from '../chart/view';\nimport { DIRECTION, VIEW_LIFE_CIRCLE } from '../constant';\nimport { AxisCfg, Condition, Datum, TreeCfg, TreeData } from '../interface';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n\n/**\n * @ignore\n * Tree Facet\n */\nexport default class Tree extends Facet<TreeCfg, TreeData> {\n  protected afterEachView(view: View, facet: TreeData) {\n    this.processAxis(view, facet);\n  }\n\n  protected beforeEachView(view: View, facet: TreeData) {}\n\n  public init() {\n    super.init();\n    this.view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, this.afterChartRender);\n  }\n\n  protected getDefaultCfg() {\n    return deepMix({}, super.getDefaultCfg(), {\n      type: 'tree',\n      line: {\n        style: {\n          lineWidth: 1,\n          stroke: '#ddd',\n        },\n        smooth: false,\n      },\n      showTitle: true,\n      title: super.getDefaultTitleCfg(),\n    });\n  }\n\n  protected generateFacets(data: Datum[]): TreeData[] {\n    const fields = this.cfg.fields;\n    if (!fields.length) {\n      throw new Error('Please specify for the fields for rootFacet!');\n    }\n    const rst = [];\n    const rootFacet: TreeData = {\n      type: this.cfg.type,\n      data,\n      region: null,\n      rowValuesLength: this.getRows(),\n      columnValuesLength: 1,\n      rowIndex: 0,\n      columnIndex: 0,\n      rowField: '',\n      columnField: '',\n      rowValue: '',\n      columnValue: '',\n    };\n    rst.push(rootFacet);\n    rootFacet.children = this.getChildFacets(data, 1, rst);\n    this.setRegion(rst);\n    return rst;\n  }\n\n  private setRegion(facets: TreeData[]) {\n    this.forceColIndex(facets);\n    facets.forEach((facet) => {\n      // @ts-ignore 允许调整\n      facet.region = this.getRegion(facet.rowValuesLength, facet.columnValuesLength, facet.columnIndex, facet.rowIndex);\n    });\n  }\n\n  protected getRegion(rows: number, cols: number, xIndex: number, yIndex: number) {\n    const xWidth = 1 / cols; // x轴方向的每个分面的偏移\n    const yWidth = 1 / rows; // y轴方向的每个分面的偏移\n\n    const start = {\n      x: xWidth * xIndex,\n      y: yWidth * yIndex,\n    };\n\n    const end = {\n      x: start.x + xWidth,\n      y: start.y + (yWidth * 2) / 3, // 预留1/3的空隙，方便添加连接线\n    };\n    return {\n      start,\n      end,\n    };\n  }\n\n  private forceColIndex(facets: TreeData[]) {\n    const leafs: TreeData[] = [];\n    let index = 0;\n    facets.forEach((facet) => {\n      if (this.isLeaf(facet)) {\n        leafs.push(facet);\n        // @ts-ignore 允许调整\n        facet.columnIndex = index;\n        index++;\n      }\n    });\n\n    leafs.forEach((facet) => {\n      // @ts-ignore\n      facet.columnValuesLength = leafs.length;\n    });\n    const maxLevel = this.cfg.fields.length;\n    for (let i = maxLevel - 1; i >= 0; i--) {\n      const levelFacets = this.getFacetsByLevel(facets, i);\n      // var yIndex = maxLevel - i;\n      for (const facet of levelFacets) {\n        if (!this.isLeaf(facet)) {\n          facet.originColIndex = facet.columnIndex;\n          // @ts-ignore\n          facet.columnIndex = this.getRegionIndex(facet.children);\n          // @ts-ignore\n          facet.columnValuesLength = leafs.length;\n        }\n      }\n    }\n  }\n\n  // get facet use level\n  private getFacetsByLevel(facets: TreeData[], level: number) {\n    const rst: TreeData[] = [];\n    facets.forEach((facet) => {\n      if (facet.rowIndex === level) {\n        rst.push(facet);\n      }\n    });\n    return rst;\n  }\n\n  // if the facet has children , make it's column index in the middle of it's children\n  private getRegionIndex(children: TreeData[]) {\n    const first = children[0];\n    const last = children[children.length - 1];\n    return (last.columnIndex - first.columnIndex) / 2 + first.columnIndex;\n  }\n\n  // is  a leaf without children\n  private isLeaf(facet: TreeData) {\n    return !facet.children || !facet.children.length;\n  }\n\n  private getRows() {\n    return this.cfg.fields.length + 1;\n  }\n\n  // get child\n  private getChildFacets(data: Datum[], level: number, arr: TreeData[]) {\n    // [ 'grade', 'class' ]\n    const fields = this.cfg.fields;\n    const length = fields.length;\n    if (length < level) {\n      return;\n    }\n    const rst = [];\n    // get fist level except root node\n    const field = fields[level - 1];\n    // get field value\n    const values = this.getFieldValues(data, field);\n    values.forEach((value, index) => {\n      const conditions = [{ field, value, values } as Condition];\n      const subData = data.filter(this.getFacetDataFilter(conditions));\n      if (subData.length) {\n        const facet: TreeData = {\n          type: this.cfg.type,\n          data: subData,\n          region: null,\n          columnValue: value,\n          rowValue: '',\n          columnField: field,\n          rowField: '',\n          columnIndex: index,\n          rowValuesLength: this.getRows(),\n          columnValuesLength: 1,\n          rowIndex: level,\n          children: this.getChildFacets(subData, level + 1, arr),\n        };\n        rst.push(facet);\n        arr.push(facet);\n      }\n    });\n    return rst;\n  }\n\n  public render() {\n    super.render();\n    if (this.cfg.showTitle) {\n      this.renderTitle();\n    }\n  }\n\n  private afterChartRender = () => {\n    if (this.facets && this.cfg.line) {\n      this.container.clear();\n      this.drawLines(this.facets);\n    }\n  };\n\n  private renderTitle() {\n    each(this.facets, (facet: TreeData) => {\n      const { columnValue, view } = facet;\n      const formatter = get(this.cfg.title, 'formatter');\n\n      const config = deepMix(\n        {\n          position: ['50%', '0%'] as [string, string],\n          content: formatter ? formatter(columnValue) : columnValue,\n        },\n        getFactTitleConfig(DIRECTION.TOP),\n        this.cfg.title\n      );\n\n      view.annotation().text(config);\n    });\n  }\n\n  private drawLines(facets: TreeData[]) {\n    facets.forEach((facet) => {\n      if (!this.isLeaf(facet)) {\n        const children = facet.children;\n        this.addFacetLines(facet, children);\n      }\n    });\n  }\n\n  // add lines with it's children\n  private addFacetLines(facet: TreeData, children: TreeData[]) {\n    const view = facet.view;\n    const region = view.coordinateBBox;\n    // top, right, bottom, left\n    const start = {\n      x: region.x + region.width / 2,\n      y: region.y + region.height,\n    };\n\n    children.forEach((subFacet) => {\n      const subRegion = subFacet.view.coordinateBBox;\n      const end = {\n        x: subRegion.bl.x + (subRegion.tr.x - subRegion.bl.x) / 2,\n        y: subRegion.tr.y,\n      };\n\n      const middle1 = {\n        x: start.x,\n        y: start.y + (end.y - start.y) / 2,\n      };\n      const middle2 = {\n        x: end.x,\n        y: middle1.y,\n      };\n      this.drawLine([start, middle1, middle2, end]);\n    });\n  }\n\n  private getPath(points) {\n    const path = [];\n    const smooth = this.cfg.line.smooth;\n    if (smooth) {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['C', points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y]);\n    } else {\n      points.forEach((point, index) => {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n    }\n\n    return path;\n  }\n\n  // draw line width points\n  private drawLine(points) {\n    const path = this.getPath(points);\n    const line = this.cfg.line.style;\n    this.container.addShape('path', {\n      attrs: assign(\n        {\n          // @ts-ignore\n          path,\n        },\n        line\n      ),\n    });\n  }\n\n  protected getXAxisOption(x: string, axes: any, option: AxisCfg, facet: TreeData): object {\n    if (facet.rowIndex !== facet.rowValuesLength - 1) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n\n  protected getYAxisOption(y: string, axes: any, option: AxisCfg, facet: TreeData): object {\n    if (facet.originColIndex !== 0 && facet.columnIndex !== 0) {\n      return {\n        ...option,\n        title: null,\n        label: null,\n      };\n    }\n    return option;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}