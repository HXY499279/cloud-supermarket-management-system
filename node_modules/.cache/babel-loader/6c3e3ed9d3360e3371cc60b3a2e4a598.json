{"ast":null,"code":"import inLine from './line';\nexport default function inPolyline(points, lineWidth, x, y, isClose) {\n  var count = points.length;\n\n  if (count < 2) {\n    return false;\n  }\n\n  for (var i = 0; i < count - 1; i++) {\n    var x1 = points[i][0];\n    var y1 = points[i][1];\n    var x2 = points[i + 1][0];\n    var y2 = points[i + 1][1];\n\n    if (inLine(x1, y1, x2, y2, lineWidth, x, y)) {\n      return true;\n    }\n  } // 如果封闭，则计算起始点和结束点的边\n\n\n  if (isClose) {\n    var first = points[0];\n    var last = points[count - 1];\n\n    if (inLine(first[0], first[1], last[0], last[1], lineWidth, x, y)) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["../../../src/util/in-stroke/polyline.ts"],"names":[],"mappings":"AAAA,OAAO,MAAP,MAAmB,QAAnB;AAEA,eAAc,SAAU,UAAV,CAAqB,MAArB,EAAoC,SAApC,EAAuD,CAAvD,EAAkE,CAAlE,EAA6E,OAA7E,EAA6F;AACzG,MAAM,KAAK,GAAG,MAAM,CAAC,MAArB;;AACA,MAAI,KAAK,GAAG,CAAZ,EAAe;AACb,WAAO,KAAP;AACD;;AACD,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,GAAG,CAA5B,EAA+B,CAAC,EAAhC,EAAoC;AAClC,QAAM,EAAE,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAX;AACA,QAAM,EAAE,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAX;AACA,QAAM,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAX;AACA,QAAM,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAX;;AAEA,QAAI,MAAM,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,SAAjB,EAA4B,CAA5B,EAA+B,CAA/B,CAAV,EAA6C;AAC3C,aAAO,IAAP;AACD;AACF,GAdwG,CAgBzG;;;AACA,MAAI,OAAJ,EAAa;AACX,QAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAApB;AACA,QAAM,IAAI,GAAG,MAAM,CAAC,KAAK,GAAG,CAAT,CAAnB;;AACA,QAAI,MAAM,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,KAAK,CAAC,CAAD,CAAhB,EAAqB,IAAI,CAAC,CAAD,CAAzB,EAA8B,IAAI,CAAC,CAAD,CAAlC,EAAuC,SAAvC,EAAkD,CAAlD,EAAqD,CAArD,CAAV,EAAmE;AACjE,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["import inLine from './line';\nexport default function inPolyline(points, lineWidth, x, y, isClose) {\n    var count = points.length;\n    if (count < 2) {\n        return false;\n    }\n    for (var i = 0; i < count - 1; i++) {\n        var x1 = points[i][0];\n        var y1 = points[i][1];\n        var x2 = points[i + 1][0];\n        var y2 = points[i + 1][1];\n        if (inLine(x1, y1, x2, y2, lineWidth, x, y)) {\n            return true;\n        }\n    }\n    // 如果封闭，则计算起始点和结束点的边\n    if (isClose) {\n        var first = points[0];\n        var last = points[count - 1];\n        if (inLine(first[0], first[1], last[0], last[1], lineWidth, x, y)) {\n            return true;\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=polyline.js.map"]},"metadata":{},"sourceType":"module"}