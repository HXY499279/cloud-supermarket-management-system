{"ast":null,"code":"/**\n * @fileoverview 多边形\n * @author dxq613@gmail.com\n */\nimport { __extends } from \"tslib\";\nimport ShapeBase from './base';\nimport inPolyline from '../util/in-stroke/polyline';\nimport isInPolygon from '../util/in-path/polygon';\n\nvar Polygon =\n/** @class */\nfunction (_super) {\n  __extends(Polygon, _super);\n\n  function Polygon() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Polygon.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n    var points = this.attr().points;\n    var isHit = false;\n\n    if (isStroke) {\n      isHit = inPolyline(points, lineWidth, x, y, true);\n    }\n\n    if (!isHit && isFill) {\n      isHit = isInPolygon(points, x, y); // isPointInPath(shape, x, y);\n    }\n\n    return isHit;\n  };\n\n  Polygon.prototype.createPath = function (context) {\n    var attrs = this.attr();\n    var points = attrs.points;\n\n    if (points.length < 2) {\n      return;\n    }\n\n    context.beginPath();\n\n    for (var i = 0; i < points.length; i++) {\n      var point = points[i];\n\n      if (i === 0) {\n        context.moveTo(point[0], point[1]);\n      } else {\n        context.lineTo(point[0], point[1]);\n      }\n    }\n\n    context.closePath();\n  };\n\n  return Polygon;\n}(ShapeBase);\n\nexport default Polygon;","map":{"version":3,"sources":["../../src/shape/polygon.ts"],"names":[],"mappings":"AAAA;;;AAGG;;AAEH,OAAO,SAAP,MAAsB,QAAtB;AACA,OAAO,UAAP,MAAuB,4BAAvB;AACA,OAAO,WAAP,MAAwB,yBAAxB;;AAEA,IAAA,OAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsB,EAAA,SAAA,CAAA,OAAA,EAAA,MAAA,CAAA;;AAAtB,WAAA,OAAA,GAAA;;AA8BC;;AA7BC,EAAA,OAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,CAAjB,EAAoB,CAApB,EAAuB,QAAvB,EAAiC,MAAjC,EAAyC,SAAzC,EAAkD;AACxC,QAAA,MAAM,GAAK,KAAK,IAAL,GAAL,MAAN;AACR,QAAI,KAAK,GAAG,KAAZ;;AACA,QAAI,QAAJ,EAAc;AACZ,MAAA,KAAK,GAAG,UAAU,CAAC,MAAD,EAAS,SAAT,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,IAA1B,CAAlB;AACD;;AACD,QAAI,CAAC,KAAD,IAAU,MAAd,EAAsB;AACpB,MAAA,KAAK,GAAG,WAAW,CAAC,MAAD,EAAS,CAAT,EAAY,CAAZ,CAAnB,CADoB,CACe;AACpC;;AACD,WAAO,KAAP;AACD,GAVD;;AAYA,EAAA,OAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,OAAX,EAAkB;AAChB,QAAM,KAAK,GAAG,KAAK,IAAL,EAAd;AACA,QAAM,MAAM,GAAG,KAAK,CAAC,MAArB;;AACA,QAAI,MAAM,CAAC,MAAP,GAAgB,CAApB,EAAuB;AACrB;AACD;;AACD,IAAA,OAAO,CAAC,SAAR;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACtC,UAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAApB;;AACA,UAAI,CAAC,KAAK,CAAV,EAAa;AACX,QAAA,OAAO,CAAC,MAAR,CAAe,KAAK,CAAC,CAAD,CAApB,EAAyB,KAAK,CAAC,CAAD,CAA9B;AACD,OAFD,MAEO;AACL,QAAA,OAAO,CAAC,MAAR,CAAe,KAAK,CAAC,CAAD,CAApB,EAAyB,KAAK,CAAC,CAAD,CAA9B;AACD;AACF;;AACD,IAAA,OAAO,CAAC,SAAR;AACD,GAhBD;;AAiBF,SAAA,OAAA;AAAC,CA9BD,CAAsB,SAAtB,CAAA;;AAgCA,eAAe,OAAf","sourceRoot":"","sourcesContent":["/**\n * @fileoverview 多边形\n * @author dxq613@gmail.com\n */\nimport { __extends } from \"tslib\";\nimport ShapeBase from './base';\nimport inPolyline from '../util/in-stroke/polyline';\nimport isInPolygon from '../util/in-path/polygon';\nvar Polygon = /** @class */ (function (_super) {\n    __extends(Polygon, _super);\n    function Polygon() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Polygon.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n        var points = this.attr().points;\n        var isHit = false;\n        if (isStroke) {\n            isHit = inPolyline(points, lineWidth, x, y, true);\n        }\n        if (!isHit && isFill) {\n            isHit = isInPolygon(points, x, y); // isPointInPath(shape, x, y);\n        }\n        return isHit;\n    };\n    Polygon.prototype.createPath = function (context) {\n        var attrs = this.attr();\n        var points = attrs.points;\n        if (points.length < 2) {\n            return;\n        }\n        context.beginPath();\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i];\n            if (i === 0) {\n                context.moveTo(point[0], point[1]);\n            }\n            else {\n                context.lineTo(point[0], point[1]);\n            }\n        }\n        context.closePath();\n    };\n    return Polygon;\n}(ShapeBase));\nexport default Polygon;\n//# sourceMappingURL=polygon.js.map"]},"metadata":{},"sourceType":"module"}