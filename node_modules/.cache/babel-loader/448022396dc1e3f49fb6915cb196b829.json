{"ast":null,"code":"import { each } from '@antv/util';\n/**\n * @ignore\n * Gets cpath\n * @param from\n * @param to\n * @returns\n */\n\nexport function getCPath(from, to) {\n  return ['C', from.x * 1 / 2 + to.x * 1 / 2, from.y, from.x * 1 / 2 + to.x * 1 / 2, to.y, to.x, to.y];\n}\n/**\n * @ignore\n * Gets qpath\n * @param to\n * @param center\n * @returns\n */\n\nexport function getQPath(to, center) {\n  var points = [];\n  points.push({\n    x: center.x,\n    y: center.y\n  });\n  points.push(to);\n  var sub = ['Q'];\n  each(points, function (point) {\n    sub.push(point.x, point.y);\n  });\n  return sub;\n}","map":{"version":3,"sources":["../../../../src/geometry/shape/edge/util.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,QAAqB,YAArB;AAGA;;;;;;AAMG;;AACH,OAAM,SAAU,QAAV,CAAmB,IAAnB,EAAgC,EAAhC,EAAyC;AAC7C,SAAO,CACL,GADK,EAEJ,IAAI,CAAC,CAAL,GAAS,CAAV,GAAe,CAAf,GAAoB,EAAE,CAAC,CAAH,GAAO,CAAR,GAAa,CAF3B,EAE8B,IAAI,CAAC,CAFnC,EAGJ,IAAI,CAAC,CAAL,GAAS,CAAV,GAAe,CAAf,GAAoB,EAAE,CAAC,CAAH,GAAO,CAAR,GAAa,CAH3B,EAG8B,EAAE,CAAC,CAHjC,EAIL,EAAE,CAAC,CAJE,EAIC,EAAE,CAAC,CAJJ,CAAP;AAMD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,QAAV,CAAmB,EAAnB,EAA8B,MAA9B,EAA2C;AAC/C,MAAM,MAAM,GAAG,EAAf;AACA,EAAA,MAAM,CAAC,IAAP,CAAY;AACV,IAAA,CAAC,EAAE,MAAM,CAAC,CADA;AAEV,IAAA,CAAC,EAAE,MAAM,CAAC;AAFA,GAAZ;AAIA,EAAA,MAAM,CAAC,IAAP,CAAY,EAAZ;AAEA,MAAM,GAAG,GAAG,CAAC,GAAD,CAAZ;AACA,EAAA,IAAI,CAAC,MAAD,EAAS,UAAC,KAAD,EAAM;AACjB,IAAA,GAAG,CAAC,IAAJ,CAAS,KAAK,CAAC,CAAf,EAAkB,KAAK,CAAC,CAAxB;AACD,GAFG,CAAJ;AAIA,SAAO,GAAP;AACD","sourcesContent":["import { each } from '@antv/util';\nimport { Point } from '../../../interface';\n\n/**\n * @ignore\n * Gets cpath\n * @param from\n * @param to\n * @returns\n */\nexport function getCPath(from: Point, to: Point) {\n  return [\n    'C',\n    (from.x * 1) / 2 + (to.x * 1) / 2, from.y,\n    (from.x * 1) / 2 + (to.x * 1) / 2, to.y,\n    to.x, to.y,\n  ];\n}\n\n/**\n * @ignore\n * Gets qpath\n * @param to\n * @param center\n * @returns\n */\nexport function getQPath(to: Point, center: Point) {\n  const points = [];\n  points.push({\n    x: center.x,\n    y: center.y,\n  });\n  points.push(to);\n\n  const sub = ['Q'];\n  each(points, (point) => {\n    sub.push(point.x, point.y);\n  });\n\n  return sub;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}