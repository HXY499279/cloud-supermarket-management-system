{"ast":null,"code":"import each from './each';\nimport isArray from './is-array';\nimport isFunction from './is-function';\n/**\n * @param {Array} arr The array to iterate over.\n * @param {Function} [fn] The iteratee invoked per element.\n * @return {*} Returns the maximum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * maxBy(objects, function(o) { return o.n; });\n * // => { 'n': 2 }\n *\n * maxBy(objects, 'n');\n * // => { 'n': 2 }\n */\n\nexport default (function (arr, fn) {\n  if (!isArray(arr)) {\n    return undefined;\n  }\n\n  var max = arr[0];\n  var maxData;\n\n  if (isFunction(fn)) {\n    maxData = fn(arr[0]);\n  } else {\n    maxData = arr[0][fn];\n  }\n\n  var data;\n  each(arr, function (val) {\n    if (isFunction(fn)) {\n      data = fn(val);\n    } else {\n      data = val[fn];\n    }\n\n    if (data > maxData) {\n      max = val;\n      maxData = data;\n    }\n  });\n  return max;\n});","map":{"version":3,"sources":["../src/max-by.ts"],"names":[],"mappings":"AAAA,OAAO,IAAP,MAAiB,QAAjB;AACA,OAAO,OAAP,MAAoB,YAApB;AACA,OAAO,UAAP,MAAuB,eAAvB;AACA;;;;;;;;;;;;;AAaG;;AACH,gBAAe,UAAI,GAAJ,EAAc,EAAd,EAA6C;AAC1D,MAAI,CAAC,OAAO,CAAC,GAAD,CAAZ,EAAmB;AACjB,WAAO,SAAP;AACD;;AACD,MAAI,GAAG,GAAG,GAAG,CAAC,CAAD,CAAb;AACA,MAAI,OAAJ;;AACA,MAAI,UAAU,CAAC,EAAD,CAAd,EAAoB;AAClB,IAAA,OAAO,GAAG,EAAE,CAAC,GAAG,CAAC,CAAD,CAAJ,CAAZ;AACD,GAFD,MAEO;AACL,IAAA,OAAO,GAAG,GAAG,CAAC,CAAD,CAAH,CAAO,EAAP,CAAV;AACD;;AACD,MAAI,IAAJ;AACA,EAAA,IAAI,CAAC,GAAD,EAAM,UAAA,GAAA,EAAG;AACX,QAAI,UAAU,CAAC,EAAD,CAAd,EAAoB;AAClB,MAAA,IAAI,GAAG,EAAE,CAAC,GAAD,CAAT;AACD,KAFD,MAEO;AACL,MAAA,IAAI,GAAG,GAAG,CAAC,EAAD,CAAV;AACD;;AACD,QAAI,IAAI,GAAG,OAAX,EAAoB;AAClB,MAAA,GAAG,GAAG,GAAN;AACA,MAAA,OAAO,GAAG,IAAV;AACD;AACF,GAVG,CAAJ;AAWA,SAAO,GAAP;AACD,CAxBD","sourceRoot":"","sourcesContent":["import each from './each';\nimport isArray from './is-array';\nimport isFunction from './is-function';\n/**\n * @param {Array} arr The array to iterate over.\n * @param {Function} [fn] The iteratee invoked per element.\n * @return {*} Returns the maximum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * maxBy(objects, function(o) { return o.n; });\n * // => { 'n': 2 }\n *\n * maxBy(objects, 'n');\n * // => { 'n': 2 }\n */\nexport default (function (arr, fn) {\n    if (!isArray(arr)) {\n        return undefined;\n    }\n    var max = arr[0];\n    var maxData;\n    if (isFunction(fn)) {\n        maxData = fn(arr[0]);\n    }\n    else {\n        maxData = arr[0][fn];\n    }\n    var data;\n    each(arr, function (val) {\n        if (isFunction(fn)) {\n            data = fn(val);\n        }\n        else {\n            data = val[fn];\n        }\n        if (data > maxData) {\n            max = val;\n            maxData = data;\n        }\n    });\n    return max;\n});\n//# sourceMappingURL=max-by.js.map"]},"metadata":{},"sourceType":"module"}